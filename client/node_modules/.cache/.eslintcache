[{"C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\index.js":"1","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\App.js":"3","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\UserHome\\UserHomePage.js":"4","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\Menu\\ResponsiveAppBar.js":"5","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\patients\\patients.js":"6","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\patients\\newPatientModal.js":"7","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\vaccinations\\vaccinations.js":"8","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\statistics\\BasicLineChart.js":"9","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\statistics\\Statistics.js":"10","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\statistics\\BasicBars.js":"11"},{"size":574,"mtime":1711574771836,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1711574771837,"results":"14","hashOfConfig":"13"},{"size":730,"mtime":1711635018088,"results":"15","hashOfConfig":"13"},{"size":416,"mtime":1711635679120,"results":"16","hashOfConfig":"13"},{"size":5407,"mtime":1711635899473,"results":"17","hashOfConfig":"13"},{"size":8762,"mtime":1711635229943,"results":"18","hashOfConfig":"13"},{"size":15227,"mtime":1711632997702,"results":"19","hashOfConfig":"13"},{"size":9337,"mtime":1711574771836,"results":"20","hashOfConfig":"13"},{"size":1654,"mtime":1711575351781,"results":"21","hashOfConfig":"13"},{"size":1130,"mtime":1711635408803,"results":"22","hashOfConfig":"13"},{"size":1502,"mtime":1711574771832,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tyxriq",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\index.js",[],[],"C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\App.js",["64"],[],"import React from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport UserHomePage from \"./components/UserHome/UserHomePage\";\r\nimport Patients from \"./components/patients/patients\";\r\nimport Statistics from \"./components/statistics/Statistics\";\r\n\r\nfunction App() {\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    navigate(\"/\");\r\n  }, []);\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<UserHomePage></UserHomePage>} />\r\n      <Route path=\"/patients\" element={<Patients></Patients>} />\r\n      <Route path=\"/statistics\" element={<Statistics></Statistics>} />\r\n    </Routes>\r\n  );\r\n}\r\nexport default App;\r\n","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\UserHome\\UserHomePage.js",["65","66"],[],"import React, { useState, useEffect } from \"react\";\r\nimport ResponsiveAppBar from \"../Menu/ResponsiveAppBar\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nconst UserHomePage = () => {\r\n  return (\r\n    <div>\r\n      {<ResponsiveAppBar></ResponsiveAppBar>}\r\n      <Typography variant=\"h2\" align=\"center\">\r\n        Patient Management System\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserHomePage;\r\n","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\Menu\\ResponsiveAppBar.js",["67","68","69","70","71","72"],[],"import * as React from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst menu = [\"Patients\", \"Statistics\"];\r\nconst settings = [\"Logout\"];\r\n\r\nconst ResponsiveAppBar = () => {\r\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\r\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const handleOpenNavMenu = (event) => {\r\n    setAnchorElNav(event.currentTarget);\r\n  };\r\n  const handleOpenUserMenu = (event) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <MenuItem onClick={() => navigate(\"/\")}>\r\n            <Typography\r\n              variant=\"h6\"\r\n              noWrap\r\n              component=\"a\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n              }}\r\n              sx={{\r\n                mr: 2,\r\n                display: { xs: \"none\", md: \"flex\" },\r\n                fontFamily: \"monospace\",\r\n                fontWeight: 700,\r\n                letterSpacing: \".3rem\",\r\n                color: \"inherit\",\r\n                textDecoration: \"none\",\r\n              }}\r\n            >\r\n              PatientM\r\n            </Typography>{\" \"}\r\n          </MenuItem>\r\n\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"menu-appbar\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleOpenNavMenu}\r\n              color=\"inherit\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElNav}\r\n              anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"left\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n              open={Boolean(anchorElNav)}\r\n              onClose={handleCloseNavMenu}\r\n              sx={{\r\n                display: { xs: \"block\", md: \"none\" },\r\n              }}\r\n            >\r\n              {menu.map((page, index) => (\r\n                <MenuItem key={page} onClick={() => navigate(`/${page}`)}>\r\n                  <Typography textAlign=\"center\">{page}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n          <MenuItem onClick={() => navigate(\"/\")}>\r\n            <Typography\r\n              variant=\"h5\"\r\n              noWrap\r\n              component=\"a\"\r\n              sx={{\r\n                mr: 2,\r\n                display: { xs: \"flex\", md: \"none\" },\r\n                flexGrow: 1,\r\n                fontFamily: \"monospace\",\r\n                fontWeight: 700,\r\n                letterSpacing: \".3rem\",\r\n                color: \"inherit\",\r\n                textDecoration: \"none\",\r\n              }}\r\n            >\r\n              PatientM\r\n            </Typography>\r\n          </MenuItem>\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }}>\r\n            {menu.map((page, index) => (\r\n              <Button\r\n                key={page}\r\n                onClick={() => navigate(`/${page}`)}\r\n                sx={{ my: 2, color: \"white\", display: \"block\" }}\r\n              >\r\n                {page}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n          {/* Profile icon and Logout (right side)*/}\r\n          {/* <Box sx={{ flexGrow: 0 }}>\r\n            <Tooltip title=\"Open settings\">\r\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n              sx={{ mt: \"45px\" }}\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElUser}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              open={Boolean(anchorElUser)}\r\n              onClose={handleCloseUserMenu}\r\n            >\r\n              {settings.map((setting) => (\r\n                <MenuItem key={setting}>\r\n                  <Typography textAlign=\"center\">{setting}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box> */}\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default ResponsiveAppBar;\r\n","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\patients\\patients.js",[],[],"C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\patients\\newPatientModal.js",["73","74","75"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Vaccinations from \"../vaccinations/vaccinations\";\r\n\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CloseOutlinedIcon from \"@mui/icons-material/CloseOutlined\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport { DemoContainer, DemoItem } from \"@mui/x-date-pickers/internals/demo\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport dayjs from \"dayjs\";\r\n\r\nconst NewPatientModal = ({\r\n  isOpen,\r\n  onClose,\r\n  savePatient,\r\n  newPatient,\r\n  setNewPatient,\r\n  deletePatient,\r\n  isReadOnly,\r\n  addingMode,\r\n}) => {\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: 600,\r\n    bgcolor: \"background.paper\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n  };\r\n\r\n  const [CitysList, setCityList] = useState([\"Tel Aviv\", \"Jerusalem\"]);\r\n  const [editingMode, setEditingMode] = useState(!isReadOnly);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setNewPatient((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const validation = () => {\r\n    for (var prop in newPatient) {\r\n      console.log(prop);\r\n      switch (prop) {\r\n        case \"name\":\r\n          if (!/^[a-zA-Z \\-]*$/.test(newPatient.name)) {\r\n            return false;\r\n          }\r\n          break;\r\n        case \"id\":\r\n          if (!/^\\d+$/.test(newPatient.id)) {\r\n            return false;\r\n          }\r\n          break;\r\n        case \"phone\":\r\n          if (!/^\\d+$/.test(newPatient.phone)) {\r\n            return false;\r\n          }\r\n          break;\r\n        case \"mobile_phone\":\r\n          if (!/^\\d+$/.test(newPatient.mobile_phone)) {\r\n            return false;\r\n          }\r\n          break;\r\n        case \"address\":\r\n          if (!/^[a-zA-Z \\-\\d]*$/.test(newPatient.address)) {\r\n            return false;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  const handleDatesChange = (name, value) => {\r\n    setNewPatient((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const formattedDate = (date) => {\r\n    return new Date(date).toLocaleDateString(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n    });\r\n  };\r\n\r\n  const legalDate = (inputDate) => {\r\n    const date = new Date(inputDate);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Months are 0-indexed, so we add 1\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const getCitiesList = async () => {\r\n    try {\r\n      console.log(\"getCitiesList\");\r\n      const response = await fetch(\r\n        \"https://data.gov.il/api/3/action/datastore_search?resource_id=b7cf8f14-64a2-4b33-8d4b-edb286fdbd37\",\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        const cityList = [];\r\n        for (var i = 0; i < responseData.result.records.length; i++) {\r\n          var d = responseData.result.records[i].שם_ישוב;\r\n          cityList.push(d);\r\n        }\r\n        setCityList(cityList);\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      alert(\"Error fetching data\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCitiesList();\r\n  }, []);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <Box sx={style}>\r\n      <Box sx={{ color: \"text.primary\", fontSize: 50, fontWeight: \"medium\" }}>\r\n        {newPatient.name === \"\" ? \"New Patient\" : newPatient.name}\r\n      </Box>\r\n      <Box\r\n        sx={\r\n          editingMode\r\n            ? { display: \"flex\", flexWrap: \"wrap\" }\r\n            : {\r\n                bgcolor: \"background.paper\",\r\n                boxShadow: 1,\r\n                borderRadius: 2,\r\n                p: 2,\r\n                minWidth: 300,\r\n              }\r\n        }\r\n      >\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>ID: </label>\r\n              <label>{newPatient.id}</label>\r\n            </Box>\r\n          ) : (\r\n            <TextField\r\n              name=\"id\"\r\n              id=\"id\"\r\n              label=\"ID\"\r\n              type=\"text\"\r\n              value={newPatient.id}\r\n              variant=\"outlined\"\r\n              error={!/^\\d+$/.test(newPatient.id)}\r\n              onError={() => {\r\n                console.log(\"id\");\r\n              }}\r\n              helperText={!/^\\d+$/.test(newPatient.id) ? \"Numbers only\" : \"\"}\r\n              onChange={handleInputChange}\r\n              sx={{ m: 1, width: \"20ch\" }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>Name: </label>\r\n              <label>{newPatient.name}</label>\r\n            </Box>\r\n          ) : (\r\n            <TextField\r\n              name=\"name\"\r\n              id=\"name\"\r\n              label=\"Name\"\r\n              type=\"text\"\r\n              value={newPatient.name}\r\n              variant=\"outlined\"\r\n              error={!/^[a-zA-Z \\-]*$/.test(newPatient.name)}\r\n              helperText={\r\n                !/^[a-zA-Z \\-]*$/.test(newPatient.name) ? \"Letters only\" : \"\"\r\n              }\r\n              onChange={handleInputChange}\r\n              sx={{ m: 1, width: \"20ch\" }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>City: </label>\r\n              <label>{newPatient.city}</label>\r\n            </Box>\r\n          ) : (\r\n            <TextField\r\n              id=\"city\"\r\n              name=\"city\"\r\n              select\r\n              label=\"city\"\r\n              value={newPatient.city}\r\n              variant=\"outlined\"\r\n              onChange={handleInputChange}\r\n              sx={{ m: 1, width: \"20ch\" }}\r\n            >\r\n              {CitysList.map((option) => (\r\n                <MenuItem key={option} value={option}>\r\n                  {option}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          )}\r\n        </div>\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>Address: </label>\r\n              <label>{newPatient.address}</label>\r\n            </Box>\r\n          ) : (\r\n            <TextField\r\n              name=\"address\"\r\n              id=\"address\"\r\n              label=\"Address\"\r\n              type=\"text\"\r\n              value={newPatient.address}\r\n              variant=\"outlined\"\r\n              error={!/^[a-zA-Z \\-\\d]*$/.test(newPatient.address)}\r\n              helperText={\r\n                !/^[a-zA-Z \\-\\d]*$/.test(newPatient.address)\r\n                  ? \"Letters and numbers only\"\r\n                  : \"\"\r\n              }\r\n              onChange={handleInputChange}\r\n              sx={{ m: 1, width: \"20ch\" }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>Birth Date: </label>\r\n              <label>{formattedDate(newPatient.birth_date)}</label>\r\n            </Box>\r\n          ) : (\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n              <DemoContainer\r\n                components={[\r\n                  \"DatePicker\",\r\n                  \"TimePicker\",\r\n                  \"DateTimePicker\",\r\n                  \"DateRangePicker\",\r\n                ]}\r\n              >\r\n                <DemoItem>\r\n                  <DatePicker\r\n                    sx={{ m: 1, width: \"20ch\" }}\r\n                    value={dayjs(legalDate(newPatient.birth_date))}\r\n                    format=\"DD/MM/YYYY\"\r\n                    label=\"Birth Date\"\r\n                    onChange={(newValue) => {\r\n                      handleDatesChange(\"birth_date\", newValue);\r\n                    }}\r\n                  />\r\n                </DemoItem>\r\n              </DemoContainer>\r\n            </LocalizationProvider>\r\n          )}\r\n        </div>\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>Phone: </label>\r\n              <label>{newPatient.phone}</label>\r\n            </Box>\r\n          ) : (\r\n            <TextField\r\n              name=\"phone\"\r\n              id=\"phone\"\r\n              label=\"Phone\"\r\n              type=\"text\"\r\n              value={newPatient.phone}\r\n              variant=\"outlined\"\r\n              error={!/^\\d+$/.test(newPatient.phone)}\r\n              helperText={!/^\\d+$/.test(newPatient.phone) ? \"Numbers only\" : \"\"}\r\n              onChange={handleInputChange}\r\n              sx={{ m: 1, width: \"20ch\" }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>Mobile: </label>\r\n              <label>{newPatient.mobile_phone}</label>\r\n            </Box>\r\n          ) : (\r\n            <TextField\r\n              name=\"mobile_phone\"\r\n              id=\"mobile phone\"\r\n              label=\"Mobile Phone\"\r\n              type=\"text\"\r\n              value={newPatient.mobile_phone}\r\n              variant=\"outlined\"\r\n              error={!/^\\d+$/.test(newPatient.mobile_phone)}\r\n              helperText={\r\n                !/^\\d+$/.test(newPatient.mobile_phone) ? \"Numbers only\" : \"\"\r\n              }\r\n              onChange={handleInputChange}\r\n              sx={{ m: 1, width: \"20ch\" }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>Positive result date: </label>\r\n              <label>{formattedDate(newPatient.positive_result_date)}</label>\r\n            </Box>\r\n          ) : (\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n              <DemoContainer\r\n                components={[\r\n                  \"DatePicker\",\r\n                  \"TimePicker\",\r\n                  \"DateTimePicker\",\r\n                  \"DateRangePicker\",\r\n                ]}\r\n              >\r\n                <DemoItem>\r\n                  <DatePicker\r\n                    sx={{ m: 1, width: \"20ch\" }}\r\n                    format=\"DD/MM/YYYY\"\r\n                    value={dayjs(legalDate(newPatient.positive_result_date))}\r\n                    label=\"Positive result date\"\r\n                    onChange={(newValue) => {\r\n                      handleDatesChange(\"positive_result_date\", newValue);\r\n                    }}\r\n                  />\r\n                </DemoItem>\r\n              </DemoContainer>\r\n            </LocalizationProvider>\r\n          )}\r\n        </div>\r\n        <div>\r\n          {!editingMode ? (\r\n            <Box\r\n              sx={{\r\n                color: \"text.secondary\",\r\n                fontSize: 20,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                margin: \"10px\",\r\n              }}\r\n            >\r\n              <label>Recovery date: </label>\r\n              <label>{formattedDate(newPatient.recovery_date)}</label>\r\n            </Box>\r\n          ) : (\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n              <DemoContainer\r\n                components={[\r\n                  \"DatePicker\",\r\n                  \"TimePicker\",\r\n                  \"DateTimePicker\",\r\n                  \"DateRangePicker\",\r\n                ]}\r\n              >\r\n                <DemoItem>\r\n                  <DatePicker\r\n                    sx={{ m: 1, width: \"20ch\" }}\r\n                    format=\"DD/MM/YYYY\"\r\n                    value={dayjs(legalDate(newPatient.recovery_date))}\r\n                    label=\"Recovery date\"\r\n                    onChange={(newValue) => {\r\n                      handleDatesChange(\"recovery_date\", newValue);\r\n                    }}\r\n                  />\r\n                </DemoItem>\r\n              </DemoContainer>\r\n            </LocalizationProvider>\r\n          )}\r\n        </div>\r\n      </Box>\r\n      <div>\r\n        {newPatient && (\r\n          <Vaccinations\r\n            patient={newPatient}\r\n            legalDate={legalDate}\r\n          ></Vaccinations>\r\n        )}\r\n      </div>\r\n      <div>\r\n        {isReadOnly && (\r\n          <IconButton\r\n            aria-label=\"edit\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              setEditingMode(true);\r\n            }}\r\n          >\r\n            <EditIcon />\r\n          </IconButton>\r\n        )}\r\n        {isReadOnly && (\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            color=\"error\"\r\n            onClick={() => {\r\n              deletePatient();\r\n            }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        )}\r\n        <IconButton\r\n          aria-label=\"cancel\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            onClose();\r\n          }}\r\n        >\r\n          <CloseOutlinedIcon />\r\n        </IconButton>\r\n        <Button\r\n          color=\"success\"\r\n          variant=\"outlined\"\r\n          onClick={() => {\r\n            savePatient(validation);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Box>\r\n  );\r\n};\r\nexport default NewPatientModal;\r\n","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\vaccinations\\vaccinations.js",["76","77","78","79","80"],[],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { DemoContainer, DemoItem } from \"@mui/x-date-pickers/internals/demo\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport dayjs from \"dayjs\";\r\nimport DoneIcon from \"@mui/icons-material/Done\";\r\n\r\nconst Vaccinations = ({ patient }) => {\r\n  const URL = \"http://localhost:3500/api/vaccinations/\";\r\n  const [vaccinationAddingMode, setVaccinationAddingMode] = useState(false);\r\n  const [newVaccination, setNewVaccination] = useState({\r\n    vac_date: \"\",\r\n    vac_manufacturer: \"\",\r\n  });\r\n  const [vaccinationList, setVaccinationList] = useState([]);\r\n\r\n  const getVaccinations = async () => {\r\n    if (patient.id != undefined) {\r\n      try {\r\n        const response = await fetch(`${URL}/${patient.id}`, {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n\r\n        if (response.ok) {\r\n          const responseData = await response.json();\r\n          if (responseData.length > 0) {\r\n            setVaccinationList([...responseData]);\r\n          }\r\n        } else {\r\n          setVaccinationList(null);\r\n        }\r\n      } catch (error) {\r\n        alert(\r\n          `Error fetching Vaccinations's list of patient with id: ${patient.id}`\r\n        );\r\n      }\r\n    } else {\r\n      setVaccinationList(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Get patients from the server\r\n    getVaccinations();\r\n  }, [patient]);\r\n\r\n  const handleInputChangeVac = (event) => {\r\n    const { name, value } = event.target;\r\n    const finalValue = value;\r\n    setNewVaccination((prev) => ({ ...prev, [name]: finalValue }));\r\n  };\r\n\r\n  const handleDatesChange = (name, value) => {\r\n    setNewVaccination((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const addVaccination = async () => {\r\n    if (patient.id == undefined) {\r\n      alert(\"Please fill the personal details first\");\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(`${URL}/${patient.id}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(newVaccination),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setVaccinationList((prevVaccinationList) => [\r\n          ...prevVaccinationList,\r\n          newVaccination,\r\n        ]);\r\n        setVaccinationAddingMode(false);\r\n      } else {\r\n        // Handle duplicate entry error\r\n        if (response.status === 409) {\r\n          alert(\"Vaccination is already exists\");\r\n        } else {\r\n          // Handle other server-side errors\r\n          alert(\r\n            \"An error occurred while adding the new Vaccination. Please try again.\"\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      alert(\r\n        \"A network error occurred. Please check your internet connection and try again.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const deleteVaccination = async (id, index) => {\r\n    try {\r\n      const response = await fetch(`${URL}/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Remove ability from local state as well\r\n        const newVaccinationsList = [...vaccinationList];\r\n        newVaccinationsList.splice(index, 1);\r\n        setVaccinationList(newVaccinationsList);\r\n      } else {\r\n        alert(\r\n          \"An error occurred while deleting the patient. Please try again.\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      alert(\r\n        \"A network error occurred. Please check your internet connection and try again.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const formattedDate = (date) => {\r\n    return new Date(date).toLocaleDateString(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n    });\r\n  };\r\n\r\n  const legalDate = (inputDate) => {\r\n    const date = new Date(inputDate);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Months are 0-indexed, so we add 1\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>{\"Vaccinations List\"}</h2>\r\n        <TableContainer sx={{ maxWidth: 850 }} component={Paper}>\r\n          <Table sx={{ maxWidth: 850 }} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"left\">Received on</TableCell>\r\n                <TableCell align=\"left\">Manufacturer</TableCell>\r\n                <TableCell align=\"left\">Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {vaccinationList &&\r\n                Array.isArray(vaccinationList) &&\r\n                vaccinationList.map((vaccination, index) => {\r\n                  return (\r\n                    <TableRow\r\n                      key={index}\r\n                      sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                    >\r\n                      <TableCell align=\"left\">\r\n                        {formattedDate(vaccination.vac_date)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {vaccination.vac_manufacturer}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        <IconButton\r\n                          aria-label=\"delete\"\r\n                          color=\"error\"\r\n                          onClick={() => {\r\n                            deleteVaccination(vaccination.id, index);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <div>\r\n          {vaccinationAddingMode && (\r\n            <Box sx={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n              <div>\r\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                  <DemoContainer\r\n                    components={[\r\n                      \"DatePicker\",\r\n                      \"TimePicker\",\r\n                      \"DateTimePicker\",\r\n                      \"DateRangePicker\",\r\n                    ]}\r\n                  >\r\n                    <DemoItem>\r\n                      <DatePicker\r\n                        name=\"vac_date\"\r\n                        lable=\"Received on\"\r\n                        type=\"date\"\r\n                        format=\"DD/MM/YYYY\"\r\n                        value={dayjs(legalDate(newVaccination.vac_date))}\r\n                        onChange={(newValue) => {\r\n                          handleDatesChange(\"vac_date\", newValue);\r\n                        }}\r\n                      />\r\n                    </DemoItem>\r\n                  </DemoContainer>\r\n                </LocalizationProvider>\r\n              </div>\r\n              <div>\r\n                <TextField\r\n                  name=\"vac_manufacturer\"\r\n                  id=\"vac_manufacturer\"\r\n                  label=\"Manufacturer\"\r\n                  type=\"text\"\r\n                  value={newVaccination.vac_manufacturer}\r\n                  variant=\"outlined\"\r\n                  error={\r\n                    !/^[a-zA-Z \\-]*$/.test(newVaccination.vac_manufacturer)\r\n                  }\r\n                  onError={() => {}}\r\n                  helperText={\r\n                    !/^[a-zA-Z \\-]*$/.test(newVaccination.vac_manufacturer)\r\n                      ? \"Letters only\"\r\n                      : \"\"\r\n                  }\r\n                  onChange={handleInputChangeVac}\r\n                  sx={{ m: 1, width: \"20ch\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <IconButton\r\n                  aria-label=\"Save\"\r\n                  variant=\"Contained\"\r\n                  color=\"success\"\r\n                  onClick={() => {\r\n                    addVaccination();\r\n                  }}\r\n                >\r\n                  <DoneIcon />\r\n                </IconButton>\r\n              </div>\r\n            </Box>\r\n          )}\r\n          <IconButton\r\n            aria-label=\"Add Vaccination\"\r\n            color=\"primary\"\r\n            disabled={vaccinationList && vaccinationList.length >= 4}\r\n            onClick={() => {\r\n              setVaccinationAddingMode(true);\r\n            }}\r\n          >\r\n            <AddIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Vaccinations;\r\n","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\statistics\\BasicLineChart.js",["81"],[],"import { useState, useEffect } from \"react\";\r\nimport { LineChart } from \"@mui/x-charts/LineChart\";\r\n\r\nconst BasicLineChart = () => {\r\n  const URL = \"http://localhost:3500/api/statistics/activePatients\";\r\n  const [xVals, setXVals] = useState(null);\r\n  const [yVals, setYVals] = useState(null);\r\n\r\n  const getLegalDates = (datesList) => {\r\n    const newList = [];\r\n    datesList.forEach((element) => {\r\n      const date = new Date(element);\r\n      const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n      const day = String(date.getDate()).padStart(2, \"0\");\r\n      newList.push(`${day}/${month}`);\r\n    });\r\n    console.log(newList);\r\n    return newList;\r\n  };\r\n\r\n  const getActivePatients = async () => {\r\n    try {\r\n      const response = await fetch(`${URL}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        setXVals(getLegalDates(responseData.dates));\r\n        setYVals(responseData.activePatientsCount);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error fetching data\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getActivePatients();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {xVals != null && yVals != null && (\r\n        <LineChart\r\n          xAxis={[{ scaleType: \"point\", data: xVals, label: \"Day In Month\" }]}\r\n          series={[\r\n            {\r\n              data: yVals,\r\n              label: \"Active Patients\",\r\n            },\r\n          ]}\r\n          width={800}\r\n          height={400}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default BasicLineChart;\r\n","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\statistics\\Statistics.js",["82","83"],[],"import React, { useState, useEffect } from \"react\";\r\nimport BasicLineChart from \"./BasicLineChart\";\r\nimport BasicBars from \"./BasicBars\";\r\nimport { Typography, Box } from \"@mui/material\";\r\nimport ResponsiveAppBar from \"../Menu/ResponsiveAppBar\";\r\n\r\nconst Statistics = () => {\r\n  return (\r\n    <div>\r\n      <ResponsiveAppBar></ResponsiveAppBar>\r\n      <Typography variant=\"h3\" align=\"center\">\r\n        Statistics\r\n      </Typography>\r\n      <Box sx={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        <Box\r\n          sx={{\r\n            bgcolor: \"background.paper\",\r\n            boxShadow: 1,\r\n            borderRadius: 2,\r\n            p: 2,\r\n            minWidth: 300,\r\n            margin: \"10px\",\r\n          }}\r\n        >\r\n          <BasicLineChart></BasicLineChart>\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            bgcolor: \"background.paper\",\r\n            boxShadow: 1,\r\n            borderRadius: 2,\r\n            p: 2,\r\n            minWidth: 300,\r\n            margin: \"10px\",\r\n          }}\r\n        >\r\n          <BasicBars></BasicBars>\r\n        </Box>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","C:\\Users\\Michal Abargel\\Desktop\\FULLSTACK_PROJECTS\\Patient-Management\\client\\src\\components\\statistics\\BasicBars.js",[],[],{"ruleId":"84","severity":1,"message":"85","line":13,"column":6,"nodeType":"86","endLine":13,"endColumn":8,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"92","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"93","line":10,"column":8,"nodeType":"90","messageId":"91","endLine":10,"endColumn":14},{"ruleId":"88","severity":1,"message":"94","line":12,"column":8,"nodeType":"90","messageId":"91","endLine":12,"endColumn":15},{"ruleId":"88","severity":1,"message":"95","line":18,"column":7,"nodeType":"90","messageId":"91","endLine":18,"endColumn":15},{"ruleId":"88","severity":1,"message":"96","line":22,"column":10,"nodeType":"90","messageId":"91","endLine":22,"endColumn":22},{"ruleId":"88","severity":1,"message":"97","line":28,"column":9,"nodeType":"90","messageId":"91","endLine":28,"endColumn":27},{"ruleId":"88","severity":1,"message":"98","line":36,"column":9,"nodeType":"90","messageId":"91","endLine":36,"endColumn":28},{"ruleId":"99","severity":1,"message":"100","line":53,"column":26,"nodeType":"101","messageId":"102","endLine":53,"endColumn":27,"suggestions":"103"},{"ruleId":"99","severity":1,"message":"100","line":205,"column":33,"nodeType":"101","messageId":"102","endLine":205,"endColumn":34,"suggestions":"104"},{"ruleId":"99","severity":1,"message":"100","line":207,"column":28,"nodeType":"101","messageId":"102","endLine":207,"endColumn":29,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":32,"column":20,"nodeType":"108","messageId":"109","endLine":32,"endColumn":22},{"ruleId":"84","severity":1,"message":"110","line":62,"column":6,"nodeType":"86","endLine":62,"endColumn":15,"suggestions":"111"},{"ruleId":"106","severity":1,"message":"112","line":75,"column":20,"nodeType":"108","messageId":"109","endLine":75,"endColumn":22},{"ruleId":"99","severity":1,"message":"100","line":236,"column":32,"nodeType":"101","messageId":"102","endLine":236,"endColumn":33,"suggestions":"113"},{"ruleId":"99","severity":1,"message":"100","line":240,"column":32,"nodeType":"101","messageId":"102","endLine":240,"endColumn":33,"suggestions":"114"},{"ruleId":"84","severity":1,"message":"115","line":41,"column":6,"nodeType":"86","endLine":41,"endColumn":8,"suggestions":"116"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"92","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["117"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Avatar' is defined but never used.","'Tooltip' is defined but never used.","'settings' is assigned a value but never used.","'anchorElUser' is assigned a value but never used.","'handleOpenUserMenu' is assigned a value but never used.","'handleCloseUserMenu' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["118","119"],["120","121"],["122","123"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getVaccinations'. Either include it or remove the dependency array.",["124"],"Expected '===' and instead saw '=='.",["125","126"],["127","128"],"React Hook useEffect has a missing dependency: 'getActivePatients'. Either include it or remove the dependency array.",["129"],{"desc":"130","fix":"131"},{"messageId":"132","fix":"133","desc":"134"},{"messageId":"135","fix":"136","desc":"137"},{"messageId":"132","fix":"138","desc":"134"},{"messageId":"135","fix":"139","desc":"137"},{"messageId":"132","fix":"140","desc":"134"},{"messageId":"135","fix":"141","desc":"137"},{"desc":"142","fix":"143"},{"messageId":"132","fix":"144","desc":"134"},{"messageId":"135","fix":"145","desc":"137"},{"messageId":"132","fix":"146","desc":"134"},{"messageId":"135","fix":"147","desc":"137"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [navigate]",{"range":"150","text":"151"},"removeEscape",{"range":"152","text":"153"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"154","text":"155"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"156","text":"153"},{"range":"157","text":"155"},{"range":"158","text":"153"},{"range":"159","text":"155"},"Update the dependencies array to be: [getVaccinations, patient]",{"range":"160","text":"161"},{"range":"162","text":"153"},{"range":"163","text":"155"},{"range":"164","text":"153"},{"range":"165","text":"155"},"Update the dependencies array to be: [getActivePatients]",{"range":"166","text":"167"},[447,449],"[navigate]",[1690,1691],"",[1690,1690],"\\",[5940,5941],[5940,5940],[6026,6027],[6026,6026],[2190,2199],"[getVaccinations, patient]",[8094,8095],[8094,8094],[8262,8263],[8262,8262],[1223,1225],"[getActivePatients]"]