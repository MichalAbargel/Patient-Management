{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/scheduler/timezones/m_utils_timezones_data.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport errors from \"../../../core/errors\";\nimport { sign } from \"../../../core/utils/math\";\nimport query from \"../../../data/query\";\nimport tzData from \"./timezones_data\";\nvar getConvertedUntils = value => value.split(\"|\").map(until => {\n  if (\"Infinity\" === until) {\n    return null;\n  }\n  return 1e3 * parseInt(until, 36);\n});\nvar parseTimezone = timeZoneConfig => {\n  var {\n    offsets: offsets\n  } = timeZoneConfig;\n  var {\n    offsetIndices: offsetIndices\n  } = timeZoneConfig;\n  var {\n    untils: untils\n  } = timeZoneConfig;\n  var offsetList = offsets.split(\"|\").map(value => parseInt(value));\n  var offsetIndexList = offsetIndices.split(\"\").map(value => parseInt(value));\n  var dateList = getConvertedUntils(untils).map((accumulator = 0, value => accumulator += value));\n  var accumulator;\n  return {\n    offsetList: offsetList,\n    offsetIndexList: offsetIndexList,\n    dateList: dateList\n  };\n};\nclass TimeZoneCache {\n  constructor() {\n    this.map = new Map();\n  }\n  tryGet(id) {\n    if (!this.map.get(id)) {\n      var config = timeZoneDataUtils.getTimezoneById(id);\n      if (!config) {\n        return false;\n      }\n      var timeZoneInfo = parseTimezone(config);\n      this.map.set(id, timeZoneInfo);\n    }\n    return this.map.get(id);\n  }\n}\nvar tzCache = new TimeZoneCache();\nvar timeZoneDataUtils = {\n  _tzCache: tzCache,\n  _timeZones: tzData.zones,\n  getDisplayedTimeZones(timestamp) {\n    var timeZones = this._timeZones.map(timezone => {\n      var timeZoneInfo = parseTimezone(timezone);\n      var offset = this.getUtcOffset(timeZoneInfo, timestamp);\n      var title = \"(GMT \".concat(this.formatOffset(offset), \") \").concat(this.formatId(timezone.id));\n      return {\n        offset: offset,\n        title: title,\n        id: timezone.id\n      };\n    });\n    return query(timeZones).sortBy(\"offset\").toArray();\n  },\n  formatOffset(offset) {\n    var hours = Math.floor(offset);\n    var minutesInDecimal = offset - hours;\n    var signString = sign(offset) >= 0 ? \"+\" : \"-\";\n    var hoursString = \"0\".concat(Math.abs(hours)).slice(-2);\n    var minutesString = minutesInDecimal > 0 ? \":\".concat(60 * minutesInDecimal) : \":00\";\n    return signString + hoursString + minutesString;\n  },\n  formatId: id => id.split(\"/\").join(\" - \").split(\"_\").join(\" \"),\n  getTimezoneById(id) {\n    if (!id) {\n      return;\n    }\n    var tzList = this._timeZones;\n    for (var i = 0; i < tzList.length; i++) {\n      var currentId = tzList[i].id;\n      if (currentId === id) {\n        return tzList[i];\n      }\n    }\n    errors.log(\"W0009\", id);\n    return;\n  },\n  getTimeZoneOffsetById(id, timestamp) {\n    var timeZoneInfo = tzCache.tryGet(id);\n    return timeZoneInfo ? this.getUtcOffset(timeZoneInfo, timestamp) : void 0;\n  },\n  getTimeZoneDeclarationTuple(id, year) {\n    var timeZoneInfo = tzCache.tryGet(id);\n    return timeZoneInfo ? this.getTimeZoneDeclarationTupleCore(timeZoneInfo, year) : [];\n  },\n  getTimeZoneDeclarationTupleCore(timeZoneInfo, year) {\n    var {\n      offsetList: offsetList\n    } = timeZoneInfo;\n    var {\n      offsetIndexList: offsetIndexList\n    } = timeZoneInfo;\n    var {\n      dateList: dateList\n    } = timeZoneInfo;\n    var tupleResult = [];\n    for (var i = 0; i < dateList.length; i++) {\n      var currentDate = dateList[i];\n      var currentYear = new Date(currentDate).getFullYear();\n      if (currentYear === year) {\n        var offset = offsetList[offsetIndexList[i + 1]];\n        tupleResult.push({\n          date: currentDate,\n          offset: -offset / 60\n        });\n      }\n      if (currentYear > year) {\n        break;\n      }\n    }\n    return tupleResult;\n  },\n  getUtcOffset(timeZoneInfo, dateTimeStamp) {\n    var {\n      offsetList: offsetList\n    } = timeZoneInfo;\n    var {\n      offsetIndexList: offsetIndexList\n    } = timeZoneInfo;\n    var {\n      dateList: dateList\n    } = timeZoneInfo;\n    var lastIntervalStartIndex = dateList.length - 1 - 1;\n    var index = lastIntervalStartIndex;\n    while (index >= 0 && dateTimeStamp < dateList[index]) {\n      index--;\n    }\n    var offset = offsetList[offsetIndexList[index + 1]];\n    return -offset / 60 || offset;\n  }\n};\nexport default timeZoneDataUtils;","map":{"version":3,"names":["errors","sign","query","tzData","getConvertedUntils","value","split","map","until","parseInt","parseTimezone","timeZoneConfig","offsets","offsetIndices","untils","offsetList","offsetIndexList","dateList","accumulator","TimeZoneCache","constructor","Map","tryGet","id","get","config","timeZoneDataUtils","getTimezoneById","timeZoneInfo","set","tzCache","_tzCache","_timeZones","zones","getDisplayedTimeZones","timestamp","timeZones","timezone","offset","getUtcOffset","title","concat","formatOffset","formatId","sortBy","toArray","hours","Math","floor","minutesInDecimal","signString","hoursString","abs","slice","minutesString","join","tzList","i","length","currentId","log","getTimeZoneOffsetById","getTimeZoneDeclarationTuple","year","getTimeZoneDeclarationTupleCore","tupleResult","currentDate","currentYear","Date","getFullYear","push","date","dateTimeStamp","lastIntervalStartIndex","index"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/__internal/scheduler/timezones/m_utils_timezones_data.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/scheduler/timezones/m_utils_timezones_data.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport errors from \"../../../core/errors\";\r\nimport {\r\n    sign\r\n} from \"../../../core/utils/math\";\r\nimport query from \"../../../data/query\";\r\nimport tzData from \"./timezones_data\";\r\nvar getConvertedUntils = value => value.split(\"|\").map(until => {\r\n    if (\"Infinity\" === until) {\r\n        return null\r\n    }\r\n    return 1e3 * parseInt(until, 36)\r\n});\r\nvar parseTimezone = timeZoneConfig => {\r\n    var {\r\n        offsets: offsets\r\n    } = timeZoneConfig;\r\n    var {\r\n        offsetIndices: offsetIndices\r\n    } = timeZoneConfig;\r\n    var {\r\n        untils: untils\r\n    } = timeZoneConfig;\r\n    var offsetList = offsets.split(\"|\").map(value => parseInt(value));\r\n    var offsetIndexList = offsetIndices.split(\"\").map(value => parseInt(value));\r\n    var dateList = getConvertedUntils(untils).map((accumulator = 0, value => accumulator += value));\r\n    var accumulator;\r\n    return {\r\n        offsetList: offsetList,\r\n        offsetIndexList: offsetIndexList,\r\n        dateList: dateList\r\n    }\r\n};\r\nclass TimeZoneCache {\r\n    constructor() {\r\n        this.map = new Map\r\n    }\r\n    tryGet(id) {\r\n        if (!this.map.get(id)) {\r\n            var config = timeZoneDataUtils.getTimezoneById(id);\r\n            if (!config) {\r\n                return false\r\n            }\r\n            var timeZoneInfo = parseTimezone(config);\r\n            this.map.set(id, timeZoneInfo)\r\n        }\r\n        return this.map.get(id)\r\n    }\r\n}\r\nvar tzCache = new TimeZoneCache;\r\nvar timeZoneDataUtils = {\r\n    _tzCache: tzCache,\r\n    _timeZones: tzData.zones,\r\n    getDisplayedTimeZones(timestamp) {\r\n        var timeZones = this._timeZones.map(timezone => {\r\n            var timeZoneInfo = parseTimezone(timezone);\r\n            var offset = this.getUtcOffset(timeZoneInfo, timestamp);\r\n            var title = \"(GMT \".concat(this.formatOffset(offset), \") \").concat(this.formatId(timezone.id));\r\n            return {\r\n                offset: offset,\r\n                title: title,\r\n                id: timezone.id\r\n            }\r\n        });\r\n        return query(timeZones).sortBy(\"offset\").toArray()\r\n    },\r\n    formatOffset(offset) {\r\n        var hours = Math.floor(offset);\r\n        var minutesInDecimal = offset - hours;\r\n        var signString = sign(offset) >= 0 ? \"+\" : \"-\";\r\n        var hoursString = \"0\".concat(Math.abs(hours)).slice(-2);\r\n        var minutesString = minutesInDecimal > 0 ? \":\".concat(60 * minutesInDecimal) : \":00\";\r\n        return signString + hoursString + minutesString\r\n    },\r\n    formatId: id => id.split(\"/\").join(\" - \").split(\"_\").join(\" \"),\r\n    getTimezoneById(id) {\r\n        if (!id) {\r\n            return\r\n        }\r\n        var tzList = this._timeZones;\r\n        for (var i = 0; i < tzList.length; i++) {\r\n            var currentId = tzList[i].id;\r\n            if (currentId === id) {\r\n                return tzList[i]\r\n            }\r\n        }\r\n        errors.log(\"W0009\", id);\r\n        return\r\n    },\r\n    getTimeZoneOffsetById(id, timestamp) {\r\n        var timeZoneInfo = tzCache.tryGet(id);\r\n        return timeZoneInfo ? this.getUtcOffset(timeZoneInfo, timestamp) : void 0\r\n    },\r\n    getTimeZoneDeclarationTuple(id, year) {\r\n        var timeZoneInfo = tzCache.tryGet(id);\r\n        return timeZoneInfo ? this.getTimeZoneDeclarationTupleCore(timeZoneInfo, year) : []\r\n    },\r\n    getTimeZoneDeclarationTupleCore(timeZoneInfo, year) {\r\n        var {\r\n            offsetList: offsetList\r\n        } = timeZoneInfo;\r\n        var {\r\n            offsetIndexList: offsetIndexList\r\n        } = timeZoneInfo;\r\n        var {\r\n            dateList: dateList\r\n        } = timeZoneInfo;\r\n        var tupleResult = [];\r\n        for (var i = 0; i < dateList.length; i++) {\r\n            var currentDate = dateList[i];\r\n            var currentYear = new Date(currentDate).getFullYear();\r\n            if (currentYear === year) {\r\n                var offset = offsetList[offsetIndexList[i + 1]];\r\n                tupleResult.push({\r\n                    date: currentDate,\r\n                    offset: -offset / 60\r\n                })\r\n            }\r\n            if (currentYear > year) {\r\n                break\r\n            }\r\n        }\r\n        return tupleResult\r\n    },\r\n    getUtcOffset(timeZoneInfo, dateTimeStamp) {\r\n        var {\r\n            offsetList: offsetList\r\n        } = timeZoneInfo;\r\n        var {\r\n            offsetIndexList: offsetIndexList\r\n        } = timeZoneInfo;\r\n        var {\r\n            dateList: dateList\r\n        } = timeZoneInfo;\r\n        var lastIntervalStartIndex = dateList.length - 1 - 1;\r\n        var index = lastIntervalStartIndex;\r\n        while (index >= 0 && dateTimeStamp < dateList[index]) {\r\n            index--\r\n        }\r\n        var offset = offsetList[offsetIndexList[index + 1]];\r\n        return -offset / 60 || offset\r\n    }\r\n};\r\nexport default timeZoneDataUtils;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}