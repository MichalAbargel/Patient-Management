{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/number_box/number_box.mask.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isNumeric, isDefined, isFunction, isString } from \"../../core/utils/type\";\nimport devices from \"../../core/devices\";\nimport { fitIntoRange, inRange } from \"../../core/utils/math\";\nimport number from \"../../localization/number\";\nimport { getCaretWithOffset, isCaretInBoundaries, getCaretInBoundaries, getCaretBoundaries, getCaretAfterFormat, getCaretOffset } from \"./number_box.caret\";\nimport { getFormat as getLDMLFormat } from \"../../localization/ldml/number\";\nimport NumberBoxBase from \"./number_box.base\";\nimport { addNamespace, getChar, normalizeKeyName, isCommandKeyPressed } from \"../../events/utils/index\";\nimport { ensureDefined, escapeRegExp } from \"../../core/utils/common\";\nimport { getRealSeparatorIndex, getNthOccurrence, splitByIndex, adjustPercentValue } from \"./utils\";\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\";\nvar MOVE_FORWARD = 1;\nvar MOVE_BACKWARD = -1;\nvar MINUS = \"-\";\nvar MINUS_KEY = \"minus\";\nvar INPUT_EVENT = \"input\";\nvar CARET_TIMEOUT_DURATION = 0;\nvar NumberBoxMask = NumberBoxBase.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      useMaskBehavior: true,\n      format: null\n    });\n  },\n  _isDeleteKey: function (key) {\n    return \"del\" === key;\n  },\n  _supportedKeys: function () {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n    return extend(this.callBase(), {\n      minus: this._revertSign.bind(this),\n      del: this._removeHandler.bind(this),\n      backspace: this._removeHandler.bind(this),\n      leftArrow: this._arrowHandler.bind(this, MOVE_BACKWARD),\n      rightArrow: this._arrowHandler.bind(this, MOVE_FORWARD),\n      home: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_FORWARD),\n      enter: this._updateFormattedValue.bind(this),\n      end: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_BACKWARD)\n    });\n  },\n  _getTextSeparatorIndex: function (text) {\n    var decimalSeparator = number.getDecimalSeparator();\n    var realSeparatorOccurrenceIndex = getRealSeparatorIndex(this.option(\"format\")).occurrence;\n    return getNthOccurrence(text, decimalSeparator, realSeparatorOccurrenceIndex);\n  },\n  _focusInHandler: function (e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      this.clearCaretTimeout();\n      this._caretTimeout = setTimeout(function () {\n        this._caretTimeout = void 0;\n        var caret = this._caret();\n        if (caret.start === caret.end && this._useMaskBehavior()) {\n          var text = this._getInputVal();\n          var decimalSeparatorIndex = this._getTextSeparatorIndex(text);\n          if (decimalSeparatorIndex >= 0) {\n            this._caret({\n              start: decimalSeparatorIndex,\n              end: decimalSeparatorIndex\n            });\n          } else {\n            this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e);\n          }\n        }\n      }.bind(this), CARET_TIMEOUT_DURATION);\n    }\n    this.callBase(e);\n  },\n  _focusOutHandler: function (e) {\n    var shouldHandleEvent = !this._preventNestedFocusEvent(e);\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = true;\n      if (this._useMaskBehavior()) {\n        this._updateFormattedValue();\n      }\n    }\n    this.callBase(e);\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = false;\n    }\n  },\n  _hasValueBeenChanged(inputValue) {\n    var format = this._getFormatPattern();\n    var value = this.option(\"value\");\n    var formatted = this._format(value, format) || \"\";\n    return formatted !== inputValue;\n  },\n  _updateFormattedValue: function () {\n    var inputValue = this._getInputVal();\n    if (this._hasValueBeenChanged(inputValue)) {\n      this._updateParsedValue();\n      this._adjustParsedValue();\n      this._setTextByParsedValue();\n      if (this._parsedValue !== this.option(\"value\")) {\n        eventsEngine.trigger(this._input(), \"change\");\n      }\n    }\n  },\n  _arrowHandler: function (step, e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n    var text = this._getInputVal();\n    var format = this._getFormatPattern();\n    var nextCaret = getCaretWithOffset(this._caret(), step);\n    if (!isCaretInBoundaries(nextCaret, text, format)) {\n      nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\n      e.preventDefault();\n      this._caret(getCaretInBoundaries(nextCaret, text, format));\n    }\n  },\n  _moveCaretToBoundary: function (direction) {\n    var boundaries = getCaretBoundaries(this._getInputVal(), this._getFormatPattern());\n    var newCaret = getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\n    this._caret(newCaret);\n  },\n  _moveCaretToBoundaryEventHandler: function (direction, e) {\n    if (!this._useMaskBehavior() || e && e.shiftKey) {\n      return;\n    }\n    this._moveCaretToBoundary(direction);\n    e && e.preventDefault();\n  },\n  _shouldMoveCaret: function (text, caret) {\n    var decimalSeparator = number.getDecimalSeparator();\n    var isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator;\n    var moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey || \",\" === this._lastKey) && isDecimalSeparatorNext;\n    return moveToFloat;\n  },\n  _getInputVal: function () {\n    return number.convertDigits(this._input().val(), true);\n  },\n  _keyboardHandler: function (e) {\n    this.clearCaretTimeout();\n    this._lastKey = number.convertDigits(getChar(e), true);\n    this._lastKeyName = normalizeKeyName(e);\n    if (!this._shouldHandleKey(e.originalEvent)) {\n      return this.callBase(e);\n    }\n    var normalizedText = this._getInputVal();\n    var caret = this._caret();\n    var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey;\n    var newValue = this._tryParse(normalizedText, caret, enteredChar);\n    if (this._shouldMoveCaret(normalizedText, caret)) {\n      this._moveCaret(1);\n      e.originalEvent.preventDefault();\n    }\n    if (void 0 === newValue) {\n      if (this._lastKeyName !== MINUS_KEY) {\n        e.originalEvent.preventDefault();\n      }\n    } else {\n      this._parsedValue = newValue;\n    }\n    return this.callBase(e);\n  },\n  _keyPressHandler: function (e) {\n    if (!this._useMaskBehavior()) {\n      this.callBase(e);\n    }\n  },\n  _removeHandler: function (e) {\n    var caret = this._caret();\n    var text = this._getInputVal();\n    var start = caret.start;\n    var end = caret.end;\n    this._lastKey = getChar(e);\n    this._lastKeyName = normalizeKeyName(e);\n    var isDeleteKey = this._isDeleteKey(this._lastKeyName);\n    var isBackspaceKey = !isDeleteKey;\n    if (start === end) {\n      var caretPosition = start;\n      var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\n      if (canDelete) {\n        isDeleteKey && end++;\n        isBackspaceKey && start--;\n      } else {\n        e.preventDefault();\n        return;\n      }\n    }\n    var char = text.slice(start, end);\n    if (this._isStub(char)) {\n      this._moveCaret(isDeleteKey ? 1 : -1);\n      if (this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0) {\n        this._revertSign(e);\n        this._setTextByParsedValue();\n        var shouldTriggerInputEvent = this.option(\"valueChangeEvent\").split(\" \").includes(\"input\");\n        if (shouldTriggerInputEvent) {\n          eventsEngine.trigger(this._input(), \"input\");\n        }\n      }\n      e.preventDefault();\n      return;\n    }\n    var decimalSeparator = number.getDecimalSeparator();\n    if (char === decimalSeparator) {\n      var decimalSeparatorIndex = text.indexOf(decimalSeparator);\n      if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\n        this._moveCaret(isDeleteKey ? 1 : -1);\n        e.preventDefault();\n      }\n      return;\n    }\n    if (end - start < text.length) {\n      var editedText = this._replaceSelectedText(text, {\n        start: start,\n        end: end\n      }, \"\");\n      var noDigits = editedText.search(/[0-9]/) < 0;\n      if (noDigits && this._isValueInRange(0)) {\n        this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0 ? -0 : 0;\n        return;\n      }\n    }\n    var valueAfterRemoving = this._tryParse(text, {\n      start: start,\n      end: end\n    }, \"\");\n    if (void 0 === valueAfterRemoving) {\n      e.preventDefault();\n    } else {\n      this._parsedValue = valueAfterRemoving;\n    }\n  },\n  _isPercentFormat: function () {\n    var format = this._getFormatPattern();\n    var noEscapedFormat = format.replace(/'[^']+'/g, \"\");\n    return -1 !== noEscapedFormat.indexOf(\"%\");\n  },\n  _parse: function (text, format) {\n    var formatOption = this.option(\"format\");\n    var isCustomParser = isFunction(formatOption.parser);\n    var parser = isCustomParser ? formatOption.parser : number.parse;\n    var integerPartStartIndex = 0;\n    if (!isCustomParser) {\n      var formatPointIndex = getRealSeparatorIndex(format).index;\n      var textPointIndex = this._getTextSeparatorIndex(text);\n      var formatIntegerPartLength = -1 !== formatPointIndex ? formatPointIndex : format.length;\n      var textIntegerPartLength = -1 !== textPointIndex ? textPointIndex : text.length;\n      if (textIntegerPartLength > formatIntegerPartLength && -1 === format.indexOf(\"#\")) {\n        integerPartStartIndex = textIntegerPartLength - formatIntegerPartLength;\n      }\n    }\n    text = text.substr(integerPartStartIndex);\n    return parser(text, format);\n  },\n  _format: function (value, format) {\n    var formatOption = this.option(\"format\");\n    var customFormatter = (null === formatOption || void 0 === formatOption ? void 0 : formatOption.formatter) || formatOption;\n    var formatter = isFunction(customFormatter) ? customFormatter : number.format;\n    var formattedValue = null === value ? \"\" : formatter(value, format);\n    return formattedValue;\n  },\n  _getFormatPattern: function () {\n    if (!this._currentFormat) {\n      this._updateFormat();\n    }\n    return this._currentFormat;\n  },\n  _updateFormat: function () {\n    var format = this.option(\"format\");\n    var isCustomParser = isFunction(null === format || void 0 === format ? void 0 : format.parser);\n    var isLDMLPattern = isString(format) && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\n    var isExponentialFormat = \"exponential\" === format || \"exponential\" === (null === format || void 0 === format ? void 0 : format.type);\n    var shouldUseFormatAsIs = isCustomParser || isLDMLPattern || isExponentialFormat;\n    this._currentFormat = shouldUseFormatAsIs ? format : getLDMLFormat(value => {\n      var text = this._format(value, format);\n      return number.convertDigits(text, true);\n    });\n  },\n  _getFormatForSign: function (text) {\n    var format = this._getFormatPattern();\n    if (isString(format)) {\n      var signParts = format.split(\";\");\n      var sign = number.getSign(text, format);\n      signParts[1] = signParts[1] || \"-\" + signParts[0];\n      return sign < 0 ? signParts[1] : signParts[0];\n    } else {\n      var _sign = number.getSign(text);\n      return _sign < 0 ? \"-\" : \"\";\n    }\n  },\n  _removeStubs: function (text, excludeComma) {\n    var format = this._getFormatForSign(text);\n    var thousandsSeparator = number.getThousandsSeparator();\n    var stubs = this._getStubs(format);\n    var result = text;\n    if (stubs.length) {\n      var prefixStubs = stubs[0];\n      var postfixRegex = new RegExp(\"(\" + escapeRegExp(stubs[1] || \"\") + \")$\", \"g\");\n      var decoratorsRegex = new RegExp(\"[-\" + escapeRegExp(excludeComma ? \"\" : thousandsSeparator) + \"]\", \"g\");\n      result = result.replace(prefixStubs, \"\").replace(postfixRegex, \"\").replace(decoratorsRegex, \"\");\n    }\n    return result;\n  },\n  _getStubs: function (format) {\n    var regExpResult = /[^']([#0.,]+)/g.exec(format);\n    var pattern = regExpResult && regExpResult[0].trim();\n    return format.split(pattern).map(function (stub) {\n      return stub.replace(/'/g, \"\");\n    });\n  },\n  _truncateToPrecision: function (value, maxPrecision) {\n    if (isDefined(value)) {\n      var strValue = value.toString();\n      var decimalSeparatorIndex = strValue.indexOf(\".\");\n      if (strValue && decimalSeparatorIndex > -1) {\n        var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\n        return isNaN(parsedValue) ? value : parsedValue;\n      }\n    }\n    return value;\n  },\n  _tryParse: function (text, selection, char) {\n    var editedText = this._replaceSelectedText(text, selection, char);\n    var format = this._getFormatPattern();\n    var isTextSelected = selection.start !== selection.end;\n    var parsedValue = this._getParsedValue(editedText, format);\n    var maxPrecision = !format.parser && this._getPrecisionLimits(editedText).max;\n    var isValueChanged = parsedValue !== this._parsedValue;\n    var decimalSeparator = number.getDecimalSeparator();\n    var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;\n    var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\n    if (isDecimalPointRestricted || isUselessCharRestricted) {\n      return;\n    }\n    if (\"\" === this._removeStubs(editedText)) {\n      parsedValue = Math.abs(0 * this._parsedValue);\n    }\n    if (isNaN(parsedValue)) {\n      return;\n    }\n    var value = null === parsedValue ? this._parsedValue : parsedValue;\n    parsedValue = maxPrecision ? this._truncateToPrecision(value, maxPrecision) : parsedValue;\n    return !format.parser && this._isPercentFormat() ? adjustPercentValue(parsedValue, maxPrecision) : parsedValue;\n  },\n  _getParsedValue: function (text, format) {\n    var sign = number.getSign(text, (null === format || void 0 === format ? void 0 : format.formatter) || format);\n    var textWithoutStubs = this._removeStubs(text, true);\n    var parsedValue = this._parse(textWithoutStubs, format);\n    var parsedValueSign = parsedValue < 0 ? -1 : 1;\n    var parsedValueWithSign = isNumeric(parsedValue) && sign !== parsedValueSign ? sign * parsedValue : parsedValue;\n    return parsedValueWithSign;\n  },\n  _isValueIncomplete: function (text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n    var caret = this._caret();\n    var point = number.getDecimalSeparator();\n    var pointIndex = this._getTextSeparatorIndex(text);\n    var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start;\n    var textParts = this._removeStubs(text, true).split(point);\n    if (!isCaretOnFloat || 2 !== textParts.length) {\n      return false;\n    }\n    var floatLength = textParts[1].length;\n    var format = this._getFormatPattern();\n    var isCustomParser = !!format.parser;\n    var precision = !isCustomParser && this._getPrecisionLimits(this._getFormatPattern(), text);\n    var isPrecisionInRange = isCustomParser ? true : inRange(floatLength, precision.min, precision.max);\n    var endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\n    return isPrecisionInRange && (endsWithZero || !floatLength);\n  },\n  _isValueInRange: function (value) {\n    var min = ensureDefined(this.option(\"min\"), -1 / 0);\n    var max = ensureDefined(this.option(\"max\"), 1 / 0);\n    return inRange(value, min, max);\n  },\n  _setInputText: function (text) {\n    var normalizedText = number.convertDigits(text, true);\n    var newCaret = getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\n    this._input().val(text);\n    this._toggleEmptinessEventHandler();\n    this._formattedValue = text;\n    if (!this._focusOutOccurs) {\n      this._caret(newCaret);\n    }\n  },\n  _useMaskBehavior: function () {\n    return !!this.option(\"format\") && this.option(\"useMaskBehavior\");\n  },\n  _renderInputType: function () {\n    var isNumberType = \"number\" === this.option(\"mode\");\n    var isDesktop = \"desktop\" === devices.real().deviceType;\n    if (this._useMaskBehavior() && isNumberType) {\n      this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\");\n    } else {\n      this.callBase();\n    }\n  },\n  _isChar: function (str) {\n    return isString(str) && 1 === str.length;\n  },\n  _moveCaret: function (offset) {\n    if (!offset) {\n      return;\n    }\n    var newCaret = getCaretWithOffset(this._caret(), offset);\n    var adjustedCaret = getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\n    this._caret(adjustedCaret);\n  },\n  _shouldHandleKey: function (e) {\n    var keyName = normalizeKeyName(e);\n    var isSpecialChar = isCommandKeyPressed(e) || e.altKey || e.shiftKey || !this._isChar(keyName);\n    var isMinusKey = keyName === MINUS_KEY;\n    var useMaskBehavior = this._useMaskBehavior();\n    return useMaskBehavior && !isSpecialChar && !isMinusKey;\n  },\n  _renderInput: function () {\n    this.callBase();\n    this._renderFormatter();\n  },\n  _renderFormatter: function () {\n    this._clearCache();\n    this._detachFormatterEvents();\n    if (this._useMaskBehavior()) {\n      this._attachFormatterEvents();\n    }\n  },\n  _detachFormatterEvents: function () {\n    eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE);\n  },\n  _isInputFromPaste: function (e) {\n    var inputType = e.originalEvent && e.originalEvent.inputType;\n    if (isDefined(inputType)) {\n      return \"insertFromPaste\" === inputType;\n    } else {\n      return this._isValuePasted;\n    }\n  },\n  _attachFormatterEvents: function () {\n    var $input = this._input();\n    eventsEngine.on($input, addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function (e) {\n      this._formatValue(e);\n      this._isValuePasted = false;\n    }.bind(this));\n    eventsEngine.on($input, addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function () {\n      if (!this._caretTimeout) {\n        this._caretTimeout = setTimeout(function () {\n          this._caretTimeout = void 0;\n          this._caret(getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()));\n        }.bind(this), CARET_TIMEOUT_DURATION);\n      }\n    }.bind(this));\n    eventsEngine.on($input, \"dxdblclick\", function () {\n      this.clearCaretTimeout();\n    }.bind(this));\n  },\n  clearCaretTimeout: function () {\n    clearTimeout(this._caretTimeout);\n    this._caretTimeout = void 0;\n  },\n  _forceRefreshInputValue: function () {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n  },\n  _isNonStubAfter: function (index) {\n    var text = this._getInputVal().slice(index);\n    return text && !this._isStub(text, true);\n  },\n  _isStub: function (str, isString) {\n    var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator());\n    var regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\";\n    var stubRegExp = new RegExp(regExpString, \"g\");\n    return stubRegExp.test(str) && (isString || this._isChar(str));\n  },\n  _parseValue: function (text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n    return this._parsedValue;\n  },\n  _getPrecisionLimits: function (text) {\n    var currentFormat = this._getFormatForSign(text);\n    var realSeparatorIndex = getRealSeparatorIndex(currentFormat).index;\n    var floatPart = (splitByIndex(currentFormat, realSeparatorIndex)[1] || \"\").replace(/[^#0]/g, \"\");\n    var minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length;\n    var maxPrecision = floatPart.length;\n    return {\n      min: minPrecision,\n      max: maxPrecision\n    };\n  },\n  _revertSign: function (e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n    var caret = this._caret();\n    if (caret.start !== caret.end) {\n      if (normalizeKeyName(e) === MINUS_KEY) {\n        this._applyRevertedSign(e, caret, true);\n        return;\n      } else {\n        this._caret(getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()));\n      }\n    }\n    this._applyRevertedSign(e, caret);\n  },\n  _applyRevertedSign: function (e, caret, preserveSelectedText) {\n    var newValue = -1 * ensureDefined(this._parsedValue, null);\n    if (this._isValueInRange(newValue) || 0 === newValue) {\n      this._parsedValue = newValue;\n      if (preserveSelectedText) {\n        var format = this._getFormatPattern();\n        var previousText = this._getInputVal();\n        this._setTextByParsedValue();\n        e.preventDefault();\n        var currentText = this._getInputVal();\n        var offset = getCaretOffset(previousText, currentText, format);\n        caret = getCaretWithOffset(caret, offset);\n        var caretInBoundaries = getCaretInBoundaries(caret, currentText, format);\n        this._caret(caretInBoundaries);\n      }\n    }\n  },\n  _removeMinusFromText: function (text, caret) {\n    var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\n    return isMinusPressed ? this._replaceSelectedText(text, {\n      start: caret.start - 1,\n      end: caret.start\n    }, \"\") : text;\n  },\n  _setTextByParsedValue: function () {\n    var format = this._getFormatPattern();\n    var parsed = this._parseValue();\n    var formatted = this._format(parsed, format) || \"\";\n    this._setInputText(formatted);\n  },\n  _formatValue: function (e) {\n    var normalizedText = this._getInputVal();\n    var caret = this._caret();\n    var textWithoutMinus = this._removeMinusFromText(normalizedText, caret);\n    var wasMinusRemoved = textWithoutMinus !== normalizedText;\n    normalizedText = textWithoutMinus;\n    if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\n      this._formattedValue = normalizedText;\n      if (wasMinusRemoved) {\n        this._setTextByParsedValue();\n      }\n      return;\n    }\n    var textWasChanged = number.convertDigits(this._formattedValue, true) !== normalizedText;\n    if (textWasChanged) {\n      var value = this._tryParse(normalizedText, caret, \"\");\n      if (isDefined(value)) {\n        this._parsedValue = value;\n      }\n    }\n    this._setTextByParsedValue();\n  },\n  _renderDisplayText: function () {\n    if (this._useMaskBehavior()) {\n      this._toggleEmptinessEventHandler();\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _renderValue: function () {\n    if (this._useMaskBehavior()) {\n      this._parsedValue = this.option(\"value\");\n      this._setTextByParsedValue();\n    }\n    return this.callBase();\n  },\n  _updateParsedValue: function () {\n    var inputValue = this._getInputVal();\n    this._parsedValue = this._tryParse(inputValue, this._caret());\n  },\n  _adjustParsedValue: function () {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n    var clearedText = this._removeStubs(this._getInputVal());\n    var parsedValue = clearedText ? this._parseValue() : null;\n    if (!isNumeric(parsedValue)) {\n      this._parsedValue = parsedValue;\n      return;\n    }\n    this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"));\n  },\n  _valueChangeEventHandler: function (e) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(e);\n    }\n    var caret = this._caret();\n    this._saveValueChangeEvent(e);\n    this._lastKey = null;\n    this._lastKeyName = null;\n    this._updateParsedValue();\n    this._adjustParsedValue();\n    this.option(\"value\", this._parsedValue);\n    if (caret) {\n      this._caret(caret);\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"format\":\n      case \"useMaskBehavior\":\n        this._renderInputType();\n        this._updateFormat();\n        this._renderFormatter();\n        this._renderValue();\n        this._refreshValueChangeEvent();\n        this._refreshEvents();\n        break;\n      case \"min\":\n      case \"max\":\n        this._adjustParsedValue();\n        this.callBase(args);\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _clearCache: function () {\n    delete this._formattedValue;\n    delete this._lastKey;\n    delete this._lastKeyName;\n    delete this._parsedValue;\n    delete this._focusOutOccurs;\n    clearTimeout(this._caretTimeout);\n    delete this._caretTimeout;\n  },\n  _clean: function () {\n    this._clearCache();\n    this.callBase();\n  }\n});\nexport default NumberBoxMask;","map":{"version":3,"names":["eventsEngine","extend","isNumeric","isDefined","isFunction","isString","devices","fitIntoRange","inRange","number","getCaretWithOffset","isCaretInBoundaries","getCaretInBoundaries","getCaretBoundaries","getCaretAfterFormat","getCaretOffset","getFormat","getLDMLFormat","NumberBoxBase","addNamespace","getChar","normalizeKeyName","isCommandKeyPressed","ensureDefined","escapeRegExp","getRealSeparatorIndex","getNthOccurrence","splitByIndex","adjustPercentValue","NUMBER_FORMATTER_NAMESPACE","MOVE_FORWARD","MOVE_BACKWARD","MINUS","MINUS_KEY","INPUT_EVENT","CARET_TIMEOUT_DURATION","NumberBoxMask","inherit","_getDefaultOptions","callBase","useMaskBehavior","format","_isDeleteKey","key","_supportedKeys","_useMaskBehavior","minus","_revertSign","bind","del","_removeHandler","backspace","leftArrow","_arrowHandler","rightArrow","home","_moveCaretToBoundaryEventHandler","enter","_updateFormattedValue","end","_getTextSeparatorIndex","text","decimalSeparator","getDecimalSeparator","realSeparatorOccurrenceIndex","option","occurrence","_focusInHandler","e","_preventNestedFocusEvent","clearCaretTimeout","_caretTimeout","setTimeout","caret","_caret","start","_getInputVal","decimalSeparatorIndex","_focusOutHandler","shouldHandleEvent","_focusOutOccurs","_hasValueBeenChanged","inputValue","_getFormatPattern","value","formatted","_format","_updateParsedValue","_adjustParsedValue","_setTextByParsedValue","_parsedValue","trigger","_input","step","nextCaret","preventDefault","_moveCaretToBoundary","direction","boundaries","newCaret","shiftKey","_shouldMoveCaret","isDecimalSeparatorNext","charAt","moveToFloat","_lastKey","convertDigits","val","_keyboardHandler","_lastKeyName","_shouldHandleKey","originalEvent","normalizedText","enteredChar","newValue","_tryParse","_moveCaret","_keyPressHandler","isDeleteKey","isBackspaceKey","caretPosition","canDelete","length","char","slice","_isStub","shouldTriggerInputEvent","split","includes","indexOf","_isNonStubAfter","editedText","_replaceSelectedText","noDigits","search","_isValueInRange","valueAfterRemoving","_isPercentFormat","noEscapedFormat","replace","_parse","formatOption","isCustomParser","parser","parse","integerPartStartIndex","formatPointIndex","index","textPointIndex","formatIntegerPartLength","textIntegerPartLength","substr","customFormatter","formatter","formattedValue","_currentFormat","_updateFormat","isLDMLPattern","isExponentialFormat","type","shouldUseFormatAsIs","_getFormatForSign","signParts","sign","getSign","_sign","_removeStubs","excludeComma","thousandsSeparator","getThousandsSeparator","stubs","_getStubs","result","prefixStubs","postfixRegex","RegExp","decoratorsRegex","regExpResult","exec","pattern","trim","map","stub","_truncateToPrecision","maxPrecision","strValue","toString","parsedValue","parseFloat","isNaN","selection","isTextSelected","_getParsedValue","_getPrecisionLimits","max","isValueChanged","isDecimalPointRestricted","isUselessCharRestricted","_isValueIncomplete","Math","abs","textWithoutStubs","parsedValueSign","parsedValueWithSign","point","pointIndex","isCaretOnFloat","textParts","floatLength","precision","isPrecisionInRange","min","endsWithZero","_setInputText","_toggleEmptinessEventHandler","_formattedValue","_renderInputType","isNumberType","isDesktop","real","deviceType","_setInputType","_isSupportInputMode","_isChar","str","offset","adjustedCaret","keyName","isSpecialChar","altKey","isMinusKey","_renderInput","_renderFormatter","_clearCache","_detachFormatterEvents","_attachFormatterEvents","off","_isInputFromPaste","inputType","_isValuePasted","$input","on","_formatValue","clearTimeout","_forceRefreshInputValue","escapedDecimalSeparator","regExpString","stubRegExp","test","_parseValue","currentFormat","realSeparatorIndex","floatPart","minPrecision","_applyRevertedSign","preserveSelectedText","previousText","currentText","caretInBoundaries","_removeMinusFromText","isMinusPressed","parsed","textWithoutMinus","wasMinusRemoved","textWasChanged","_renderDisplayText","apply","arguments","_renderValue","clearedText","_valueChangeEventHandler","_saveValueChangeEvent","_optionChanged","args","name","_refreshValueChangeEvent","_refreshEvents","_clean"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/ui/number_box/number_box.mask.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/number_box/number_box.mask.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isNumeric,\r\n    isDefined,\r\n    isFunction,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    fitIntoRange,\r\n    inRange\r\n} from \"../../core/utils/math\";\r\nimport number from \"../../localization/number\";\r\nimport {\r\n    getCaretWithOffset,\r\n    isCaretInBoundaries,\r\n    getCaretInBoundaries,\r\n    getCaretBoundaries,\r\n    getCaretAfterFormat,\r\n    getCaretOffset\r\n} from \"./number_box.caret\";\r\nimport {\r\n    getFormat as getLDMLFormat\r\n} from \"../../localization/ldml/number\";\r\nimport NumberBoxBase from \"./number_box.base\";\r\nimport {\r\n    addNamespace,\r\n    getChar,\r\n    normalizeKeyName,\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    ensureDefined,\r\n    escapeRegExp\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    getRealSeparatorIndex,\r\n    getNthOccurrence,\r\n    splitByIndex,\r\n    adjustPercentValue\r\n} from \"./utils\";\r\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\";\r\nvar MOVE_FORWARD = 1;\r\nvar MOVE_BACKWARD = -1;\r\nvar MINUS = \"-\";\r\nvar MINUS_KEY = \"minus\";\r\nvar INPUT_EVENT = \"input\";\r\nvar CARET_TIMEOUT_DURATION = 0;\r\nvar NumberBoxMask = NumberBoxBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            useMaskBehavior: true,\r\n            format: null\r\n        })\r\n    },\r\n    _isDeleteKey: function(key) {\r\n        return \"del\" === key\r\n    },\r\n    _supportedKeys: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n        return extend(this.callBase(), {\r\n            minus: this._revertSign.bind(this),\r\n            del: this._removeHandler.bind(this),\r\n            backspace: this._removeHandler.bind(this),\r\n            leftArrow: this._arrowHandler.bind(this, MOVE_BACKWARD),\r\n            rightArrow: this._arrowHandler.bind(this, MOVE_FORWARD),\r\n            home: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_FORWARD),\r\n            enter: this._updateFormattedValue.bind(this),\r\n            end: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_BACKWARD)\r\n        })\r\n    },\r\n    _getTextSeparatorIndex: function(text) {\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        var realSeparatorOccurrenceIndex = getRealSeparatorIndex(this.option(\"format\")).occurrence;\r\n        return getNthOccurrence(text, decimalSeparator, realSeparatorOccurrenceIndex)\r\n    },\r\n    _focusInHandler: function(e) {\r\n        if (!this._preventNestedFocusEvent(e)) {\r\n            this.clearCaretTimeout();\r\n            this._caretTimeout = setTimeout(function() {\r\n                this._caretTimeout = void 0;\r\n                var caret = this._caret();\r\n                if (caret.start === caret.end && this._useMaskBehavior()) {\r\n                    var text = this._getInputVal();\r\n                    var decimalSeparatorIndex = this._getTextSeparatorIndex(text);\r\n                    if (decimalSeparatorIndex >= 0) {\r\n                        this._caret({\r\n                            start: decimalSeparatorIndex,\r\n                            end: decimalSeparatorIndex\r\n                        })\r\n                    } else {\r\n                        this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e)\r\n                    }\r\n                }\r\n            }.bind(this), CARET_TIMEOUT_DURATION)\r\n        }\r\n        this.callBase(e)\r\n    },\r\n    _focusOutHandler: function(e) {\r\n        var shouldHandleEvent = !this._preventNestedFocusEvent(e);\r\n        if (shouldHandleEvent) {\r\n            this._focusOutOccurs = true;\r\n            if (this._useMaskBehavior()) {\r\n                this._updateFormattedValue()\r\n            }\r\n        }\r\n        this.callBase(e);\r\n        if (shouldHandleEvent) {\r\n            this._focusOutOccurs = false\r\n        }\r\n    },\r\n    _hasValueBeenChanged(inputValue) {\r\n        var format = this._getFormatPattern();\r\n        var value = this.option(\"value\");\r\n        var formatted = this._format(value, format) || \"\";\r\n        return formatted !== inputValue\r\n    },\r\n    _updateFormattedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        if (this._hasValueBeenChanged(inputValue)) {\r\n            this._updateParsedValue();\r\n            this._adjustParsedValue();\r\n            this._setTextByParsedValue();\r\n            if (this._parsedValue !== this.option(\"value\")) {\r\n                eventsEngine.trigger(this._input(), \"change\")\r\n            }\r\n        }\r\n    },\r\n    _arrowHandler: function(step, e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var text = this._getInputVal();\r\n        var format = this._getFormatPattern();\r\n        var nextCaret = getCaretWithOffset(this._caret(), step);\r\n        if (!isCaretInBoundaries(nextCaret, text, format)) {\r\n            nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\r\n            e.preventDefault();\r\n            this._caret(getCaretInBoundaries(nextCaret, text, format))\r\n        }\r\n    },\r\n    _moveCaretToBoundary: function(direction) {\r\n        var boundaries = getCaretBoundaries(this._getInputVal(), this._getFormatPattern());\r\n        var newCaret = getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\r\n        this._caret(newCaret)\r\n    },\r\n    _moveCaretToBoundaryEventHandler: function(direction, e) {\r\n        if (!this._useMaskBehavior() || e && e.shiftKey) {\r\n            return\r\n        }\r\n        this._moveCaretToBoundary(direction);\r\n        e && e.preventDefault()\r\n    },\r\n    _shouldMoveCaret: function(text, caret) {\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator;\r\n        var moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey || \",\" === this._lastKey) && isDecimalSeparatorNext;\r\n        return moveToFloat\r\n    },\r\n    _getInputVal: function() {\r\n        return number.convertDigits(this._input().val(), true)\r\n    },\r\n    _keyboardHandler: function(e) {\r\n        this.clearCaretTimeout();\r\n        this._lastKey = number.convertDigits(getChar(e), true);\r\n        this._lastKeyName = normalizeKeyName(e);\r\n        if (!this._shouldHandleKey(e.originalEvent)) {\r\n            return this.callBase(e)\r\n        }\r\n        var normalizedText = this._getInputVal();\r\n        var caret = this._caret();\r\n        var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey;\r\n        var newValue = this._tryParse(normalizedText, caret, enteredChar);\r\n        if (this._shouldMoveCaret(normalizedText, caret)) {\r\n            this._moveCaret(1);\r\n            e.originalEvent.preventDefault()\r\n        }\r\n        if (void 0 === newValue) {\r\n            if (this._lastKeyName !== MINUS_KEY) {\r\n                e.originalEvent.preventDefault()\r\n            }\r\n        } else {\r\n            this._parsedValue = newValue\r\n        }\r\n        return this.callBase(e)\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _removeHandler: function(e) {\r\n        var caret = this._caret();\r\n        var text = this._getInputVal();\r\n        var start = caret.start;\r\n        var end = caret.end;\r\n        this._lastKey = getChar(e);\r\n        this._lastKeyName = normalizeKeyName(e);\r\n        var isDeleteKey = this._isDeleteKey(this._lastKeyName);\r\n        var isBackspaceKey = !isDeleteKey;\r\n        if (start === end) {\r\n            var caretPosition = start;\r\n            var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\r\n            if (canDelete) {\r\n                isDeleteKey && end++;\r\n                isBackspaceKey && start--\r\n            } else {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n        }\r\n        var char = text.slice(start, end);\r\n        if (this._isStub(char)) {\r\n            this._moveCaret(isDeleteKey ? 1 : -1);\r\n            if (this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0) {\r\n                this._revertSign(e);\r\n                this._setTextByParsedValue();\r\n                var shouldTriggerInputEvent = this.option(\"valueChangeEvent\").split(\" \").includes(\"input\");\r\n                if (shouldTriggerInputEvent) {\r\n                    eventsEngine.trigger(this._input(), \"input\")\r\n                }\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        if (char === decimalSeparator) {\r\n            var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n            if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\r\n                this._moveCaret(isDeleteKey ? 1 : -1);\r\n                e.preventDefault()\r\n            }\r\n            return\r\n        }\r\n        if (end - start < text.length) {\r\n            var editedText = this._replaceSelectedText(text, {\r\n                start: start,\r\n                end: end\r\n            }, \"\");\r\n            var noDigits = editedText.search(/[0-9]/) < 0;\r\n            if (noDigits && this._isValueInRange(0)) {\r\n                this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0 ? -0 : 0;\r\n                return\r\n            }\r\n        }\r\n        var valueAfterRemoving = this._tryParse(text, {\r\n            start: start,\r\n            end: end\r\n        }, \"\");\r\n        if (void 0 === valueAfterRemoving) {\r\n            e.preventDefault()\r\n        } else {\r\n            this._parsedValue = valueAfterRemoving\r\n        }\r\n    },\r\n    _isPercentFormat: function() {\r\n        var format = this._getFormatPattern();\r\n        var noEscapedFormat = format.replace(/'[^']+'/g, \"\");\r\n        return -1 !== noEscapedFormat.indexOf(\"%\")\r\n    },\r\n    _parse: function(text, format) {\r\n        var formatOption = this.option(\"format\");\r\n        var isCustomParser = isFunction(formatOption.parser);\r\n        var parser = isCustomParser ? formatOption.parser : number.parse;\r\n        var integerPartStartIndex = 0;\r\n        if (!isCustomParser) {\r\n            var formatPointIndex = getRealSeparatorIndex(format).index;\r\n            var textPointIndex = this._getTextSeparatorIndex(text);\r\n            var formatIntegerPartLength = -1 !== formatPointIndex ? formatPointIndex : format.length;\r\n            var textIntegerPartLength = -1 !== textPointIndex ? textPointIndex : text.length;\r\n            if (textIntegerPartLength > formatIntegerPartLength && -1 === format.indexOf(\"#\")) {\r\n                integerPartStartIndex = textIntegerPartLength - formatIntegerPartLength\r\n            }\r\n        }\r\n        text = text.substr(integerPartStartIndex);\r\n        return parser(text, format)\r\n    },\r\n    _format: function(value, format) {\r\n        var formatOption = this.option(\"format\");\r\n        var customFormatter = (null === formatOption || void 0 === formatOption ? void 0 : formatOption.formatter) || formatOption;\r\n        var formatter = isFunction(customFormatter) ? customFormatter : number.format;\r\n        var formattedValue = null === value ? \"\" : formatter(value, format);\r\n        return formattedValue\r\n    },\r\n    _getFormatPattern: function() {\r\n        if (!this._currentFormat) {\r\n            this._updateFormat()\r\n        }\r\n        return this._currentFormat\r\n    },\r\n    _updateFormat: function() {\r\n        var format = this.option(\"format\");\r\n        var isCustomParser = isFunction(null === format || void 0 === format ? void 0 : format.parser);\r\n        var isLDMLPattern = isString(format) && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\r\n        var isExponentialFormat = \"exponential\" === format || \"exponential\" === (null === format || void 0 === format ? void 0 : format.type);\r\n        var shouldUseFormatAsIs = isCustomParser || isLDMLPattern || isExponentialFormat;\r\n        this._currentFormat = shouldUseFormatAsIs ? format : getLDMLFormat(value => {\r\n            var text = this._format(value, format);\r\n            return number.convertDigits(text, true)\r\n        })\r\n    },\r\n    _getFormatForSign: function(text) {\r\n        var format = this._getFormatPattern();\r\n        if (isString(format)) {\r\n            var signParts = format.split(\";\");\r\n            var sign = number.getSign(text, format);\r\n            signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n            return sign < 0 ? signParts[1] : signParts[0]\r\n        } else {\r\n            var _sign = number.getSign(text);\r\n            return _sign < 0 ? \"-\" : \"\"\r\n        }\r\n    },\r\n    _removeStubs: function(text, excludeComma) {\r\n        var format = this._getFormatForSign(text);\r\n        var thousandsSeparator = number.getThousandsSeparator();\r\n        var stubs = this._getStubs(format);\r\n        var result = text;\r\n        if (stubs.length) {\r\n            var prefixStubs = stubs[0];\r\n            var postfixRegex = new RegExp(\"(\" + escapeRegExp(stubs[1] || \"\") + \")$\", \"g\");\r\n            var decoratorsRegex = new RegExp(\"[-\" + escapeRegExp(excludeComma ? \"\" : thousandsSeparator) + \"]\", \"g\");\r\n            result = result.replace(prefixStubs, \"\").replace(postfixRegex, \"\").replace(decoratorsRegex, \"\")\r\n        }\r\n        return result\r\n    },\r\n    _getStubs: function(format) {\r\n        var regExpResult = /[^']([#0.,]+)/g.exec(format);\r\n        var pattern = regExpResult && regExpResult[0].trim();\r\n        return format.split(pattern).map((function(stub) {\r\n            return stub.replace(/'/g, \"\")\r\n        }))\r\n    },\r\n    _truncateToPrecision: function(value, maxPrecision) {\r\n        if (isDefined(value)) {\r\n            var strValue = value.toString();\r\n            var decimalSeparatorIndex = strValue.indexOf(\".\");\r\n            if (strValue && decimalSeparatorIndex > -1) {\r\n                var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\r\n                return isNaN(parsedValue) ? value : parsedValue\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _tryParse: function(text, selection, char) {\r\n        var editedText = this._replaceSelectedText(text, selection, char);\r\n        var format = this._getFormatPattern();\r\n        var isTextSelected = selection.start !== selection.end;\r\n        var parsedValue = this._getParsedValue(editedText, format);\r\n        var maxPrecision = !format.parser && this._getPrecisionLimits(editedText).max;\r\n        var isValueChanged = parsedValue !== this._parsedValue;\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;\r\n        var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\r\n        if (isDecimalPointRestricted || isUselessCharRestricted) {\r\n            return\r\n        }\r\n        if (\"\" === this._removeStubs(editedText)) {\r\n            parsedValue = Math.abs(0 * this._parsedValue)\r\n        }\r\n        if (isNaN(parsedValue)) {\r\n            return\r\n        }\r\n        var value = null === parsedValue ? this._parsedValue : parsedValue;\r\n        parsedValue = maxPrecision ? this._truncateToPrecision(value, maxPrecision) : parsedValue;\r\n        return !format.parser && this._isPercentFormat() ? adjustPercentValue(parsedValue, maxPrecision) : parsedValue\r\n    },\r\n    _getParsedValue: function(text, format) {\r\n        var sign = number.getSign(text, (null === format || void 0 === format ? void 0 : format.formatter) || format);\r\n        var textWithoutStubs = this._removeStubs(text, true);\r\n        var parsedValue = this._parse(textWithoutStubs, format);\r\n        var parsedValueSign = parsedValue < 0 ? -1 : 1;\r\n        var parsedValueWithSign = isNumeric(parsedValue) && sign !== parsedValueSign ? sign * parsedValue : parsedValue;\r\n        return parsedValueWithSign\r\n    },\r\n    _isValueIncomplete: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        var caret = this._caret();\r\n        var point = number.getDecimalSeparator();\r\n        var pointIndex = this._getTextSeparatorIndex(text);\r\n        var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start;\r\n        var textParts = this._removeStubs(text, true).split(point);\r\n        if (!isCaretOnFloat || 2 !== textParts.length) {\r\n            return false\r\n        }\r\n        var floatLength = textParts[1].length;\r\n        var format = this._getFormatPattern();\r\n        var isCustomParser = !!format.parser;\r\n        var precision = !isCustomParser && this._getPrecisionLimits(this._getFormatPattern(), text);\r\n        var isPrecisionInRange = isCustomParser ? true : inRange(floatLength, precision.min, precision.max);\r\n        var endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\r\n        return isPrecisionInRange && (endsWithZero || !floatLength)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        var min = ensureDefined(this.option(\"min\"), -1 / 0);\r\n        var max = ensureDefined(this.option(\"max\"), 1 / 0);\r\n        return inRange(value, min, max)\r\n    },\r\n    _setInputText: function(text) {\r\n        var normalizedText = number.convertDigits(text, true);\r\n        var newCaret = getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\r\n        this._input().val(text);\r\n        this._toggleEmptinessEventHandler();\r\n        this._formattedValue = text;\r\n        if (!this._focusOutOccurs) {\r\n            this._caret(newCaret)\r\n        }\r\n    },\r\n    _useMaskBehavior: function() {\r\n        return !!this.option(\"format\") && this.option(\"useMaskBehavior\")\r\n    },\r\n    _renderInputType: function() {\r\n        var isNumberType = \"number\" === this.option(\"mode\");\r\n        var isDesktop = \"desktop\" === devices.real().deviceType;\r\n        if (this._useMaskBehavior() && isNumberType) {\r\n            this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\")\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _isChar: function(str) {\r\n        return isString(str) && 1 === str.length\r\n    },\r\n    _moveCaret: function(offset) {\r\n        if (!offset) {\r\n            return\r\n        }\r\n        var newCaret = getCaretWithOffset(this._caret(), offset);\r\n        var adjustedCaret = getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\r\n        this._caret(adjustedCaret)\r\n    },\r\n    _shouldHandleKey: function(e) {\r\n        var keyName = normalizeKeyName(e);\r\n        var isSpecialChar = isCommandKeyPressed(e) || e.altKey || e.shiftKey || !this._isChar(keyName);\r\n        var isMinusKey = keyName === MINUS_KEY;\r\n        var useMaskBehavior = this._useMaskBehavior();\r\n        return useMaskBehavior && !isSpecialChar && !isMinusKey\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderFormatter()\r\n    },\r\n    _renderFormatter: function() {\r\n        this._clearCache();\r\n        this._detachFormatterEvents();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachFormatterEvents()\r\n        }\r\n    },\r\n    _detachFormatterEvents: function() {\r\n        eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE)\r\n    },\r\n    _isInputFromPaste: function(e) {\r\n        var inputType = e.originalEvent && e.originalEvent.inputType;\r\n        if (isDefined(inputType)) {\r\n            return \"insertFromPaste\" === inputType\r\n        } else {\r\n            return this._isValuePasted\r\n        }\r\n    },\r\n    _attachFormatterEvents: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function(e) {\r\n            this._formatValue(e);\r\n            this._isValuePasted = false\r\n        }.bind(this));\r\n        eventsEngine.on($input, addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n            if (!this._caretTimeout) {\r\n                this._caretTimeout = setTimeout(function() {\r\n                    this._caretTimeout = void 0;\r\n                    this._caret(getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()))\r\n                }.bind(this), CARET_TIMEOUT_DURATION)\r\n            }\r\n        }.bind(this));\r\n        eventsEngine.on($input, \"dxdblclick\", function() {\r\n            this.clearCaretTimeout()\r\n        }.bind(this))\r\n    },\r\n    clearCaretTimeout: function() {\r\n        clearTimeout(this._caretTimeout);\r\n        this._caretTimeout = void 0\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n    },\r\n    _isNonStubAfter: function(index) {\r\n        var text = this._getInputVal().slice(index);\r\n        return text && !this._isStub(text, true)\r\n    },\r\n    _isStub: function(str, isString) {\r\n        var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator());\r\n        var regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\";\r\n        var stubRegExp = new RegExp(regExpString, \"g\");\r\n        return stubRegExp.test(str) && (isString || this._isChar(str))\r\n    },\r\n    _parseValue: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        return this._parsedValue\r\n    },\r\n    _getPrecisionLimits: function(text) {\r\n        var currentFormat = this._getFormatForSign(text);\r\n        var realSeparatorIndex = getRealSeparatorIndex(currentFormat).index;\r\n        var floatPart = (splitByIndex(currentFormat, realSeparatorIndex)[1] || \"\").replace(/[^#0]/g, \"\");\r\n        var minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length;\r\n        var maxPrecision = floatPart.length;\r\n        return {\r\n            min: minPrecision,\r\n            max: maxPrecision\r\n        }\r\n    },\r\n    _revertSign: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            if (normalizeKeyName(e) === MINUS_KEY) {\r\n                this._applyRevertedSign(e, caret, true);\r\n                return\r\n            } else {\r\n                this._caret(getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()))\r\n            }\r\n        }\r\n        this._applyRevertedSign(e, caret)\r\n    },\r\n    _applyRevertedSign: function(e, caret, preserveSelectedText) {\r\n        var newValue = -1 * ensureDefined(this._parsedValue, null);\r\n        if (this._isValueInRange(newValue) || 0 === newValue) {\r\n            this._parsedValue = newValue;\r\n            if (preserveSelectedText) {\r\n                var format = this._getFormatPattern();\r\n                var previousText = this._getInputVal();\r\n                this._setTextByParsedValue();\r\n                e.preventDefault();\r\n                var currentText = this._getInputVal();\r\n                var offset = getCaretOffset(previousText, currentText, format);\r\n                caret = getCaretWithOffset(caret, offset);\r\n                var caretInBoundaries = getCaretInBoundaries(caret, currentText, format);\r\n                this._caret(caretInBoundaries)\r\n            }\r\n        }\r\n    },\r\n    _removeMinusFromText: function(text, caret) {\r\n        var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\r\n        return isMinusPressed ? this._replaceSelectedText(text, {\r\n            start: caret.start - 1,\r\n            end: caret.start\r\n        }, \"\") : text\r\n    },\r\n    _setTextByParsedValue: function() {\r\n        var format = this._getFormatPattern();\r\n        var parsed = this._parseValue();\r\n        var formatted = this._format(parsed, format) || \"\";\r\n        this._setInputText(formatted)\r\n    },\r\n    _formatValue: function(e) {\r\n        var normalizedText = this._getInputVal();\r\n        var caret = this._caret();\r\n        var textWithoutMinus = this._removeMinusFromText(normalizedText, caret);\r\n        var wasMinusRemoved = textWithoutMinus !== normalizedText;\r\n        normalizedText = textWithoutMinus;\r\n        if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\r\n            this._formattedValue = normalizedText;\r\n            if (wasMinusRemoved) {\r\n                this._setTextByParsedValue()\r\n            }\r\n            return\r\n        }\r\n        var textWasChanged = number.convertDigits(this._formattedValue, true) !== normalizedText;\r\n        if (textWasChanged) {\r\n            var value = this._tryParse(normalizedText, caret, \"\");\r\n            if (isDefined(value)) {\r\n                this._parsedValue = value\r\n            }\r\n        }\r\n        this._setTextByParsedValue()\r\n    },\r\n    _renderDisplayText: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._toggleEmptinessEventHandler()\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._parsedValue = this.option(\"value\");\r\n            this._setTextByParsedValue()\r\n        }\r\n        return this.callBase()\r\n    },\r\n    _updateParsedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        this._parsedValue = this._tryParse(inputValue, this._caret())\r\n    },\r\n    _adjustParsedValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var clearedText = this._removeStubs(this._getInputVal());\r\n        var parsedValue = clearedText ? this._parseValue() : null;\r\n        if (!isNumeric(parsedValue)) {\r\n            this._parsedValue = parsedValue;\r\n            return\r\n        }\r\n        this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(e)\r\n        }\r\n        var caret = this._caret();\r\n        this._saveValueChangeEvent(e);\r\n        this._lastKey = null;\r\n        this._lastKeyName = null;\r\n        this._updateParsedValue();\r\n        this._adjustParsedValue();\r\n        this.option(\"value\", this._parsedValue);\r\n        if (caret) {\r\n            this._caret(caret)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"format\":\r\n            case \"useMaskBehavior\":\r\n                this._renderInputType();\r\n                this._updateFormat();\r\n                this._renderFormatter();\r\n                this._renderValue();\r\n                this._refreshValueChangeEvent();\r\n                this._refreshEvents();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._adjustParsedValue();\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _clearCache: function() {\r\n        delete this._formattedValue;\r\n        delete this._lastKey;\r\n        delete this._lastKeyName;\r\n        delete this._parsedValue;\r\n        delete this._focusOutOccurs;\r\n        clearTimeout(this._caretTimeout);\r\n        delete this._caretTimeout\r\n    },\r\n    _clean: function() {\r\n        this._clearCache();\r\n        this.callBase()\r\n    }\r\n});\r\nexport default NumberBoxMask;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}