{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_horizontal.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../core/utils/date\";\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\nimport { ExpressionUtils } from \"../../../../ui/scheduler/expressionUtils\";\nimport BaseAppointmentsStrategy from \"./m_strategy_base\";\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\nvar MIN_APPOINTMENT_HEIGHT = 35;\nvar DROP_DOWN_BUTTON_OFFSET = 2;\nvar toMs = dateUtils.dateToMilliseconds;\nclass HorizontalRenderingStrategy extends BaseAppointmentsStrategy {\n  _needVerifyItemSize() {\n    return true;\n  }\n  calculateAppointmentWidth(appointment, position) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\n    var {\n      startDate: startDate\n    } = position.info.appointment;\n    var {\n      endDate: endDate\n    } = position.info.appointment;\n    var {\n      normalizedEndDate: normalizedEndDate\n    } = position.info.appointment;\n    var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\n    duration = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate);\n    var cellDuration = this.cellDurationInMinutes * toMs(\"minute\");\n    var skippedHours = getSkippedHoursInRange(startDate, endDate, this.viewDataProvider);\n    var durationInCells = (duration - skippedHours * toMs(\"hour\")) / cellDuration;\n    var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\n    return width;\n  }\n  _needAdjustDuration(diff) {\n    return diff < 0;\n  }\n  getAppointmentGeometry(coordinates) {\n    var result = this._customizeAppointmentGeometry(coordinates);\n    return super.getAppointmentGeometry(result);\n  }\n  _customizeAppointmentGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n  }\n  _getOffsets() {\n    return {\n      unlimited: 0,\n      auto: 0\n    };\n  }\n  _getCompactLeftCoordinate(itemLeft, index) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    return itemLeft + cellWidth * index;\n  }\n  _getMaxHeight() {\n    return this.cellHeight || this.getAppointmentMinSize();\n  }\n  _getAppointmentCount(overlappingMode, coordinates) {\n    return this._getMaxAppointmentCountPerCellByType(false);\n  }\n  _getAppointmentDefaultHeight() {\n    return DEFAULT_APPOINTMENT_HEIGHT;\n  }\n  _getAppointmentMinHeight() {\n    return MIN_APPOINTMENT_HEIGHT;\n  }\n  _sortCondition(a, b) {\n    return this._columnCondition(a, b);\n  }\n  _getOrientation() {\n    return [\"left\", \"right\", \"top\"];\n  }\n  getDropDownAppointmentWidth(intervalCount, isAllDay) {\n    return this.cellWidth - 2 * DROP_DOWN_BUTTON_OFFSET;\n  }\n  getDeltaTime(args, initialSize) {\n    var deltaTime;\n    var deltaWidth = args.width - initialSize.width;\n    deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.cellWidth * this.cellDurationInMinutes);\n    return deltaTime;\n  }\n  isAllDay(appointmentData) {\n    return ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointmentData);\n  }\n  _isItemsCross(firstItem, secondItem) {\n    var orientation = this._getOrientation();\n    return this._checkItemsCrossing(firstItem, secondItem, orientation);\n  }\n  getPositionShift(timeShift) {\n    var positionShift = super.getPositionShift(timeShift);\n    var left = this.cellWidth * timeShift;\n    if (this.rtlEnabled) {\n      left *= -1;\n    }\n    left += positionShift.left;\n    return {\n      top: 0,\n      left: left,\n      cellPosition: left\n    };\n  }\n  supportCompactDropDownAppointments() {\n    return false;\n  }\n}\nexport default HorizontalRenderingStrategy;","map":{"version":3,"names":["dateUtils","getSkippedHoursInRange","ExpressionUtils","BaseAppointmentsStrategy","DEFAULT_APPOINTMENT_HEIGHT","MIN_APPOINTMENT_HEIGHT","DROP_DOWN_BUTTON_OFFSET","toMs","dateToMilliseconds","HorizontalRenderingStrategy","_needVerifyItemSize","calculateAppointmentWidth","appointment","position","cellWidth","getAppointmentMinSize","allDay","getField","dataAccessors","startDate","info","endDate","normalizedEndDate","duration","getAppointmentDurationInMs","_adjustDurationByDaylightDiff","cellDuration","cellDurationInMinutes","skippedHours","viewDataProvider","durationInCells","width","cropAppointmentWidth","_needAdjustDuration","diff","getAppointmentGeometry","coordinates","result","_customizeAppointmentGeometry","config","_calculateGeometryConfig","_customizeCoordinates","height","appointmentCountPerCell","offset","_getOffsets","unlimited","auto","_getCompactLeftCoordinate","itemLeft","index","_getMaxHeight","cellHeight","_getAppointmentCount","overlappingMode","_getMaxAppointmentCountPerCellByType","_getAppointmentDefaultHeight","_getAppointmentMinHeight","_sortCondition","a","b","_columnCondition","_getOrientation","getDropDownAppointmentWidth","intervalCount","isAllDay","getDeltaTime","args","initialSize","deltaTime","deltaWidth","Math","round","appointmentData","_isItemsCross","firstItem","secondItem","orientation","_checkItemsCrossing","getPositionShift","timeShift","positionShift","left","rtlEnabled","top","cellPosition","supportCompactDropDownAppointments"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/devextreme/esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_horizontal.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_horizontal.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\r\nimport {\r\n    ExpressionUtils\r\n} from \"../../../../ui/scheduler/expressionUtils\";\r\nimport BaseAppointmentsStrategy from \"./m_strategy_base\";\r\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\r\nvar MIN_APPOINTMENT_HEIGHT = 35;\r\nvar DROP_DOWN_BUTTON_OFFSET = 2;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass HorizontalRenderingStrategy extends BaseAppointmentsStrategy {\r\n    _needVerifyItemSize() {\r\n        return true\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\r\n        var {\r\n            startDate: startDate\r\n        } = position.info.appointment;\r\n        var {\r\n            endDate: endDate\r\n        } = position.info.appointment;\r\n        var {\r\n            normalizedEndDate: normalizedEndDate\r\n        } = position.info.appointment;\r\n        var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\r\n        duration = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate);\r\n        var cellDuration = this.cellDurationInMinutes * toMs(\"minute\");\r\n        var skippedHours = getSkippedHoursInRange(startDate, endDate, this.viewDataProvider);\r\n        var durationInCells = (duration - skippedHours * toMs(\"hour\")) / cellDuration;\r\n        var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\r\n        return width\r\n    }\r\n    _needAdjustDuration(diff) {\r\n        return diff < 0\r\n    }\r\n    getAppointmentGeometry(coordinates) {\r\n        var result = this._customizeAppointmentGeometry(coordinates);\r\n        return super.getAppointmentGeometry(result)\r\n    }\r\n    _customizeAppointmentGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: 0,\r\n            auto: 0\r\n        }\r\n    }\r\n    _getCompactLeftCoordinate(itemLeft, index) {\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        return itemLeft + cellWidth * index\r\n    }\r\n    _getMaxHeight() {\r\n        return this.cellHeight || this.getAppointmentMinSize()\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {\r\n        return this._getMaxAppointmentCountPerCellByType(false)\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return DEFAULT_APPOINTMENT_HEIGHT\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return MIN_APPOINTMENT_HEIGHT\r\n    }\r\n    _sortCondition(a, b) {\r\n        return this._columnCondition(a, b)\r\n    }\r\n    _getOrientation() {\r\n        return [\"left\", \"right\", \"top\"]\r\n    }\r\n    getDropDownAppointmentWidth(intervalCount, isAllDay) {\r\n        return this.cellWidth - 2 * DROP_DOWN_BUTTON_OFFSET\r\n    }\r\n    getDeltaTime(args, initialSize) {\r\n        var deltaTime;\r\n        var deltaWidth = args.width - initialSize.width;\r\n        deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.cellWidth * this.cellDurationInMinutes);\r\n        return deltaTime\r\n    }\r\n    isAllDay(appointmentData) {\r\n        return ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointmentData)\r\n    }\r\n    _isItemsCross(firstItem, secondItem) {\r\n        var orientation = this._getOrientation();\r\n        return this._checkItemsCrossing(firstItem, secondItem, orientation)\r\n    }\r\n    getPositionShift(timeShift) {\r\n        var positionShift = super.getPositionShift(timeShift);\r\n        var left = this.cellWidth * timeShift;\r\n        if (this.rtlEnabled) {\r\n            left *= -1\r\n        }\r\n        left += positionShift.left;\r\n        return {\r\n            top: 0,\r\n            left: left,\r\n            cellPosition: left\r\n        }\r\n    }\r\n    supportCompactDropDownAppointments() {\r\n        return false\r\n    }\r\n}\r\nexport default HorizontalRenderingStrategy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}