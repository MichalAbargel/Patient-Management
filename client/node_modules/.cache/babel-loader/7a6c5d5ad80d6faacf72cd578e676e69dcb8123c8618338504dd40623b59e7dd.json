{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/helpers/positionHelper.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar getCellSize = DOMMetaData => {\n  var {\n    dateTableCellsMeta: dateTableCellsMeta\n  } = DOMMetaData;\n  var length = null === dateTableCellsMeta || void 0 === dateTableCellsMeta ? void 0 : dateTableCellsMeta.length;\n  if (!length) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  var cellIndex = length > 1 ? 1 : 0;\n  var cellSize = dateTableCellsMeta[cellIndex][0];\n  return {\n    width: cellSize.width,\n    height: cellSize.height\n  };\n};\nvar getMaxAllowedHorizontalPosition = (groupIndex, viewDataProvider, rtlEnabled, DOMMetaData) => {\n  var {\n    dateTableCellsMeta: dateTableCellsMeta\n  } = DOMMetaData;\n  var firstRow = dateTableCellsMeta[0];\n  if (!firstRow) {\n    return 0;\n  }\n  var {\n    columnIndex: columnIndex\n  } = viewDataProvider.getLastGroupCellPosition(groupIndex);\n  var cellPosition = firstRow[columnIndex];\n  if (!cellPosition) {\n    return 0;\n  }\n  return !rtlEnabled ? cellPosition.left + cellPosition.width : cellPosition.left;\n};\nexport var getCellHeight = DOMMetaData => getCellSize(DOMMetaData).height;\nexport var getCellWidth = DOMMetaData => getCellSize(DOMMetaData).width;\nexport var getAllDayHeight = (showAllDayPanel, isVerticalGrouping, DOMMetaData) => {\n  if (!showAllDayPanel) {\n    return 0;\n  }\n  if (isVerticalGrouping) {\n    var {\n      dateTableCellsMeta: dateTableCellsMeta\n    } = DOMMetaData;\n    var length = null === dateTableCellsMeta || void 0 === dateTableCellsMeta ? void 0 : dateTableCellsMeta.length;\n    return length ? dateTableCellsMeta[0][0].height : 0;\n  }\n  var {\n    allDayPanelCellsMeta: allDayPanelCellsMeta\n  } = DOMMetaData;\n  return null !== allDayPanelCellsMeta && void 0 !== allDayPanelCellsMeta && allDayPanelCellsMeta.length ? allDayPanelCellsMeta[0].height : 0;\n};\nexport var getMaxAllowedPosition = (groupIndex, viewDataProvider, rtlEnabled, DOMMetaData) => {\n  var validGroupIndex = groupIndex || 0;\n  return getMaxAllowedHorizontalPosition(validGroupIndex, viewDataProvider, rtlEnabled, DOMMetaData);\n};\nexport var getGroupWidth = (groupIndex, viewDataProvider, options) => {\n  var {\n    isVirtualScrolling: isVirtualScrolling,\n    rtlEnabled: rtlEnabled,\n    DOMMetaData: DOMMetaData\n  } = options;\n  var cellWidth = getCellWidth(DOMMetaData);\n  var result = viewDataProvider.getCellCount(options) * cellWidth;\n  if (isVirtualScrolling) {\n    var groupedData = viewDataProvider.groupedDataMap.dateTableGroupedMap;\n    var groupLength = groupedData[groupIndex][0].length;\n    result = groupLength * cellWidth;\n  }\n  var position = getMaxAllowedPosition(groupIndex, viewDataProvider, rtlEnabled, DOMMetaData);\n  var currentPosition = position[groupIndex];\n  if (currentPosition) {\n    if (rtlEnabled) {\n      result = currentPosition - position[groupIndex + 1];\n    } else if (0 === groupIndex) {\n      result = currentPosition;\n    } else {\n      result = currentPosition - position[groupIndex - 1];\n    }\n  }\n  return result;\n};\nexport class PositionHelper {\n  get viewDataProvider() {\n    return this.options.viewDataProvider;\n  }\n  get rtlEnabled() {\n    return this.options.rtlEnabled;\n  }\n  get isGroupedByDate() {\n    return this.options.isGroupedByDate;\n  }\n  get groupCount() {\n    return this.options.groupCount;\n  }\n  get DOMMetaData() {\n    return this.options.getDOMMetaDataCallback();\n  }\n  constructor(options) {\n    this.options = options;\n    this.groupStrategy = this.options.isVerticalGrouping ? new GroupStrategyBase(this.options) : new GroupStrategyHorizontal(this.options);\n  }\n  getHorizontalMax(groupIndex) {\n    var getMaxPosition = groupIndex => getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.rtlEnabled, this.DOMMetaData);\n    if (this.isGroupedByDate) {\n      var viewPortGroupCount = this.viewDataProvider.getViewPortGroupCount();\n      return Math.max(getMaxPosition(groupIndex), getMaxPosition(viewPortGroupCount - 1));\n    }\n    return getMaxPosition(groupIndex);\n  }\n  getResizableStep() {\n    var cellWidth = getCellWidth(this.DOMMetaData);\n    if (this.isGroupedByDate) {\n      return this.groupCount * cellWidth;\n    }\n    return cellWidth;\n  }\n  getVerticalMax(options) {\n    return this.groupStrategy.getVerticalMax(options);\n  }\n  getOffsetByAllDayPanel(options) {\n    return this.groupStrategy.getOffsetByAllDayPanel(options);\n  }\n  getGroupTop(options) {\n    return this.groupStrategy.getGroupTop(options);\n  }\n}\nclass GroupStrategyBase {\n  constructor(options) {\n    this.options = options;\n  }\n  get viewDataProvider() {\n    return this.options.viewDataProvider;\n  }\n  get isGroupedByDate() {\n    return this.options.isGroupedByDate;\n  }\n  get rtlEnabled() {\n    return this.options.rtlEnabled;\n  }\n  get groupCount() {\n    return this.options.groupCount;\n  }\n  get DOMMetaData() {\n    return this.options.getDOMMetaDataCallback();\n  }\n  getOffsetByAllDayPanel(_ref) {\n    var {\n      groupIndex: groupIndex,\n      supportAllDayRow: supportAllDayRow,\n      showAllDayPanel: showAllDayPanel\n    } = _ref;\n    var result = 0;\n    if (supportAllDayRow && showAllDayPanel) {\n      var allDayPanelHeight = getAllDayHeight(showAllDayPanel, true, this.DOMMetaData);\n      result = allDayPanelHeight * (groupIndex + 1);\n    }\n    return result;\n  }\n  getVerticalMax(options) {\n    var maxAllowedPosition = this._getMaxAllowedVerticalPosition(_extends({}, options, {\n      viewDataProvider: this.viewDataProvider,\n      rtlEnabled: this.rtlEnabled,\n      DOMMetaData: this.DOMMetaData\n    }));\n    maxAllowedPosition += this.getOffsetByAllDayPanel(options);\n    return maxAllowedPosition;\n  }\n  getGroupTop(_ref2) {\n    var {\n      groupIndex: groupIndex,\n      showAllDayPanel: showAllDayPanel,\n      isGroupedAllDayPanel: isGroupedAllDayPanel\n    } = _ref2;\n    var rowCount = this.viewDataProvider.getRowCountInGroup(groupIndex);\n    var maxVerticalPosition = this._getMaxAllowedVerticalPosition({\n      groupIndex: groupIndex,\n      viewDataProvider: this.viewDataProvider,\n      showAllDayPanel: showAllDayPanel,\n      isGroupedAllDayPanel: isGroupedAllDayPanel,\n      isVerticalGrouping: true,\n      DOMMetaData: this.DOMMetaData\n    });\n    return maxVerticalPosition - getCellHeight(this.DOMMetaData) * rowCount;\n  }\n  _getAllDayHeight(showAllDayPanel) {\n    return getAllDayHeight(showAllDayPanel, true, this.DOMMetaData);\n  }\n  _getMaxAllowedVerticalPosition(_ref3) {\n    var {\n      groupIndex: groupIndex,\n      showAllDayPanel: showAllDayPanel,\n      isGroupedAllDayPanel: isGroupedAllDayPanel\n    } = _ref3;\n    var {\n      rowIndex: rowIndex\n    } = this.viewDataProvider.getLastGroupCellPosition(groupIndex);\n    var {\n      dateTableCellsMeta: dateTableCellsMeta\n    } = this.DOMMetaData;\n    var lastGroupRow = dateTableCellsMeta[rowIndex];\n    if (!lastGroupRow) {\n      return 0;\n    }\n    var result = lastGroupRow[0].top + lastGroupRow[0].height;\n    if (isGroupedAllDayPanel) {\n      result -= (groupIndex + 1) * this._getAllDayHeight(showAllDayPanel);\n    }\n    return result;\n  }\n}\nclass GroupStrategyHorizontal extends GroupStrategyBase {\n  getOffsetByAllDayPanel(options) {\n    return 0;\n  }\n  getVerticalMax(options) {\n    var {\n      isVirtualScrolling: isVirtualScrolling,\n      groupIndex: groupIndex\n    } = options;\n    var correctedGroupIndex = isVirtualScrolling ? groupIndex : 0;\n    return this._getMaxAllowedVerticalPosition(_extends({}, options, {\n      groupIndex: correctedGroupIndex\n    }));\n  }\n  getGroupTop(options) {\n    return 0;\n  }\n  _getAllDayHeight(showAllDayPanel) {\n    return getAllDayHeight(showAllDayPanel, false, this.DOMMetaData);\n  }\n}","map":{"version":3,"names":["_extends","getCellSize","DOMMetaData","dateTableCellsMeta","length","width","height","cellIndex","cellSize","getMaxAllowedHorizontalPosition","groupIndex","viewDataProvider","rtlEnabled","firstRow","columnIndex","getLastGroupCellPosition","cellPosition","left","getCellHeight","getCellWidth","getAllDayHeight","showAllDayPanel","isVerticalGrouping","allDayPanelCellsMeta","getMaxAllowedPosition","validGroupIndex","getGroupWidth","options","isVirtualScrolling","cellWidth","result","getCellCount","groupedData","groupedDataMap","dateTableGroupedMap","groupLength","position","currentPosition","PositionHelper","isGroupedByDate","groupCount","getDOMMetaDataCallback","constructor","groupStrategy","GroupStrategyBase","GroupStrategyHorizontal","getHorizontalMax","getMaxPosition","viewPortGroupCount","getViewPortGroupCount","Math","max","getResizableStep","getVerticalMax","getOffsetByAllDayPanel","getGroupTop","_ref","supportAllDayRow","allDayPanelHeight","maxAllowedPosition","_getMaxAllowedVerticalPosition","_ref2","isGroupedAllDayPanel","rowCount","getRowCountInGroup","maxVerticalPosition","_getAllDayHeight","_ref3","rowIndex","lastGroupRow","top","correctedGroupIndex"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/devextreme/esm/ui/scheduler/workspaces/helpers/positionHelper.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/helpers/positionHelper.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nvar getCellSize = DOMMetaData => {\r\n    var {\r\n        dateTableCellsMeta: dateTableCellsMeta\r\n    } = DOMMetaData;\r\n    var length = null === dateTableCellsMeta || void 0 === dateTableCellsMeta ? void 0 : dateTableCellsMeta.length;\r\n    if (!length) {\r\n        return {\r\n            width: 0,\r\n            height: 0\r\n        }\r\n    }\r\n    var cellIndex = length > 1 ? 1 : 0;\r\n    var cellSize = dateTableCellsMeta[cellIndex][0];\r\n    return {\r\n        width: cellSize.width,\r\n        height: cellSize.height\r\n    }\r\n};\r\nvar getMaxAllowedHorizontalPosition = (groupIndex, viewDataProvider, rtlEnabled, DOMMetaData) => {\r\n    var {\r\n        dateTableCellsMeta: dateTableCellsMeta\r\n    } = DOMMetaData;\r\n    var firstRow = dateTableCellsMeta[0];\r\n    if (!firstRow) {\r\n        return 0\r\n    }\r\n    var {\r\n        columnIndex: columnIndex\r\n    } = viewDataProvider.getLastGroupCellPosition(groupIndex);\r\n    var cellPosition = firstRow[columnIndex];\r\n    if (!cellPosition) {\r\n        return 0\r\n    }\r\n    return !rtlEnabled ? cellPosition.left + cellPosition.width : cellPosition.left\r\n};\r\nexport var getCellHeight = DOMMetaData => getCellSize(DOMMetaData).height;\r\nexport var getCellWidth = DOMMetaData => getCellSize(DOMMetaData).width;\r\nexport var getAllDayHeight = (showAllDayPanel, isVerticalGrouping, DOMMetaData) => {\r\n    if (!showAllDayPanel) {\r\n        return 0\r\n    }\r\n    if (isVerticalGrouping) {\r\n        var {\r\n            dateTableCellsMeta: dateTableCellsMeta\r\n        } = DOMMetaData;\r\n        var length = null === dateTableCellsMeta || void 0 === dateTableCellsMeta ? void 0 : dateTableCellsMeta.length;\r\n        return length ? dateTableCellsMeta[0][0].height : 0\r\n    }\r\n    var {\r\n        allDayPanelCellsMeta: allDayPanelCellsMeta\r\n    } = DOMMetaData;\r\n    return null !== allDayPanelCellsMeta && void 0 !== allDayPanelCellsMeta && allDayPanelCellsMeta.length ? allDayPanelCellsMeta[0].height : 0\r\n};\r\nexport var getMaxAllowedPosition = (groupIndex, viewDataProvider, rtlEnabled, DOMMetaData) => {\r\n    var validGroupIndex = groupIndex || 0;\r\n    return getMaxAllowedHorizontalPosition(validGroupIndex, viewDataProvider, rtlEnabled, DOMMetaData)\r\n};\r\nexport var getGroupWidth = (groupIndex, viewDataProvider, options) => {\r\n    var {\r\n        isVirtualScrolling: isVirtualScrolling,\r\n        rtlEnabled: rtlEnabled,\r\n        DOMMetaData: DOMMetaData\r\n    } = options;\r\n    var cellWidth = getCellWidth(DOMMetaData);\r\n    var result = viewDataProvider.getCellCount(options) * cellWidth;\r\n    if (isVirtualScrolling) {\r\n        var groupedData = viewDataProvider.groupedDataMap.dateTableGroupedMap;\r\n        var groupLength = groupedData[groupIndex][0].length;\r\n        result = groupLength * cellWidth\r\n    }\r\n    var position = getMaxAllowedPosition(groupIndex, viewDataProvider, rtlEnabled, DOMMetaData);\r\n    var currentPosition = position[groupIndex];\r\n    if (currentPosition) {\r\n        if (rtlEnabled) {\r\n            result = currentPosition - position[groupIndex + 1]\r\n        } else if (0 === groupIndex) {\r\n            result = currentPosition\r\n        } else {\r\n            result = currentPosition - position[groupIndex - 1]\r\n        }\r\n    }\r\n    return result\r\n};\r\nexport class PositionHelper {\r\n    get viewDataProvider() {\r\n        return this.options.viewDataProvider\r\n    }\r\n    get rtlEnabled() {\r\n        return this.options.rtlEnabled\r\n    }\r\n    get isGroupedByDate() {\r\n        return this.options.isGroupedByDate\r\n    }\r\n    get groupCount() {\r\n        return this.options.groupCount\r\n    }\r\n    get DOMMetaData() {\r\n        return this.options.getDOMMetaDataCallback()\r\n    }\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.groupStrategy = this.options.isVerticalGrouping ? new GroupStrategyBase(this.options) : new GroupStrategyHorizontal(this.options)\r\n    }\r\n    getHorizontalMax(groupIndex) {\r\n        var getMaxPosition = groupIndex => getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.rtlEnabled, this.DOMMetaData);\r\n        if (this.isGroupedByDate) {\r\n            var viewPortGroupCount = this.viewDataProvider.getViewPortGroupCount();\r\n            return Math.max(getMaxPosition(groupIndex), getMaxPosition(viewPortGroupCount - 1))\r\n        }\r\n        return getMaxPosition(groupIndex)\r\n    }\r\n    getResizableStep() {\r\n        var cellWidth = getCellWidth(this.DOMMetaData);\r\n        if (this.isGroupedByDate) {\r\n            return this.groupCount * cellWidth\r\n        }\r\n        return cellWidth\r\n    }\r\n    getVerticalMax(options) {\r\n        return this.groupStrategy.getVerticalMax(options)\r\n    }\r\n    getOffsetByAllDayPanel(options) {\r\n        return this.groupStrategy.getOffsetByAllDayPanel(options)\r\n    }\r\n    getGroupTop(options) {\r\n        return this.groupStrategy.getGroupTop(options)\r\n    }\r\n}\r\nclass GroupStrategyBase {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    get viewDataProvider() {\r\n        return this.options.viewDataProvider\r\n    }\r\n    get isGroupedByDate() {\r\n        return this.options.isGroupedByDate\r\n    }\r\n    get rtlEnabled() {\r\n        return this.options.rtlEnabled\r\n    }\r\n    get groupCount() {\r\n        return this.options.groupCount\r\n    }\r\n    get DOMMetaData() {\r\n        return this.options.getDOMMetaDataCallback()\r\n    }\r\n    getOffsetByAllDayPanel(_ref) {\r\n        var {\r\n            groupIndex: groupIndex,\r\n            supportAllDayRow: supportAllDayRow,\r\n            showAllDayPanel: showAllDayPanel\r\n        } = _ref;\r\n        var result = 0;\r\n        if (supportAllDayRow && showAllDayPanel) {\r\n            var allDayPanelHeight = getAllDayHeight(showAllDayPanel, true, this.DOMMetaData);\r\n            result = allDayPanelHeight * (groupIndex + 1)\r\n        }\r\n        return result\r\n    }\r\n    getVerticalMax(options) {\r\n        var maxAllowedPosition = this._getMaxAllowedVerticalPosition(_extends({}, options, {\r\n            viewDataProvider: this.viewDataProvider,\r\n            rtlEnabled: this.rtlEnabled,\r\n            DOMMetaData: this.DOMMetaData\r\n        }));\r\n        maxAllowedPosition += this.getOffsetByAllDayPanel(options);\r\n        return maxAllowedPosition\r\n    }\r\n    getGroupTop(_ref2) {\r\n        var {\r\n            groupIndex: groupIndex,\r\n            showAllDayPanel: showAllDayPanel,\r\n            isGroupedAllDayPanel: isGroupedAllDayPanel\r\n        } = _ref2;\r\n        var rowCount = this.viewDataProvider.getRowCountInGroup(groupIndex);\r\n        var maxVerticalPosition = this._getMaxAllowedVerticalPosition({\r\n            groupIndex: groupIndex,\r\n            viewDataProvider: this.viewDataProvider,\r\n            showAllDayPanel: showAllDayPanel,\r\n            isGroupedAllDayPanel: isGroupedAllDayPanel,\r\n            isVerticalGrouping: true,\r\n            DOMMetaData: this.DOMMetaData\r\n        });\r\n        return maxVerticalPosition - getCellHeight(this.DOMMetaData) * rowCount\r\n    }\r\n    _getAllDayHeight(showAllDayPanel) {\r\n        return getAllDayHeight(showAllDayPanel, true, this.DOMMetaData)\r\n    }\r\n    _getMaxAllowedVerticalPosition(_ref3) {\r\n        var {\r\n            groupIndex: groupIndex,\r\n            showAllDayPanel: showAllDayPanel,\r\n            isGroupedAllDayPanel: isGroupedAllDayPanel\r\n        } = _ref3;\r\n        var {\r\n            rowIndex: rowIndex\r\n        } = this.viewDataProvider.getLastGroupCellPosition(groupIndex);\r\n        var {\r\n            dateTableCellsMeta: dateTableCellsMeta\r\n        } = this.DOMMetaData;\r\n        var lastGroupRow = dateTableCellsMeta[rowIndex];\r\n        if (!lastGroupRow) {\r\n            return 0\r\n        }\r\n        var result = lastGroupRow[0].top + lastGroupRow[0].height;\r\n        if (isGroupedAllDayPanel) {\r\n            result -= (groupIndex + 1) * this._getAllDayHeight(showAllDayPanel)\r\n        }\r\n        return result\r\n    }\r\n}\r\nclass GroupStrategyHorizontal extends GroupStrategyBase {\r\n    getOffsetByAllDayPanel(options) {\r\n        return 0\r\n    }\r\n    getVerticalMax(options) {\r\n        var {\r\n            isVirtualScrolling: isVirtualScrolling,\r\n            groupIndex: groupIndex\r\n        } = options;\r\n        var correctedGroupIndex = isVirtualScrolling ? groupIndex : 0;\r\n        return this._getMaxAllowedVerticalPosition(_extends({}, options, {\r\n            groupIndex: correctedGroupIndex\r\n        }))\r\n    }\r\n    getGroupTop(options) {\r\n        return 0\r\n    }\r\n    _getAllDayHeight(showAllDayPanel) {\r\n        return getAllDayHeight(showAllDayPanel, false, this.DOMMetaData)\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}