{"ast":null,"code":"import * as React from 'react';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { isBandScale } from '../internals/isBandScale';\n/**\r\n * For a given scale return a function that map value to their position.\r\n * Usefull when dealing with specific scale such as band.\r\n * @param scale The scale to use\r\n * @returns (value: any) => number\r\n */\nexport function getValueToPositionMapper(scale) {\n  if (isBandScale(scale)) {\n    return value => scale(value) + scale.bandwidth() / 2;\n  }\n  return value => scale(value);\n}\nexport function useXScale(identifier) {\n  const {\n    xAxis,\n    xAxisIds\n  } = React.useContext(CartesianContext);\n  const id = typeof identifier === 'string' ? identifier : xAxisIds[identifier !== null && identifier !== void 0 ? identifier : 0];\n  return xAxis[id].scale;\n}\nexport function useYScale(identifier) {\n  const {\n    yAxis,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const id = typeof identifier === 'string' ? identifier : yAxisIds[identifier !== null && identifier !== void 0 ? identifier : 0];\n  return yAxis[id].scale;\n}","map":{"version":3,"names":["React","CartesianContext","isBandScale","getValueToPositionMapper","scale","value","bandwidth","useXScale","identifier","xAxis","xAxisIds","useContext","id","useYScale","yAxis","yAxisIds"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/@mui/x-charts/esm/hooks/useScale.js"],"sourcesContent":["import * as React from 'react';\r\nimport { CartesianContext } from '../context/CartesianContextProvider';\r\nimport { isBandScale } from '../internals/isBandScale';\r\n/**\r\n * For a given scale return a function that map value to their position.\r\n * Usefull when dealing with specific scale such as band.\r\n * @param scale The scale to use\r\n * @returns (value: any) => number\r\n */\r\nexport function getValueToPositionMapper(scale) {\r\n  if (isBandScale(scale)) {\r\n    return value => scale(value) + scale.bandwidth() / 2;\r\n  }\r\n  return value => scale(value);\r\n}\r\nexport function useXScale(identifier) {\r\n  const {\r\n    xAxis,\r\n    xAxisIds\r\n  } = React.useContext(CartesianContext);\r\n  const id = typeof identifier === 'string' ? identifier : xAxisIds[identifier ?? 0];\r\n  return xAxis[id].scale;\r\n}\r\nexport function useYScale(identifier) {\r\n  const {\r\n    yAxis,\r\n    yAxisIds\r\n  } = React.useContext(CartesianContext);\r\n  const id = typeof identifier === 'string' ? identifier : yAxisIds[identifier ?? 0];\r\n  return yAxis[id].scale;\r\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAAQ,qCAAqC;AACtE,SAASC,WAAW,QAAQ,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,KAAK,EAAE;EAC9C,IAAIF,WAAW,CAACE,KAAK,CAAC,EAAE;IACtB,OAAOC,KAAK,IAAID,KAAK,CAACC,KAAK,CAAC,GAAGD,KAAK,CAACE,SAAS,CAAC,CAAC,GAAG,CAAC;EACtD;EACA,OAAOD,KAAK,IAAID,KAAK,CAACC,KAAK,CAAC;AAC9B;AACA,OAAO,SAASE,SAASA,CAACC,UAAU,EAAE;EACpC,MAAM;IACJC,KAAK;IACLC;EACF,CAAC,GAAGV,KAAK,CAACW,UAAU,CAACV,gBAAgB,CAAC;EACtC,MAAMW,EAAE,GAAG,OAAOJ,UAAU,KAAK,QAAQ,GAAGA,UAAU,GAAGE,QAAQ,CAACF,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,CAAC,CAAC;EAClF,OAAOC,KAAK,CAACG,EAAE,CAAC,CAACR,KAAK;AACxB;AACA,OAAO,SAASS,SAASA,CAACL,UAAU,EAAE;EACpC,MAAM;IACJM,KAAK;IACLC;EACF,CAAC,GAAGf,KAAK,CAACW,UAAU,CAACV,gBAAgB,CAAC;EACtC,MAAMW,EAAE,GAAG,OAAOJ,UAAU,KAAK,QAAQ,GAAGA,UAAU,GAAGO,QAAQ,CAACP,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,CAAC,CAAC;EAClF,OAAOM,KAAK,CAACF,EAAE,CAAC,CAACR,KAAK;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}