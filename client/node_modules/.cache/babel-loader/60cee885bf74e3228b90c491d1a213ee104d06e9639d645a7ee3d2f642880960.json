{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getOuterWidth, setHeight, getOuterHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport tableCreatorModule from \"../table_creator\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nimport HorizontalShader from \"../shaders/ui.scheduler.current_time_shader.horizontal\";\nimport { HEADER_CURRENT_TIME_CELL_CLASS, GROUP_ROW_CLASS, GROUP_HEADER_CONTENT_CLASS } from \"../classes\";\nimport { getDateForHeaderText } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/timeline_week\";\nimport timezoneUtils from \"../utils.timeZone\";\nimport dxrTimelineDateHeader from \"../../../renovation/ui/scheduler/workspaces/timeline/header_panel/layout.j\";\nimport { formatWeekdayAndDay } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { hasWindow } from \"../../../core/utils/window\";\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar HORIZONTAL = \"horizontal\";\nvar DATE_TABLE_CELL_BORDER = 1;\nvar DATE_TABLE_HEADER_MARGIN = 10;\nvar toMs = dateUtils.dateToMilliseconds;\nclass SchedulerTimeline extends SchedulerWorkSpace {\n  get verticalGroupTableClass() {\n    return GROUP_TABLE_CLASS;\n  }\n  get viewDirection() {\n    return \"horizontal\";\n  }\n  get renovatedHeaderPanelComponent() {\n    return dxrTimelineDateHeader;\n  }\n  getGroupTableWidth() {\n    return this._$sidebarTable ? getOuterWidth(this._$sidebarTable) : 0;\n  }\n  _getTotalRowCount(groupCount) {\n    if (this._isHorizontalGroupedWorkSpace()) {\n      return this._getRowCount();\n    } else {\n      groupCount = groupCount || 1;\n      return this._getRowCount() * groupCount;\n    }\n  }\n  _getFormat() {\n    return \"shorttime\";\n  }\n  _getWorkSpaceHeight() {\n    if (this.option(\"crossScrollingEnabled\") && hasWindow()) {\n      return getBoundingRect(this._$dateTable.get(0)).height;\n    }\n    return getBoundingRect(this.$element().get(0)).height;\n  }\n  _dateTableScrollableConfig() {\n    var config = super._dateTableScrollableConfig();\n    var timelineConfig = {\n      direction: HORIZONTAL\n    };\n    return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig);\n  }\n  _needCreateCrossScrolling() {\n    return true;\n  }\n  _headerScrollableConfig() {\n    var config = super._headerScrollableConfig();\n    return extend(config, {\n      scrollByContent: true\n    });\n  }\n  supportAllDayRow() {\n    return false;\n  }\n  _getGroupHeaderContainer() {\n    if (this._isHorizontalGroupedWorkSpace()) {\n      return this._$thead;\n    }\n    return this._$sidebarTable;\n  }\n  _insertAllDayRowsIntoDateTable() {\n    return false;\n  }\n  _needRenderWeekHeader() {\n    return false;\n  }\n  _incrementDate(date) {\n    date.setDate(date.getDate() + 1);\n  }\n  getIndicationCellCount() {\n    var timeDiff = this._getTimeDiff();\n    return this._calculateDurationInCells(timeDiff);\n  }\n  _getTimeDiff() {\n    var today = this._getToday();\n    var date = this._getIndicationFirstViewDate();\n    var startViewDate = this.getStartViewDate();\n    var dayLightOffset = timezoneUtils.getDaylightOffsetInMs(startViewDate, today);\n    if (dayLightOffset) {\n      today = new Date(today.getTime() + dayLightOffset);\n    }\n    return today.getTime() - date.getTime();\n  }\n  _calculateDurationInCells(timeDiff) {\n    var today = this._getToday();\n    var differenceInDays = Math.floor(timeDiff / toMs(\"day\"));\n    var duration = (timeDiff - differenceInDays * toMs(\"day\") - this.option(\"startDayHour\") * toMs(\"hour\")) / this.getCellDuration();\n    if (today.getHours() > this.option(\"endDayHour\")) {\n      duration = this._getCellCountInDay();\n    }\n    if (duration < 0) {\n      duration = 0;\n    }\n    return differenceInDays * this._getCellCountInDay() + duration;\n  }\n  getIndicationWidth() {\n    if (this.isGroupedByDate()) {\n      var cellCount = this.getIndicationCellCount();\n      var integerPart = Math.floor(cellCount);\n      var fractionPart = cellCount - integerPart;\n      return this.getCellWidth() * (integerPart * this._getGroupCount() + fractionPart);\n    } else {\n      return this.getIndicationCellCount() * this.getCellWidth();\n    }\n  }\n  _isVerticalShader() {\n    return false;\n  }\n  _isCurrentTimeHeaderCell() {\n    return false;\n  }\n  _setTableSizes() {\n    var minHeight = this._getWorkSpaceMinHeight();\n    setHeight(this._$sidebarTable, minHeight);\n    setHeight(this._$dateTable, minHeight);\n    super._setTableSizes();\n    this.virtualScrollingDispatcher.updateDimensions();\n  }\n  _getWorkSpaceMinHeight() {\n    var minHeight = this._getWorkSpaceHeight();\n    var workspaceContainerHeight = getOuterHeight(this.$element(), true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\n    if (minHeight < workspaceContainerHeight) {\n      minHeight = workspaceContainerHeight;\n    }\n    return minHeight;\n  }\n  _getCellCoordinatesByIndex(index) {\n    return {\n      columnIndex: index % this._getCellCount(),\n      rowIndex: 0\n    };\n  }\n  _getCellByCoordinates(cellCoordinates, groupIndex) {\n    var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\n    return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.columnIndex);\n  }\n  _getWorkSpaceWidth() {\n    return getOuterWidth(this._$dateTable, true);\n  }\n  _getIndicationFirstViewDate() {\n    return dateUtils.trimTime(new Date(this.getStartViewDate()));\n  }\n  _getIntervalBetween(currentDate, allDay) {\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    var firstViewDate = this.getStartViewDate();\n    var firstViewDateTime = firstViewDate.getTime();\n    var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    var apptStart = currentDate.getTime();\n    var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\n    var fullDays = Math.floor(fullInterval / toMs(\"day\"));\n    var tailDuration = fullInterval - fullDays * toMs(\"day\");\n    var tailDelta = 0;\n    var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\n    var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\n    var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\n    if (!allDay) {\n      if (currentDate.getHours() < startDayHour) {\n        tailDelta = tailDuration - hiddenInterval + gapBeforeAppt;\n      } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\n        tailDelta = tailDuration;\n      } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\n        tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"));\n      } else if (!fullDays) {\n        result = fullInterval;\n      }\n      result += tailDelta;\n    }\n    return result;\n  }\n  _getWeekendsCount() {\n    return 0;\n  }\n  getAllDayContainer() {\n    return null;\n  }\n  getTimePanelWidth() {\n    return 0;\n  }\n  getIntervalDuration(allDay) {\n    return this.getCellDuration();\n  }\n  getCellMinWidth() {\n    return 0;\n  }\n  getWorkSpaceLeftOffset() {\n    return 0;\n  }\n  scrollToTime(hours, minutes, date) {\n    var coordinates = this._getScrollCoordinates(hours, minutes, date);\n    var scrollable = this.getScrollable();\n    var offset = this.option(\"rtlEnabled\") ? getBoundingRect(this.getScrollableContainer().get(0)).width : 0;\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      setTimeout(function () {\n        scrollable.scrollBy({\n          left: coordinates.left - scrollable.scrollLeft() - offset,\n          top: 0\n        });\n      });\n    } else {\n      scrollable.scrollBy({\n        left: coordinates.left - scrollable.scrollLeft() - offset,\n        top: 0\n      });\n    }\n  }\n  renderRAllDayPanel() {}\n  renderRTimeTable() {}\n  _renderGroupAllDayPanel() {}\n  generateRenderOptions() {\n    var options = super.generateRenderOptions(true);\n    return _extends({}, options, {\n      isGenerateWeekDaysHeaderData: this._needRenderWeekHeader(),\n      getDateForHeaderText: getDateForHeaderText\n    });\n  }\n  _init() {\n    super._init();\n    this.$element().addClass(TIMELINE_CLASS);\n    this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS);\n  }\n  _getDefaultGroupStrategy() {\n    return \"vertical\";\n  }\n  _toggleGroupingDirectionClass() {\n    this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace());\n  }\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      groupOrientation: \"vertical\"\n    });\n  }\n  _createWorkSpaceElements() {\n    this._createWorkSpaceScrollableElements();\n  }\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n  _changeAllDayVisibility() {\n    return noop();\n  }\n  _getDateHeaderTemplate() {\n    return this.option(\"timeCellTemplate\");\n  }\n  _renderView() {\n    var groupCellTemplates;\n    if (!this.isRenovatedRender()) {\n      groupCellTemplates = this._renderGroupHeader();\n    }\n    this.renderWorkSpace();\n    if (this.isRenovatedRender()) {\n      this.virtualScrollingDispatcher.updateDimensions();\n    }\n    this._shader = new HorizontalShader(this);\n    this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\n    if (this.isRenovatedRender() && this._isVerticalGroupedWorkSpace()) {\n      this.renderRGroupPanel();\n    }\n    this.updateHeaderEmptyCellWidth();\n    this._applyCellTemplates(groupCellTemplates);\n  }\n  _setHorizontalGroupHeaderCellsHeight() {\n    return noop();\n  }\n  _setCurrentTimeCells() {\n    var timePanelCells = this._getTimePanelCells();\n    var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\n    currentTimeCellIndices.forEach(timePanelCellIndex => {\n      timePanelCells.eq(timePanelCellIndex).addClass(HEADER_CURRENT_TIME_CELL_CLASS);\n    });\n  }\n  _cleanCurrentTimeCells() {\n    this.$element().find(\".\".concat(HEADER_CURRENT_TIME_CELL_CLASS)).removeClass(HEADER_CURRENT_TIME_CELL_CLASS);\n  }\n  _getTimePanelCells() {\n    return this.$element().find(\".\".concat(HEADER_PANEL_CELL_CLASS, \":not(.\").concat(HEADER_PANEL_WEEK_CELL_CLASS, \")\"));\n  }\n  _getCurrentTimePanelCellIndices() {\n    var columnCountPerGroup = this._getCellCount();\n    var today = this._getToday();\n    var index = this.getCellIndexByDate(today);\n    var {\n      columnIndex: currentTimeColumnIndex\n    } = this._getCellCoordinatesByIndex(index);\n    if (void 0 === currentTimeColumnIndex) {\n      return [];\n    }\n    var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? this._getGroupCount() : 1;\n    return [...new Array(horizontalGroupCount)].map((_, groupIndex) => columnCountPerGroup * groupIndex + currentTimeColumnIndex);\n  }\n  _renderTimePanel() {\n    return noop();\n  }\n  _renderAllDayPanel() {\n    return noop();\n  }\n  _createAllDayPanelElements() {\n    return noop();\n  }\n  _renderDateHeader() {\n    var $headerRow = super._renderDateHeader();\n    if (this._needRenderWeekHeader()) {\n      var firstViewDate = new Date(this.getStartViewDate());\n      var currentDate = new Date(firstViewDate);\n      var $cells = [];\n      var groupCount = this._getGroupCount();\n      var cellCountInDay = this._getCellCountInDay();\n      var colSpan = this.isGroupedByDate() ? cellCountInDay * groupCount : cellCountInDay;\n      var cellTemplate = this.option(\"dateCellTemplate\");\n      var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\n      var cellsInGroup = this.viewDataProvider.viewDataGenerator.daysInInterval * this.option(\"intervalCount\");\n      var cellsCount = cellsInGroup * horizontalGroupCount;\n      for (var templateIndex = 0; templateIndex < cellsCount; templateIndex++) {\n        var $th = $(\"<th>\");\n        var text = formatWeekdayAndDay(currentDate);\n        if (cellTemplate) {\n          var templateOptions = {\n            model: _extends({\n              text: text,\n              date: new Date(currentDate)\n            }, this._getGroupsForDateHeaderTemplate(templateIndex, colSpan)),\n            container: $th,\n            index: templateIndex\n          };\n          cellTemplate.render(templateOptions);\n        } else {\n          $th.text(text);\n        }\n        $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colSpan);\n        $cells.push($th);\n        if (templateIndex % cellsInGroup === cellsInGroup - 1) {\n          currentDate = new Date(firstViewDate);\n        } else {\n          this._incrementDate(currentDate);\n        }\n      }\n      var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\n      $headerRow.before($row);\n    }\n  }\n  _renderIndicator(height, rtlOffset, $container, groupCount) {\n    var $indicator;\n    var width = this.getIndicationWidth();\n    if (\"vertical\" === this.option(\"groupOrientation\")) {\n      $indicator = this._createIndicator($container);\n      setHeight($indicator, getBoundingRect($container.get(0)).height);\n      $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width);\n    } else {\n      for (var i = 0; i < groupCount; i++) {\n        var offset = this.isGroupedByDate() ? i * this.getCellWidth() : this._getCellCount() * this.getCellWidth() * i;\n        $indicator = this._createIndicator($container);\n        setHeight($indicator, getBoundingRect($container.get(0)).height);\n        $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset);\n      }\n    }\n  }\n  _makeGroupRows(groups, groupByDate) {\n    var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n    return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n      groupRowClass: GROUP_ROW_CLASS,\n      groupHeaderRowClass: GROUP_ROW_CLASS,\n      groupHeaderClass: this._getGroupHeaderClass.bind(this),\n      groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\n    }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate);\n  }\n}\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\nexport default SchedulerTimeline;","map":{"version":3,"names":["_extends","getOuterWidth","setHeight","getOuterHeight","$","noop","extend","getBoundingRect","registerComponent","SchedulerWorkSpace","dateUtils","tableCreatorModule","tableCreator","HorizontalShader","HEADER_CURRENT_TIME_CELL_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CONTENT_CLASS","getDateForHeaderText","timezoneUtils","dxrTimelineDateHeader","formatWeekdayAndDay","hasWindow","TIMELINE_CLASS","GROUP_TABLE_CLASS","HORIZONTAL_GROUPED_WORKSPACE_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_PANEL_WEEK_CELL_CLASS","HEADER_ROW_CLASS","HORIZONTAL","DATE_TABLE_CELL_BORDER","DATE_TABLE_HEADER_MARGIN","toMs","dateToMilliseconds","SchedulerTimeline","verticalGroupTableClass","viewDirection","renovatedHeaderPanelComponent","getGroupTableWidth","_$sidebarTable","_getTotalRowCount","groupCount","_isHorizontalGroupedWorkSpace","_getRowCount","_getFormat","_getWorkSpaceHeight","option","_$dateTable","get","height","$element","_dateTableScrollableConfig","config","timelineConfig","direction","_needCreateCrossScrolling","_headerScrollableConfig","scrollByContent","supportAllDayRow","_getGroupHeaderContainer","_$thead","_insertAllDayRowsIntoDateTable","_needRenderWeekHeader","_incrementDate","date","setDate","getDate","getIndicationCellCount","timeDiff","_getTimeDiff","_calculateDurationInCells","today","_getToday","_getIndicationFirstViewDate","startViewDate","getStartViewDate","dayLightOffset","getDaylightOffsetInMs","Date","getTime","differenceInDays","Math","floor","duration","getCellDuration","getHours","_getCellCountInDay","getIndicationWidth","isGroupedByDate","cellCount","integerPart","fractionPart","getCellWidth","_getGroupCount","_isVerticalShader","_isCurrentTimeHeaderCell","_setTableSizes","minHeight","_getWorkSpaceMinHeight","virtualScrollingDispatcher","updateDimensions","workspaceContainerHeight","getHeaderPanelHeight","_getCellCoordinatesByIndex","index","columnIndex","_getCellCount","rowIndex","_getCellByCoordinates","cellCoordinates","groupIndex","indexes","_groupedStrategy","prepareCellIndexes","find","eq","_getWorkSpaceWidth","trimTime","_getIntervalBetween","currentDate","allDay","startDayHour","endDayHour","firstViewDate","firstViewDateTime","hiddenInterval","timeZoneOffset","getTimezonesDifference","apptStart","fullInterval","fullDays","tailDuration","tailDelta","_getWeekendsCount","gapBeforeAppt","result","getAllDayContainer","getTimePanelWidth","getIntervalDuration","getCellMinWidth","getWorkSpaceLeftOffset","scrollToTime","hours","minutes","coordinates","_getScrollCoordinates","scrollable","getScrollable","offset","getScrollableContainer","width","setTimeout","scrollBy","left","scrollLeft","top","renderRAllDayPanel","renderRTimeTable","_renderGroupAllDayPanel","generateRenderOptions","options","isGenerateWeekDaysHeaderData","_init","addClass","_getDefaultGroupStrategy","_toggleGroupingDirectionClass","toggleClass","_getDefaultOptions","groupOrientation","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_toggleAllDayVisibility","_changeAllDayVisibility","_getDateHeaderTemplate","_renderView","groupCellTemplates","isRenovatedRender","_renderGroupHeader","renderWorkSpace","_shader","appendTo","_sidebarScrollable","$content","_isVerticalGroupedWorkSpace","renderRGroupPanel","updateHeaderEmptyCellWidth","_applyCellTemplates","_setHorizontalGroupHeaderCellsHeight","_setCurrentTimeCells","timePanelCells","_getTimePanelCells","currentTimeCellIndices","_getCurrentTimePanelCellIndices","forEach","timePanelCellIndex","_cleanCurrentTimeCells","concat","removeClass","columnCountPerGroup","getCellIndexByDate","currentTimeColumnIndex","horizontalGroupCount","Array","map","_","_renderTimePanel","_renderAllDayPanel","_createAllDayPanelElements","_renderDateHeader","$headerRow","$cells","cellCountInDay","colSpan","cellTemplate","cellsInGroup","viewDataProvider","viewDataGenerator","daysInInterval","cellsCount","templateIndex","$th","text","templateOptions","model","_getGroupsForDateHeaderTemplate","container","render","attr","push","$row","append","before","_renderIndicator","rtlOffset","$container","$indicator","_createIndicator","css","i","_makeGroupRows","groups","groupByDate","tableCreatorStrategy","VERTICAL","makeGroupedTable","groupRowClass","groupHeaderRowClass","groupHeaderClass","_getGroupHeaderClass","bind","groupHeaderContentClass"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.timeline.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    getOuterWidth,\r\n    setHeight,\r\n    getOuterHeight\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport HorizontalShader from \"../shaders/ui.scheduler.current_time_shader.horizontal\";\r\nimport {\r\n    HEADER_CURRENT_TIME_CELL_CLASS,\r\n    GROUP_ROW_CLASS,\r\n    GROUP_HEADER_CONTENT_CLASS\r\n} from \"../classes\";\r\nimport {\r\n    getDateForHeaderText\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/timeline_week\";\r\nimport timezoneUtils from \"../utils.timeZone\";\r\nimport dxrTimelineDateHeader from \"../../../renovation/ui/scheduler/workspaces/timeline/header_panel/layout.j\";\r\nimport {\r\n    formatWeekdayAndDay\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar HORIZONTAL = \"horizontal\";\r\nvar DATE_TABLE_CELL_BORDER = 1;\r\nvar DATE_TABLE_HEADER_MARGIN = 10;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerTimeline extends SchedulerWorkSpace {\r\n    get verticalGroupTableClass() {\r\n        return GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrTimelineDateHeader\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$sidebarTable ? getOuterWidth(this._$sidebarTable) : 0\r\n    }\r\n    _getTotalRowCount(groupCount) {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._getRowCount()\r\n        } else {\r\n            groupCount = groupCount || 1;\r\n            return this._getRowCount() * groupCount\r\n        }\r\n    }\r\n    _getFormat() {\r\n        return \"shorttime\"\r\n    }\r\n    _getWorkSpaceHeight() {\r\n        if (this.option(\"crossScrollingEnabled\") && hasWindow()) {\r\n            return getBoundingRect(this._$dateTable.get(0)).height\r\n        }\r\n        return getBoundingRect(this.$element().get(0)).height\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = super._dateTableScrollableConfig();\r\n        var timelineConfig = {\r\n            direction: HORIZONTAL\r\n        };\r\n        return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig)\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return true\r\n    }\r\n    _headerScrollableConfig() {\r\n        var config = super._headerScrollableConfig();\r\n        return extend(config, {\r\n            scrollByContent: true\r\n        })\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._$thead\r\n        }\r\n        return this._$sidebarTable\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    _needRenderWeekHeader() {\r\n        return false\r\n    }\r\n    _incrementDate(date) {\r\n        date.setDate(date.getDate() + 1)\r\n    }\r\n    getIndicationCellCount() {\r\n        var timeDiff = this._getTimeDiff();\r\n        return this._calculateDurationInCells(timeDiff)\r\n    }\r\n    _getTimeDiff() {\r\n        var today = this._getToday();\r\n        var date = this._getIndicationFirstViewDate();\r\n        var startViewDate = this.getStartViewDate();\r\n        var dayLightOffset = timezoneUtils.getDaylightOffsetInMs(startViewDate, today);\r\n        if (dayLightOffset) {\r\n            today = new Date(today.getTime() + dayLightOffset)\r\n        }\r\n        return today.getTime() - date.getTime()\r\n    }\r\n    _calculateDurationInCells(timeDiff) {\r\n        var today = this._getToday();\r\n        var differenceInDays = Math.floor(timeDiff / toMs(\"day\"));\r\n        var duration = (timeDiff - differenceInDays * toMs(\"day\") - this.option(\"startDayHour\") * toMs(\"hour\")) / this.getCellDuration();\r\n        if (today.getHours() > this.option(\"endDayHour\")) {\r\n            duration = this._getCellCountInDay()\r\n        }\r\n        if (duration < 0) {\r\n            duration = 0\r\n        }\r\n        return differenceInDays * this._getCellCountInDay() + duration\r\n    }\r\n    getIndicationWidth() {\r\n        if (this.isGroupedByDate()) {\r\n            var cellCount = this.getIndicationCellCount();\r\n            var integerPart = Math.floor(cellCount);\r\n            var fractionPart = cellCount - integerPart;\r\n            return this.getCellWidth() * (integerPart * this._getGroupCount() + fractionPart)\r\n        } else {\r\n            return this.getIndicationCellCount() * this.getCellWidth()\r\n        }\r\n    }\r\n    _isVerticalShader() {\r\n        return false\r\n    }\r\n    _isCurrentTimeHeaderCell() {\r\n        return false\r\n    }\r\n    _setTableSizes() {\r\n        var minHeight = this._getWorkSpaceMinHeight();\r\n        setHeight(this._$sidebarTable, minHeight);\r\n        setHeight(this._$dateTable, minHeight);\r\n        super._setTableSizes();\r\n        this.virtualScrollingDispatcher.updateDimensions()\r\n    }\r\n    _getWorkSpaceMinHeight() {\r\n        var minHeight = this._getWorkSpaceHeight();\r\n        var workspaceContainerHeight = getOuterHeight(this.$element(), true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\r\n        if (minHeight < workspaceContainerHeight) {\r\n            minHeight = workspaceContainerHeight\r\n        }\r\n        return minHeight\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        return {\r\n            columnIndex: index % this._getCellCount(),\r\n            rowIndex: 0\r\n        }\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\r\n        return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.columnIndex)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return getOuterWidth(this._$dateTable, true)\r\n    }\r\n    _getIndicationFirstViewDate() {\r\n        return dateUtils.trimTime(new Date(this.getStartViewDate()))\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        var firstViewDate = this.getStartViewDate();\r\n        var firstViewDateTime = firstViewDate.getTime();\r\n        var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var apptStart = currentDate.getTime();\r\n        var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\r\n        var fullDays = Math.floor(fullInterval / toMs(\"day\"));\r\n        var tailDuration = fullInterval - fullDays * toMs(\"day\");\r\n        var tailDelta = 0;\r\n        var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\r\n        var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\r\n        var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\r\n        if (!allDay) {\r\n            if (currentDate.getHours() < startDayHour) {\r\n                tailDelta = tailDuration - hiddenInterval + gapBeforeAppt\r\n            } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\r\n                tailDelta = tailDuration\r\n            } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\r\n                tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"))\r\n            } else if (!fullDays) {\r\n                result = fullInterval\r\n            }\r\n            result += tailDelta\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    getAllDayContainer() {\r\n        return null\r\n    }\r\n    getTimePanelWidth() {\r\n        return 0\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return this.getCellDuration()\r\n    }\r\n    getCellMinWidth() {\r\n        return 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return 0\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        var offset = this.option(\"rtlEnabled\") ? getBoundingRect(this.getScrollableContainer().get(0)).width : 0;\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout((function() {\r\n                scrollable.scrollBy({\r\n                    left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                    top: 0\r\n                })\r\n            }))\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                top: 0\r\n            })\r\n        }\r\n    }\r\n    renderRAllDayPanel() {}\r\n    renderRTimeTable() {}\r\n    _renderGroupAllDayPanel() {}\r\n    generateRenderOptions() {\r\n        var options = super.generateRenderOptions(true);\r\n        return _extends({}, options, {\r\n            isGenerateWeekDaysHeaderData: this._needRenderWeekHeader(),\r\n            getDateForHeaderText: getDateForHeaderText\r\n        })\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this.$element().addClass(TIMELINE_CLASS);\r\n        this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS)\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"vertical\"\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace())\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            groupOrientation: \"vertical\"\r\n        })\r\n    }\r\n    _createWorkSpaceElements() {\r\n        this._createWorkSpaceScrollableElements()\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"timeCellTemplate\")\r\n    }\r\n    _renderView() {\r\n        var groupCellTemplates;\r\n        if (!this.isRenovatedRender()) {\r\n            groupCellTemplates = this._renderGroupHeader()\r\n        }\r\n        this.renderWorkSpace();\r\n        if (this.isRenovatedRender()) {\r\n            this.virtualScrollingDispatcher.updateDimensions()\r\n        }\r\n        this._shader = new HorizontalShader(this);\r\n        this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\r\n        if (this.isRenovatedRender() && this._isVerticalGroupedWorkSpace()) {\r\n            this.renderRGroupPanel()\r\n        }\r\n        this.updateHeaderEmptyCellWidth();\r\n        this._applyCellTemplates(groupCellTemplates)\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        return noop()\r\n    }\r\n    _setCurrentTimeCells() {\r\n        var timePanelCells = this._getTimePanelCells();\r\n        var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\r\n        currentTimeCellIndices.forEach(timePanelCellIndex => {\r\n            timePanelCells.eq(timePanelCellIndex).addClass(HEADER_CURRENT_TIME_CELL_CLASS)\r\n        })\r\n    }\r\n    _cleanCurrentTimeCells() {\r\n        this.$element().find(\".\".concat(HEADER_CURRENT_TIME_CELL_CLASS)).removeClass(HEADER_CURRENT_TIME_CELL_CLASS)\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(HEADER_PANEL_CELL_CLASS, \":not(.\").concat(HEADER_PANEL_WEEK_CELL_CLASS, \")\"))\r\n    }\r\n    _getCurrentTimePanelCellIndices() {\r\n        var columnCountPerGroup = this._getCellCount();\r\n        var today = this._getToday();\r\n        var index = this.getCellIndexByDate(today);\r\n        var {\r\n            columnIndex: currentTimeColumnIndex\r\n        } = this._getCellCoordinatesByIndex(index);\r\n        if (void 0 === currentTimeColumnIndex) {\r\n            return []\r\n        }\r\n        var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? this._getGroupCount() : 1;\r\n        return [...new Array(horizontalGroupCount)].map((_, groupIndex) => columnCountPerGroup * groupIndex + currentTimeColumnIndex)\r\n    }\r\n    _renderTimePanel() {\r\n        return noop()\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _createAllDayPanelElements() {\r\n        return noop()\r\n    }\r\n    _renderDateHeader() {\r\n        var $headerRow = super._renderDateHeader();\r\n        if (this._needRenderWeekHeader()) {\r\n            var firstViewDate = new Date(this.getStartViewDate());\r\n            var currentDate = new Date(firstViewDate);\r\n            var $cells = [];\r\n            var groupCount = this._getGroupCount();\r\n            var cellCountInDay = this._getCellCountInDay();\r\n            var colSpan = this.isGroupedByDate() ? cellCountInDay * groupCount : cellCountInDay;\r\n            var cellTemplate = this.option(\"dateCellTemplate\");\r\n            var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\r\n            var cellsInGroup = this.viewDataProvider.viewDataGenerator.daysInInterval * this.option(\"intervalCount\");\r\n            var cellsCount = cellsInGroup * horizontalGroupCount;\r\n            for (var templateIndex = 0; templateIndex < cellsCount; templateIndex++) {\r\n                var $th = $(\"<th>\");\r\n                var text = formatWeekdayAndDay(currentDate);\r\n                if (cellTemplate) {\r\n                    var templateOptions = {\r\n                        model: _extends({\r\n                            text: text,\r\n                            date: new Date(currentDate)\r\n                        }, this._getGroupsForDateHeaderTemplate(templateIndex, colSpan)),\r\n                        container: $th,\r\n                        index: templateIndex\r\n                    };\r\n                    cellTemplate.render(templateOptions)\r\n                } else {\r\n                    $th.text(text)\r\n                }\r\n                $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colSpan);\r\n                $cells.push($th);\r\n                if (templateIndex % cellsInGroup === cellsInGroup - 1) {\r\n                    currentDate = new Date(firstViewDate)\r\n                } else {\r\n                    this._incrementDate(currentDate)\r\n                }\r\n            }\r\n            var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\r\n            $headerRow.before($row)\r\n        }\r\n    }\r\n    _renderIndicator(height, rtlOffset, $container, groupCount) {\r\n        var $indicator;\r\n        var width = this.getIndicationWidth();\r\n        if (\"vertical\" === this.option(\"groupOrientation\")) {\r\n            $indicator = this._createIndicator($container);\r\n            setHeight($indicator, getBoundingRect($container.get(0)).height);\r\n            $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width)\r\n        } else {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var offset = this.isGroupedByDate() ? i * this.getCellWidth() : this._getCellCount() * this.getCellWidth() * i;\r\n                $indicator = this._createIndicator($container);\r\n                setHeight($indicator, getBoundingRect($container.get(0)).height);\r\n                $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset)\r\n            }\r\n        }\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupRowClass: GROUP_ROW_CLASS,\r\n            groupHeaderRowClass: GROUP_ROW_CLASS,\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate)\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\r\nexport default SchedulerTimeline;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}