{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_base.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { isNumeric, isObject } from \"../../../../core/utils/type\";\nimport { getAppointmentTakesAllDay } from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\nimport { createAppointmentAdapter } from \"../../../../ui/scheduler/appointmentAdapter\";\nimport timeZoneUtils from \"../../../../ui/scheduler/utils.timeZone\";\nimport { current as currentTheme } from \"../../../../ui/themes\";\nimport { AppointmentSettingsGenerator } from \"../m_settings_generator\";\nimport AdaptivePositioningStrategy from \"./m_appointments_positioning_strategy_adaptive\";\nimport AppointmentPositioningStrategy from \"./m_appointments_positioning_strategy_base\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar APPOINTMENT_MIN_SIZE = 2;\nvar APPOINTMENT_DEFAULT_HEIGHT = 20;\nvar COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT = 18;\nvar DROP_DOWN_BUTTON_ADAPTIVE_SIZE = 28;\nvar WEEK_VIEW_COLLECTOR_OFFSET = 5;\nvar COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET = 1;\nclass BaseRenderingStrategy {\n  constructor(options) {\n    this.options = options;\n    this._initPositioningStrategy();\n  }\n  get isAdaptive() {\n    return this.options.adaptivityEnabled;\n  }\n  get rtlEnabled() {\n    return this.options.rtlEnabled;\n  }\n  get startDayHour() {\n    return this.options.startDayHour;\n  }\n  get endDayHour() {\n    return this.options.endDayHour;\n  }\n  get maxAppointmentsPerCell() {\n    return this.options.maxAppointmentsPerCell;\n  }\n  get cellWidth() {\n    return this.options.cellWidth;\n  }\n  get cellHeight() {\n    return this.options.cellHeight;\n  }\n  get allDayHeight() {\n    return this.options.allDayHeight;\n  }\n  get resizableStep() {\n    return this.options.resizableStep;\n  }\n  get isGroupedByDate() {\n    return this.options.isGroupedByDate;\n  }\n  get visibleDayDuration() {\n    return this.options.visibleDayDuration;\n  }\n  get viewStartDayHour() {\n    return this.options.viewStartDayHour;\n  }\n  get viewEndDayHour() {\n    return this.options.viewEndDayHour;\n  }\n  get cellDuration() {\n    return this.options.cellDuration;\n  }\n  get cellDurationInMinutes() {\n    return this.options.cellDurationInMinutes;\n  }\n  get leftVirtualCellCount() {\n    return this.options.leftVirtualCellCount;\n  }\n  get topVirtualCellCount() {\n    return this.options.topVirtualCellCount;\n  }\n  get positionHelper() {\n    return this.options.positionHelper;\n  }\n  get showAllDayPanel() {\n    return this.options.showAllDayPanel;\n  }\n  get isGroupedAllDayPanel() {\n    return this.options.isGroupedAllDayPanel;\n  }\n  get groupOrientation() {\n    return this.options.groupOrientation;\n  }\n  get rowCount() {\n    return this.options.rowCount;\n  }\n  get groupCount() {\n    return this.options.groupCount;\n  }\n  get currentDate() {\n    return this.options.currentDate;\n  }\n  get appointmentCountPerCell() {\n    return this.options.appointmentCountPerCell;\n  }\n  get appointmentOffset() {\n    return this.options.appointmentOffset;\n  }\n  get allowResizing() {\n    return this.options.allowResizing;\n  }\n  get allowAllDayResizing() {\n    return this.options.allowAllDayResizing;\n  }\n  get viewDataProvider() {\n    return this.options.viewDataProvider;\n  }\n  get dataAccessors() {\n    return this.options.dataAccessors;\n  }\n  get timeZoneCalculator() {\n    return this.options.timeZoneCalculator;\n  }\n  get intervalCount() {\n    return this.options.intervalCount;\n  }\n  get allDayPanelMode() {\n    return this.options.allDayPanelMode;\n  }\n  get isVirtualScrolling() {\n    return this.options.isVirtualScrolling;\n  }\n  _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\n    coordinates.top += this.getCollectorTopOffset(isAllDay);\n    coordinates.left += this.getCollectorLeftOffset();\n  }\n  _initPositioningStrategy() {\n    this._positioningStrategy = this.isAdaptive ? new AdaptivePositioningStrategy(this) : new AppointmentPositioningStrategy(this);\n  }\n  getPositioningStrategy() {\n    return this._positioningStrategy;\n  }\n  getAppointmentMinSize() {\n    return APPOINTMENT_MIN_SIZE;\n  }\n  keepAppointmentSettings() {\n    return false;\n  }\n  getDeltaTime(args, initialSize, appointment) {}\n  getAppointmentGeometry(coordinates) {\n    return coordinates;\n  }\n  needCorrectAppointmentDates() {\n    return true;\n  }\n  getDirection() {\n    return \"horizontal\";\n  }\n  createTaskPositionMap(items, skipSorting) {\n    delete this._maxAppointmentCountPerCell;\n    var length = null === items || void 0 === items ? void 0 : items.length;\n    if (!length) {\n      return;\n    }\n    var map = [];\n    for (var i = 0; i < length; i++) {\n      var coordinates = this._getItemPosition(items[i]);\n      if (coordinates.length && this.rtlEnabled) {\n        coordinates = this._correctRtlCoordinates(coordinates);\n      }\n      coordinates.forEach(item => {\n        item.leftVirtualCellCount = this.leftVirtualCellCount;\n        item.topVirtualCellCount = this.topVirtualCellCount;\n        item.leftVirtualWidth = this.leftVirtualCellCount * this.cellWidth;\n        item.topVirtualHeight = this.topVirtualCellCount * this.cellHeight;\n      });\n      map.push(coordinates);\n    }\n    var positionArray = this._getSortedPositions(map);\n    var resultPositions = this._getResultPositions(positionArray);\n    return this._getExtendedPositionMap(map, resultPositions);\n  }\n  _getDeltaWidth(args, initialSize) {\n    var intervalWidth = this.resizableStep || this.getAppointmentMinSize();\n    var initialWidth = initialSize.width;\n    return Math.round((args.width - initialWidth) / intervalWidth);\n  }\n  _correctRtlCoordinates(coordinates) {\n    var width = coordinates[0].width || this._getAppointmentMaxWidth();\n    coordinates.forEach(coordinate => {\n      if (!coordinate.appointmentReduced) {\n        coordinate.left -= width;\n      }\n    });\n    return coordinates;\n  }\n  _getAppointmentMaxWidth() {\n    return this.cellWidth;\n  }\n  _getItemPosition(appointment) {\n    var position = this.generateAppointmentSettings(appointment);\n    var allDay = this.isAllDay(appointment);\n    var result = [];\n    for (var j = 0; j < position.length; j++) {\n      var height = this.calculateAppointmentHeight(appointment, position[j]);\n      var width = this.calculateAppointmentWidth(appointment, position[j]);\n      var resultWidth = width;\n      var appointmentReduced = null;\n      var multiWeekAppointmentParts = [];\n      var initialRowIndex = position[j].rowIndex;\n      var initialColumnIndex = position[j].columnIndex;\n      if (this._needVerifyItemSize() || allDay) {\n        var currentMaxAllowedPosition = position[j].hMax;\n        if (this.isAppointmentGreaterThan(currentMaxAllowedPosition, {\n          left: position[j].left,\n          width: width\n        })) {\n          appointmentReduced = \"head\";\n          initialRowIndex = position[j].rowIndex;\n          initialColumnIndex = position[j].columnIndex;\n          resultWidth = this._reduceMultiWeekAppointment(width, {\n            left: position[j].left,\n            right: currentMaxAllowedPosition\n          });\n          multiWeekAppointmentParts = this._getAppointmentParts({\n            sourceAppointmentWidth: width,\n            reducedWidth: resultWidth,\n            height: height\n          }, position[j]);\n          if (this.rtlEnabled) {\n            position[j].left = currentMaxAllowedPosition;\n          }\n        }\n      }\n      extend(position[j], {\n        height: height,\n        width: resultWidth,\n        allDay: allDay,\n        rowIndex: initialRowIndex,\n        columnIndex: initialColumnIndex,\n        appointmentReduced: appointmentReduced\n      });\n      result = this._getAppointmentPartsPosition(multiWeekAppointmentParts, position[j], result);\n    }\n    return result;\n  }\n  _getAppointmentPartsPosition(appointmentParts, position, result) {\n    if (appointmentParts.length) {\n      appointmentParts.unshift(position);\n      result = result.concat(appointmentParts);\n    } else {\n      result.push(position);\n    }\n    return result;\n  }\n  getAppointmentSettingsGenerator(rawAppointment) {\n    return new AppointmentSettingsGenerator(_extends({\n      rawAppointment: rawAppointment,\n      appointmentTakesAllDay: this.isAppointmentTakesAllDay(rawAppointment),\n      getPositionShiftCallback: this.getPositionShift.bind(this)\n    }, this.options));\n  }\n  generateAppointmentSettings(rawAppointment) {\n    return this.getAppointmentSettingsGenerator(rawAppointment).create();\n  }\n  isAppointmentTakesAllDay(rawAppointment) {\n    var adapter = createAppointmentAdapter(rawAppointment, this.dataAccessors, this.timeZoneCalculator);\n    return getAppointmentTakesAllDay(adapter, this.viewStartDayHour, this.viewEndDayHour, this.allDayPanelMode);\n  }\n  _getAppointmentParts(geometry, settings) {\n    return [];\n  }\n  _getCompactAppointmentParts(appointmentWidth) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    return Math.round(appointmentWidth / cellWidth);\n  }\n  _reduceMultiWeekAppointment(sourceAppointmentWidth, bound) {\n    if (this.rtlEnabled) {\n      sourceAppointmentWidth = Math.floor(bound.left - bound.right);\n    } else {\n      sourceAppointmentWidth = bound.right - Math.floor(bound.left);\n    }\n    return sourceAppointmentWidth;\n  }\n  calculateAppointmentHeight(appointment, position) {\n    return 0;\n  }\n  calculateAppointmentWidth(appointment, position) {\n    return 0;\n  }\n  isAppointmentGreaterThan(etalon, comparisonParameters) {\n    var result = comparisonParameters.left + comparisonParameters.width - etalon;\n    if (this.rtlEnabled) {\n      result = etalon + comparisonParameters.width - comparisonParameters.left;\n    }\n    return result > this.cellWidth / 2;\n  }\n  isAllDay(appointment) {\n    return false;\n  }\n  cropAppointmentWidth(width, cellWidth) {\n    return this.isGroupedByDate ? cellWidth : width;\n  }\n  _getSortedPositions(positionList, skipSorting) {\n    var result = [];\n    var round = value => Math.round(100 * value) / 100;\n    var createItem = (rowIndex, columnIndex, top, left, bottom, right, position, allDay) => ({\n      i: rowIndex,\n      j: columnIndex,\n      top: round(top),\n      left: round(left),\n      bottom: round(bottom),\n      right: round(right),\n      cellPosition: position,\n      allDay: allDay\n    });\n    for (var rowIndex = 0, rowCount = positionList.length; rowIndex < rowCount; rowIndex++) {\n      for (var columnIndex = 0, cellCount = positionList[rowIndex].length; columnIndex < cellCount; columnIndex++) {\n        var {\n          top: top,\n          left: left,\n          height: height,\n          width: width,\n          cellPosition: cellPosition,\n          allDay: allDay\n        } = positionList[rowIndex][columnIndex];\n        result.push(createItem(rowIndex, columnIndex, top, left, top + height, left + width, cellPosition, allDay));\n      }\n    }\n    return result.sort((a, b) => this._sortCondition(a, b));\n  }\n  _sortCondition(a, b) {}\n  _getConditions(a, b) {\n    var isSomeEdge = this._isSomeEdge(a, b);\n    return {\n      columnCondition: isSomeEdge || this._normalizeCondition(a.left, b.left),\n      rowCondition: isSomeEdge || this._normalizeCondition(a.top, b.top),\n      cellPositionCondition: isSomeEdge || this._normalizeCondition(a.cellPosition, b.cellPosition)\n    };\n  }\n  _rowCondition(a, b) {\n    var conditions = this._getConditions(a, b);\n    return conditions.columnCondition || conditions.rowCondition;\n  }\n  _columnCondition(a, b) {\n    var conditions = this._getConditions(a, b);\n    return conditions.rowCondition || conditions.columnCondition;\n  }\n  _isSomeEdge(a, b) {\n    return a.i === b.i && a.j === b.j;\n  }\n  _normalizeCondition(first, second) {\n    var result = first - second;\n    return Math.abs(result) > 1 ? result : 0;\n  }\n  _isItemsCross(firstItem, secondItem) {\n    var areItemsInTheSameTable = !!firstItem.allDay === !!secondItem.allDay;\n    var areItemsAllDay = firstItem.allDay && secondItem.allDay;\n    if (areItemsInTheSameTable) {\n      var orientation = this._getOrientation(areItemsAllDay);\n      return this._checkItemsCrossing(firstItem, secondItem, orientation);\n    }\n    return false;\n  }\n  _checkItemsCrossing(firstItem, secondItem, orientation) {\n    var firstItemSide1 = Math.floor(firstItem[orientation[0]]);\n    var firstItemSide2 = Math.floor(firstItem[orientation[1]]);\n    var secondItemSide1 = Math.ceil(secondItem[orientation[0]]);\n    var secondItemSide2 = Math.ceil(secondItem[orientation[1]]);\n    var isItemCross = Math.abs(firstItem[orientation[2]] - secondItem[orientation[2]]) <= 1;\n    return isItemCross && (firstItemSide1 <= secondItemSide1 && firstItemSide2 > secondItemSide1 || firstItemSide1 < secondItemSide2 && firstItemSide2 >= secondItemSide2 || firstItemSide1 === secondItemSide1 && firstItemSide2 === secondItemSide2);\n  }\n  _getOrientation(isAllDay) {\n    return isAllDay ? [\"left\", \"right\", \"top\"] : [\"top\", \"bottom\", \"left\"];\n  }\n  _getResultPositions(sortedArray) {\n    var result = [];\n    var i;\n    var sortedIndex = 0;\n    var currentItem;\n    var indexes;\n    var itemIndex;\n    var maxIndexInStack = 0;\n    var stack = {};\n    var findFreeIndex = (indexes, index) => {\n      var isFind = indexes.some(item => item === index);\n      if (isFind) {\n        return findFreeIndex(indexes, ++index);\n      }\n      return index;\n    };\n    var createItem = (currentItem, index) => {\n      var currentIndex = index || 0;\n      return {\n        index: currentIndex,\n        i: currentItem.i,\n        j: currentItem.j,\n        left: currentItem.left,\n        right: currentItem.right,\n        top: currentItem.top,\n        bottom: currentItem.bottom,\n        allDay: currentItem.allDay,\n        sortedIndex: this._skipSortedIndex(currentIndex) ? null : sortedIndex++\n      };\n    };\n    var startNewStack = currentItem => {\n      stack.items = [createItem(currentItem)];\n      stack.left = currentItem.left;\n      stack.right = currentItem.right;\n      stack.top = currentItem.top;\n      stack.bottom = currentItem.bottom;\n      stack.allDay = currentItem.allDay;\n    };\n    var pushItemsInResult = items => {\n      items.forEach(item => {\n        result.push({\n          index: item.index,\n          count: maxIndexInStack + 1,\n          i: item.i,\n          j: item.j,\n          sortedIndex: item.sortedIndex\n        });\n      });\n    };\n    for (i = 0; i < sortedArray.length; i++) {\n      currentItem = sortedArray[i];\n      indexes = [];\n      if (!stack.items) {\n        startNewStack(currentItem);\n      } else if (this._isItemsCross(stack, currentItem)) {\n        stack.items.forEach(item => {\n          if (this._isItemsCross(item, currentItem)) {\n            indexes.push(item.index);\n          }\n        });\n        itemIndex = indexes.length ? findFreeIndex(indexes, 0) : 0;\n        stack.items.push(createItem(currentItem, itemIndex));\n        maxIndexInStack = Math.max(itemIndex, maxIndexInStack);\n        stack.left = Math.min(stack.left, currentItem.left);\n        stack.right = Math.max(stack.right, currentItem.right);\n        stack.top = Math.min(stack.top, currentItem.top);\n        stack.bottom = Math.max(stack.bottom, currentItem.bottom);\n        stack.allDay = currentItem.allDay;\n      } else {\n        pushItemsInResult(stack.items);\n        stack = {};\n        startNewStack(currentItem);\n        maxIndexInStack = 0;\n      }\n    }\n    if (stack.items) {\n      pushItemsInResult(stack.items);\n    }\n    return result.sort((a, b) => {\n      var columnCondition = a.j - b.j;\n      var rowCondition = a.i - b.i;\n      return rowCondition || columnCondition;\n    });\n  }\n  _skipSortedIndex(index) {\n    return index > this._getMaxAppointmentCountPerCell() - 1;\n  }\n  _findIndexByKey(arr, iKey, jKey, iValue, jValue) {\n    var result = 0;\n    for (var i = 0, len = arr.length; i < len; i++) {\n      if (arr[i][iKey] === iValue && arr[i][jKey] === jValue) {\n        result = i;\n        break;\n      }\n    }\n    return result;\n  }\n  _getExtendedPositionMap(map, positions) {\n    var positionCounter = 0;\n    var result = [];\n    for (var i = 0, mapLength = map.length; i < mapLength; i++) {\n      var resultString = [];\n      for (var j = 0, itemLength = map[i].length; j < itemLength; j++) {\n        map[i][j].index = positions[positionCounter].index;\n        map[i][j].sortedIndex = positions[positionCounter].sortedIndex;\n        map[i][j].count = positions[positionCounter++].count;\n        resultString.push(map[i][j]);\n        this._checkLongCompactAppointment(map[i][j], resultString);\n      }\n      result.push(resultString);\n    }\n    return result;\n  }\n  _checkLongCompactAppointment(item, result) {\n    this._splitLongCompactAppointment(item, result);\n    return result;\n  }\n  _splitLongCompactAppointment(item, result) {\n    var appointmentCountPerCell = this._getMaxAppointmentCountPerCellByType(item.allDay);\n    var compactCount = 0;\n    if (void 0 !== appointmentCountPerCell && item.index > appointmentCountPerCell - 1) {\n      item.isCompact = true;\n      compactCount = this._getCompactAppointmentParts(item.width);\n      for (var k = 1; k < compactCount; k++) {\n        var compactPart = extend(true, {}, item);\n        compactPart.left = this._getCompactLeftCoordinate(item.left, k);\n        compactPart.columnIndex += k;\n        compactPart.sortedIndex = null;\n        result.push(compactPart);\n      }\n    }\n    return result;\n  }\n  _adjustDurationByDaylightDiff(duration, startDate, endDate) {\n    var daylightDiff = timeZoneUtils.getDaylightOffset(startDate, endDate);\n    return this._needAdjustDuration(daylightDiff) ? this._calculateDurationByDaylightDiff(duration, daylightDiff) : duration;\n  }\n  _needAdjustDuration(diff) {\n    return 0 !== diff;\n  }\n  _calculateDurationByDaylightDiff(duration, diff) {\n    return duration + diff * toMs(\"minute\");\n  }\n  _getCollectorLeftOffset(isAllDay) {\n    if (isAllDay || !this.isApplyCompactAppointmentOffset()) {\n      return 0;\n    }\n    var dropDownButtonWidth = this.getDropDownAppointmentWidth(this.intervalCount, isAllDay);\n    var rightOffset = this._isCompactTheme() ? COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET : WEEK_VIEW_COLLECTOR_OFFSET;\n    return this.cellWidth - dropDownButtonWidth - rightOffset;\n  }\n  _markAppointmentAsVirtual(coordinates) {\n    var isAllDay = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    var countFullWidthAppointmentInCell = this._getMaxAppointmentCountPerCellByType(isAllDay);\n    if (coordinates.count - countFullWidthAppointmentInCell > 0) {\n      var {\n        top: top,\n        left: left\n      } = coordinates;\n      var compactRender = this.isAdaptive || !isAllDay && this.supportCompactDropDownAppointments();\n      coordinates.virtual = {\n        left: left + this._getCollectorLeftOffset(isAllDay),\n        top: top,\n        width: this.getDropDownAppointmentWidth(this.intervalCount, isAllDay),\n        height: this.getDropDownAppointmentHeight(),\n        index: this._generateAppointmentCollectorIndex(coordinates, isAllDay),\n        isAllDay: isAllDay,\n        groupIndex: coordinates.groupIndex,\n        isCompact: compactRender\n      };\n    }\n  }\n  isApplyCompactAppointmentOffset() {\n    return this.supportCompactDropDownAppointments();\n  }\n  supportCompactDropDownAppointments() {\n    return true;\n  }\n  _generateAppointmentCollectorIndex(_ref, isAllDay) {\n    var {\n      groupIndex: groupIndex,\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    } = _ref;\n    return \"\".concat(groupIndex, \"-\").concat(rowIndex, \"-\").concat(columnIndex, \"-\").concat(isAllDay);\n  }\n  _getMaxAppointmentCountPerCellByType(isAllDay) {\n    var appointmentCountPerCell = this._getMaxAppointmentCountPerCell();\n    if (isObject(appointmentCountPerCell)) {\n      return isAllDay ? appointmentCountPerCell.allDay : appointmentCountPerCell.simple;\n    }\n    return appointmentCountPerCell;\n  }\n  getDropDownAppointmentWidth(intervalCount, isAllDay) {\n    return this.getPositioningStrategy().getDropDownAppointmentWidth(intervalCount, isAllDay);\n  }\n  getDropDownAppointmentHeight() {\n    return this.getPositioningStrategy().getDropDownAppointmentHeight();\n  }\n  getDropDownButtonAdaptiveSize() {\n    return DROP_DOWN_BUTTON_ADAPTIVE_SIZE;\n  }\n  getCollectorTopOffset(allDay) {\n    return this.getPositioningStrategy().getCollectorTopOffset(allDay);\n  }\n  getCollectorLeftOffset() {\n    return this.getPositioningStrategy().getCollectorLeftOffset();\n  }\n  getAppointmentDataCalculator() {}\n  getVerticalAppointmentHeight(cellHeight, currentAppointmentCountInCell, maxAppointmentsPerCell) {\n    var resultMaxAppointmentsPerCell = maxAppointmentsPerCell;\n    if (isNumeric(this.maxAppointmentsPerCell)) {\n      var dynamicAppointmentCountPerCell = this._getDynamicAppointmentCountPerCell();\n      var maxAppointmentCountDisplayedInCell = dynamicAppointmentCountPerCell.allDay || dynamicAppointmentCountPerCell;\n      var maxAppointmentsCount = Math.max(currentAppointmentCountInCell, maxAppointmentCountDisplayedInCell);\n      resultMaxAppointmentsPerCell = Math.min(maxAppointmentsCount, maxAppointmentsPerCell);\n    }\n    return cellHeight / resultMaxAppointmentsPerCell;\n  }\n  _customizeCoordinates(coordinates, cellHeight, appointmentCountPerCell, topOffset, isAllDay) {\n    var {\n      index: index,\n      count: count\n    } = coordinates;\n    var appointmentHeight = this.getVerticalAppointmentHeight(cellHeight, count, appointmentCountPerCell);\n    var appointmentTop = coordinates.top + index * appointmentHeight;\n    var top = appointmentTop + topOffset;\n    var {\n      width: width\n    } = coordinates;\n    var {\n      left: left\n    } = coordinates;\n    if (coordinates.isCompact) {\n      this.isAdaptive && this._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\n      this._markAppointmentAsVirtual(coordinates, isAllDay);\n    }\n    return {\n      height: appointmentHeight,\n      width: width,\n      top: top,\n      left: left,\n      empty: this._isAppointmentEmpty(cellHeight, width)\n    };\n  }\n  _isAppointmentEmpty(height, width) {\n    return height < this._getAppointmentMinHeight() || width < this._getAppointmentMinWidth();\n  }\n  _calculateGeometryConfig(coordinates) {\n    var overlappingMode = this.maxAppointmentsPerCell;\n    var offsets = this._getOffsets();\n    var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\n    var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\n    var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\n    var maxHeight = this._getMaxHeight();\n    if (!isNumeric(appointmentCountPerCell)) {\n      appointmentCountPerCell = coordinates.count;\n      ratio = (maxHeight - offsets.unlimited) / maxHeight;\n    }\n    var topOffset = (1 - ratio) * maxHeight;\n    if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\n      ratio = 1;\n      maxHeight -= appointmentDefaultOffset;\n      topOffset = appointmentDefaultOffset;\n    }\n    return {\n      height: ratio * maxHeight,\n      appointmentCountPerCell: appointmentCountPerCell,\n      offset: topOffset\n    };\n  }\n  _getAppointmentCount(overlappingMode, coordinates) {}\n  _getDefaultRatio(coordinates, appointmentCountPerCell) {}\n  _getOffsets() {}\n  _getMaxHeight() {}\n  _needVerifyItemSize() {\n    return false;\n  }\n  _getMaxAppointmentCountPerCell() {\n    if (!this._maxAppointmentCountPerCell) {\n      var overlappingMode = this.maxAppointmentsPerCell;\n      var appointmentCountPerCell;\n      if (isNumeric(overlappingMode)) {\n        appointmentCountPerCell = overlappingMode;\n      }\n      if (\"auto\" === overlappingMode) {\n        appointmentCountPerCell = this._getDynamicAppointmentCountPerCell();\n      }\n      if (\"unlimited\" === overlappingMode) {\n        appointmentCountPerCell = void 0;\n      }\n      this._maxAppointmentCountPerCell = appointmentCountPerCell;\n    }\n    return this._maxAppointmentCountPerCell;\n  }\n  _getDynamicAppointmentCountPerCell() {\n    return this.getPositioningStrategy().getDynamicAppointmentCountPerCell();\n  }\n  allDaySupported() {\n    return false;\n  }\n  _isCompactTheme() {\n    return \"compact\" === (currentTheme() || \"\").split(\".\").pop();\n  }\n  _getAppointmentDefaultOffset() {\n    return this.getPositioningStrategy().getAppointmentDefaultOffset();\n  }\n  _getAppointmentDefaultHeight() {\n    return this._getAppointmentHeightByTheme();\n  }\n  _getAppointmentMinHeight() {\n    return this._getAppointmentDefaultHeight();\n  }\n  _getAppointmentHeightByTheme() {\n    return this._isCompactTheme() ? COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT : APPOINTMENT_DEFAULT_HEIGHT;\n  }\n  _getAppointmentDefaultWidth() {\n    return this.getPositioningStrategy()._getAppointmentDefaultWidth();\n  }\n  _getAppointmentMinWidth() {\n    return this._getAppointmentDefaultWidth();\n  }\n  _needVerticalGroupBounds(allDay) {\n    return false;\n  }\n  _needHorizontalGroupBounds() {\n    return false;\n  }\n  getAppointmentDurationInMs(apptStartDate, apptEndDate, allDay) {\n    if (allDay) {\n      var appointmentDuration = apptEndDate.getTime() - apptStartDate.getTime();\n      var ceilQuantityOfDays = Math.ceil(appointmentDuration / toMs(\"day\"));\n      return ceilQuantityOfDays * this.visibleDayDuration;\n    }\n    var msInHour = toMs(\"hour\");\n    var trimmedStartDate = dateUtils.trimTime(apptStartDate);\n    var trimmedEndDate = dateUtils.trimTime(apptEndDate);\n    var deltaDate = trimmedEndDate - trimmedStartDate;\n    var quantityOfDays = deltaDate / toMs(\"day\") + 1;\n    var dayVisibleHours = this.endDayHour - this.startDayHour;\n    var appointmentDayHours = dayVisibleHours * quantityOfDays;\n    var startHours = (apptStartDate - trimmedStartDate) / msInHour;\n    var apptStartDelta = Math.max(0, startHours - this.startDayHour);\n    var endHours = Math.max(0, (apptEndDate - trimmedEndDate) / msInHour - this.startDayHour);\n    var apptEndDelta = Math.max(0, dayVisibleHours - endHours);\n    var result = (appointmentDayHours - (apptStartDelta + apptEndDelta)) * msInHour;\n    return result;\n  }\n  getPositionShift(timeShift, isAllDay) {\n    return {\n      top: timeShift * this.cellHeight,\n      left: 0,\n      cellPosition: 0\n    };\n  }\n}\nexport default BaseRenderingStrategy;","map":{"version":3,"names":["_extends","dateUtils","extend","isNumeric","isObject","getAppointmentTakesAllDay","createAppointmentAdapter","timeZoneUtils","current","currentTheme","AppointmentSettingsGenerator","AdaptivePositioningStrategy","AppointmentPositioningStrategy","toMs","dateToMilliseconds","APPOINTMENT_MIN_SIZE","APPOINTMENT_DEFAULT_HEIGHT","COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT","DROP_DOWN_BUTTON_ADAPTIVE_SIZE","WEEK_VIEW_COLLECTOR_OFFSET","COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET","BaseRenderingStrategy","constructor","options","_initPositioningStrategy","isAdaptive","adaptivityEnabled","rtlEnabled","startDayHour","endDayHour","maxAppointmentsPerCell","cellWidth","cellHeight","allDayHeight","resizableStep","isGroupedByDate","visibleDayDuration","viewStartDayHour","viewEndDayHour","cellDuration","cellDurationInMinutes","leftVirtualCellCount","topVirtualCellCount","positionHelper","showAllDayPanel","isGroupedAllDayPanel","groupOrientation","rowCount","groupCount","currentDate","appointmentCountPerCell","appointmentOffset","allowResizing","allowAllDayResizing","viewDataProvider","dataAccessors","timeZoneCalculator","intervalCount","allDayPanelMode","isVirtualScrolling","_correctCollectorCoordinatesInAdaptive","coordinates","isAllDay","top","getCollectorTopOffset","left","getCollectorLeftOffset","_positioningStrategy","getPositioningStrategy","getAppointmentMinSize","keepAppointmentSettings","getDeltaTime","args","initialSize","appointment","getAppointmentGeometry","needCorrectAppointmentDates","getDirection","createTaskPositionMap","items","skipSorting","_maxAppointmentCountPerCell","length","map","i","_getItemPosition","_correctRtlCoordinates","forEach","item","leftVirtualWidth","topVirtualHeight","push","positionArray","_getSortedPositions","resultPositions","_getResultPositions","_getExtendedPositionMap","_getDeltaWidth","intervalWidth","initialWidth","width","Math","round","_getAppointmentMaxWidth","coordinate","appointmentReduced","position","generateAppointmentSettings","allDay","result","j","height","calculateAppointmentHeight","calculateAppointmentWidth","resultWidth","multiWeekAppointmentParts","initialRowIndex","rowIndex","initialColumnIndex","columnIndex","_needVerifyItemSize","currentMaxAllowedPosition","hMax","isAppointmentGreaterThan","_reduceMultiWeekAppointment","right","_getAppointmentParts","sourceAppointmentWidth","reducedWidth","_getAppointmentPartsPosition","appointmentParts","unshift","concat","getAppointmentSettingsGenerator","rawAppointment","appointmentTakesAllDay","isAppointmentTakesAllDay","getPositionShiftCallback","getPositionShift","bind","create","adapter","geometry","settings","_getCompactAppointmentParts","appointmentWidth","bound","floor","etalon","comparisonParameters","cropAppointmentWidth","positionList","value","createItem","bottom","cellPosition","cellCount","sort","a","b","_sortCondition","_getConditions","isSomeEdge","_isSomeEdge","columnCondition","_normalizeCondition","rowCondition","cellPositionCondition","_rowCondition","conditions","_columnCondition","first","second","abs","_isItemsCross","firstItem","secondItem","areItemsInTheSameTable","areItemsAllDay","orientation","_getOrientation","_checkItemsCrossing","firstItemSide1","firstItemSide2","secondItemSide1","ceil","secondItemSide2","isItemCross","sortedArray","sortedIndex","currentItem","indexes","itemIndex","maxIndexInStack","stack","findFreeIndex","index","isFind","some","currentIndex","_skipSortedIndex","startNewStack","pushItemsInResult","count","max","min","_getMaxAppointmentCountPerCell","_findIndexByKey","arr","iKey","jKey","iValue","jValue","len","positions","positionCounter","mapLength","resultString","itemLength","_checkLongCompactAppointment","_splitLongCompactAppointment","_getMaxAppointmentCountPerCellByType","compactCount","isCompact","k","compactPart","_getCompactLeftCoordinate","_adjustDurationByDaylightDiff","duration","startDate","endDate","daylightDiff","getDaylightOffset","_needAdjustDuration","_calculateDurationByDaylightDiff","diff","_getCollectorLeftOffset","isApplyCompactAppointmentOffset","dropDownButtonWidth","getDropDownAppointmentWidth","rightOffset","_isCompactTheme","_markAppointmentAsVirtual","arguments","countFullWidthAppointmentInCell","compactRender","supportCompactDropDownAppointments","virtual","getDropDownAppointmentHeight","_generateAppointmentCollectorIndex","groupIndex","_ref","simple","getDropDownButtonAdaptiveSize","getAppointmentDataCalculator","getVerticalAppointmentHeight","currentAppointmentCountInCell","resultMaxAppointmentsPerCell","dynamicAppointmentCountPerCell","_getDynamicAppointmentCountPerCell","maxAppointmentCountDisplayedInCell","maxAppointmentsCount","_customizeCoordinates","topOffset","appointmentHeight","appointmentTop","empty","_isAppointmentEmpty","_getAppointmentMinHeight","_getAppointmentMinWidth","_calculateGeometryConfig","overlappingMode","offsets","_getOffsets","appointmentDefaultOffset","_getAppointmentDefaultOffset","_getAppointmentCount","ratio","_getDefaultRatio","maxHeight","_getMaxHeight","unlimited","offset","getDynamicAppointmentCountPerCell","allDaySupported","split","pop","getAppointmentDefaultOffset","_getAppointmentDefaultHeight","_getAppointmentHeightByTheme","_getAppointmentDefaultWidth","_needVerticalGroupBounds","_needHorizontalGroupBounds","getAppointmentDurationInMs","apptStartDate","apptEndDate","appointmentDuration","getTime","ceilQuantityOfDays","msInHour","trimmedStartDate","trimTime","trimmedEndDate","deltaDate","quantityOfDays","dayVisibleHours","appointmentDayHours","startHours","apptStartDelta","endHours","apptEndDelta","timeShift"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/node_modules/devextreme/esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_base.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_base.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    isNumeric,\r\n    isObject\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    getAppointmentTakesAllDay\r\n} from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../../../ui/scheduler/appointmentAdapter\";\r\nimport timeZoneUtils from \"../../../../ui/scheduler/utils.timeZone\";\r\nimport {\r\n    current as currentTheme\r\n} from \"../../../../ui/themes\";\r\nimport {\r\n    AppointmentSettingsGenerator\r\n} from \"../m_settings_generator\";\r\nimport AdaptivePositioningStrategy from \"./m_appointments_positioning_strategy_adaptive\";\r\nimport AppointmentPositioningStrategy from \"./m_appointments_positioning_strategy_base\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar APPOINTMENT_MIN_SIZE = 2;\r\nvar APPOINTMENT_DEFAULT_HEIGHT = 20;\r\nvar COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT = 18;\r\nvar DROP_DOWN_BUTTON_ADAPTIVE_SIZE = 28;\r\nvar WEEK_VIEW_COLLECTOR_OFFSET = 5;\r\nvar COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET = 1;\r\nclass BaseRenderingStrategy {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this._initPositioningStrategy()\r\n    }\r\n    get isAdaptive() {\r\n        return this.options.adaptivityEnabled\r\n    }\r\n    get rtlEnabled() {\r\n        return this.options.rtlEnabled\r\n    }\r\n    get startDayHour() {\r\n        return this.options.startDayHour\r\n    }\r\n    get endDayHour() {\r\n        return this.options.endDayHour\r\n    }\r\n    get maxAppointmentsPerCell() {\r\n        return this.options.maxAppointmentsPerCell\r\n    }\r\n    get cellWidth() {\r\n        return this.options.cellWidth\r\n    }\r\n    get cellHeight() {\r\n        return this.options.cellHeight\r\n    }\r\n    get allDayHeight() {\r\n        return this.options.allDayHeight\r\n    }\r\n    get resizableStep() {\r\n        return this.options.resizableStep\r\n    }\r\n    get isGroupedByDate() {\r\n        return this.options.isGroupedByDate\r\n    }\r\n    get visibleDayDuration() {\r\n        return this.options.visibleDayDuration\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.options.viewStartDayHour\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.options.viewEndDayHour\r\n    }\r\n    get cellDuration() {\r\n        return this.options.cellDuration\r\n    }\r\n    get cellDurationInMinutes() {\r\n        return this.options.cellDurationInMinutes\r\n    }\r\n    get leftVirtualCellCount() {\r\n        return this.options.leftVirtualCellCount\r\n    }\r\n    get topVirtualCellCount() {\r\n        return this.options.topVirtualCellCount\r\n    }\r\n    get positionHelper() {\r\n        return this.options.positionHelper\r\n    }\r\n    get showAllDayPanel() {\r\n        return this.options.showAllDayPanel\r\n    }\r\n    get isGroupedAllDayPanel() {\r\n        return this.options.isGroupedAllDayPanel\r\n    }\r\n    get groupOrientation() {\r\n        return this.options.groupOrientation\r\n    }\r\n    get rowCount() {\r\n        return this.options.rowCount\r\n    }\r\n    get groupCount() {\r\n        return this.options.groupCount\r\n    }\r\n    get currentDate() {\r\n        return this.options.currentDate\r\n    }\r\n    get appointmentCountPerCell() {\r\n        return this.options.appointmentCountPerCell\r\n    }\r\n    get appointmentOffset() {\r\n        return this.options.appointmentOffset\r\n    }\r\n    get allowResizing() {\r\n        return this.options.allowResizing\r\n    }\r\n    get allowAllDayResizing() {\r\n        return this.options.allowAllDayResizing\r\n    }\r\n    get viewDataProvider() {\r\n        return this.options.viewDataProvider\r\n    }\r\n    get dataAccessors() {\r\n        return this.options.dataAccessors\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.options.timeZoneCalculator\r\n    }\r\n    get intervalCount() {\r\n        return this.options.intervalCount\r\n    }\r\n    get allDayPanelMode() {\r\n        return this.options.allDayPanelMode\r\n    }\r\n    get isVirtualScrolling() {\r\n        return this.options.isVirtualScrolling\r\n    }\r\n    _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\r\n        coordinates.top += this.getCollectorTopOffset(isAllDay);\r\n        coordinates.left += this.getCollectorLeftOffset()\r\n    }\r\n    _initPositioningStrategy() {\r\n        this._positioningStrategy = this.isAdaptive ? new AdaptivePositioningStrategy(this) : new AppointmentPositioningStrategy(this)\r\n    }\r\n    getPositioningStrategy() {\r\n        return this._positioningStrategy\r\n    }\r\n    getAppointmentMinSize() {\r\n        return APPOINTMENT_MIN_SIZE\r\n    }\r\n    keepAppointmentSettings() {\r\n        return false\r\n    }\r\n    getDeltaTime(args, initialSize, appointment) {}\r\n    getAppointmentGeometry(coordinates) {\r\n        return coordinates\r\n    }\r\n    needCorrectAppointmentDates() {\r\n        return true\r\n    }\r\n    getDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    createTaskPositionMap(items, skipSorting) {\r\n        delete this._maxAppointmentCountPerCell;\r\n        var length = null === items || void 0 === items ? void 0 : items.length;\r\n        if (!length) {\r\n            return\r\n        }\r\n        var map = [];\r\n        for (var i = 0; i < length; i++) {\r\n            var coordinates = this._getItemPosition(items[i]);\r\n            if (coordinates.length && this.rtlEnabled) {\r\n                coordinates = this._correctRtlCoordinates(coordinates)\r\n            }\r\n            coordinates.forEach(item => {\r\n                item.leftVirtualCellCount = this.leftVirtualCellCount;\r\n                item.topVirtualCellCount = this.topVirtualCellCount;\r\n                item.leftVirtualWidth = this.leftVirtualCellCount * this.cellWidth;\r\n                item.topVirtualHeight = this.topVirtualCellCount * this.cellHeight\r\n            });\r\n            map.push(coordinates)\r\n        }\r\n        var positionArray = this._getSortedPositions(map);\r\n        var resultPositions = this._getResultPositions(positionArray);\r\n        return this._getExtendedPositionMap(map, resultPositions)\r\n    }\r\n    _getDeltaWidth(args, initialSize) {\r\n        var intervalWidth = this.resizableStep || this.getAppointmentMinSize();\r\n        var initialWidth = initialSize.width;\r\n        return Math.round((args.width - initialWidth) / intervalWidth)\r\n    }\r\n    _correctRtlCoordinates(coordinates) {\r\n        var width = coordinates[0].width || this._getAppointmentMaxWidth();\r\n        coordinates.forEach(coordinate => {\r\n            if (!coordinate.appointmentReduced) {\r\n                coordinate.left -= width\r\n            }\r\n        });\r\n        return coordinates\r\n    }\r\n    _getAppointmentMaxWidth() {\r\n        return this.cellWidth\r\n    }\r\n    _getItemPosition(appointment) {\r\n        var position = this.generateAppointmentSettings(appointment);\r\n        var allDay = this.isAllDay(appointment);\r\n        var result = [];\r\n        for (var j = 0; j < position.length; j++) {\r\n            var height = this.calculateAppointmentHeight(appointment, position[j]);\r\n            var width = this.calculateAppointmentWidth(appointment, position[j]);\r\n            var resultWidth = width;\r\n            var appointmentReduced = null;\r\n            var multiWeekAppointmentParts = [];\r\n            var initialRowIndex = position[j].rowIndex;\r\n            var initialColumnIndex = position[j].columnIndex;\r\n            if (this._needVerifyItemSize() || allDay) {\r\n                var currentMaxAllowedPosition = position[j].hMax;\r\n                if (this.isAppointmentGreaterThan(currentMaxAllowedPosition, {\r\n                        left: position[j].left,\r\n                        width: width\r\n                    })) {\r\n                    appointmentReduced = \"head\";\r\n                    initialRowIndex = position[j].rowIndex;\r\n                    initialColumnIndex = position[j].columnIndex;\r\n                    resultWidth = this._reduceMultiWeekAppointment(width, {\r\n                        left: position[j].left,\r\n                        right: currentMaxAllowedPosition\r\n                    });\r\n                    multiWeekAppointmentParts = this._getAppointmentParts({\r\n                        sourceAppointmentWidth: width,\r\n                        reducedWidth: resultWidth,\r\n                        height: height\r\n                    }, position[j]);\r\n                    if (this.rtlEnabled) {\r\n                        position[j].left = currentMaxAllowedPosition\r\n                    }\r\n                }\r\n            }\r\n            extend(position[j], {\r\n                height: height,\r\n                width: resultWidth,\r\n                allDay: allDay,\r\n                rowIndex: initialRowIndex,\r\n                columnIndex: initialColumnIndex,\r\n                appointmentReduced: appointmentReduced\r\n            });\r\n            result = this._getAppointmentPartsPosition(multiWeekAppointmentParts, position[j], result)\r\n        }\r\n        return result\r\n    }\r\n    _getAppointmentPartsPosition(appointmentParts, position, result) {\r\n        if (appointmentParts.length) {\r\n            appointmentParts.unshift(position);\r\n            result = result.concat(appointmentParts)\r\n        } else {\r\n            result.push(position)\r\n        }\r\n        return result\r\n    }\r\n    getAppointmentSettingsGenerator(rawAppointment) {\r\n        return new AppointmentSettingsGenerator(_extends({\r\n            rawAppointment: rawAppointment,\r\n            appointmentTakesAllDay: this.isAppointmentTakesAllDay(rawAppointment),\r\n            getPositionShiftCallback: this.getPositionShift.bind(this)\r\n        }, this.options))\r\n    }\r\n    generateAppointmentSettings(rawAppointment) {\r\n        return this.getAppointmentSettingsGenerator(rawAppointment).create()\r\n    }\r\n    isAppointmentTakesAllDay(rawAppointment) {\r\n        var adapter = createAppointmentAdapter(rawAppointment, this.dataAccessors, this.timeZoneCalculator);\r\n        return getAppointmentTakesAllDay(adapter, this.viewStartDayHour, this.viewEndDayHour, this.allDayPanelMode)\r\n    }\r\n    _getAppointmentParts(geometry, settings) {\r\n        return []\r\n    }\r\n    _getCompactAppointmentParts(appointmentWidth) {\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        return Math.round(appointmentWidth / cellWidth)\r\n    }\r\n    _reduceMultiWeekAppointment(sourceAppointmentWidth, bound) {\r\n        if (this.rtlEnabled) {\r\n            sourceAppointmentWidth = Math.floor(bound.left - bound.right)\r\n        } else {\r\n            sourceAppointmentWidth = bound.right - Math.floor(bound.left)\r\n        }\r\n        return sourceAppointmentWidth\r\n    }\r\n    calculateAppointmentHeight(appointment, position) {\r\n        return 0\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        return 0\r\n    }\r\n    isAppointmentGreaterThan(etalon, comparisonParameters) {\r\n        var result = comparisonParameters.left + comparisonParameters.width - etalon;\r\n        if (this.rtlEnabled) {\r\n            result = etalon + comparisonParameters.width - comparisonParameters.left\r\n        }\r\n        return result > this.cellWidth / 2\r\n    }\r\n    isAllDay(appointment) {\r\n        return false\r\n    }\r\n    cropAppointmentWidth(width, cellWidth) {\r\n        return this.isGroupedByDate ? cellWidth : width\r\n    }\r\n    _getSortedPositions(positionList, skipSorting) {\r\n        var result = [];\r\n        var round = value => Math.round(100 * value) / 100;\r\n        var createItem = (rowIndex, columnIndex, top, left, bottom, right, position, allDay) => ({\r\n            i: rowIndex,\r\n            j: columnIndex,\r\n            top: round(top),\r\n            left: round(left),\r\n            bottom: round(bottom),\r\n            right: round(right),\r\n            cellPosition: position,\r\n            allDay: allDay\r\n        });\r\n        for (var rowIndex = 0, rowCount = positionList.length; rowIndex < rowCount; rowIndex++) {\r\n            for (var columnIndex = 0, cellCount = positionList[rowIndex].length; columnIndex < cellCount; columnIndex++) {\r\n                var {\r\n                    top: top,\r\n                    left: left,\r\n                    height: height,\r\n                    width: width,\r\n                    cellPosition: cellPosition,\r\n                    allDay: allDay\r\n                } = positionList[rowIndex][columnIndex];\r\n                result.push(createItem(rowIndex, columnIndex, top, left, top + height, left + width, cellPosition, allDay))\r\n            }\r\n        }\r\n        return result.sort((a, b) => this._sortCondition(a, b))\r\n    }\r\n    _sortCondition(a, b) {}\r\n    _getConditions(a, b) {\r\n        var isSomeEdge = this._isSomeEdge(a, b);\r\n        return {\r\n            columnCondition: isSomeEdge || this._normalizeCondition(a.left, b.left),\r\n            rowCondition: isSomeEdge || this._normalizeCondition(a.top, b.top),\r\n            cellPositionCondition: isSomeEdge || this._normalizeCondition(a.cellPosition, b.cellPosition)\r\n        }\r\n    }\r\n    _rowCondition(a, b) {\r\n        var conditions = this._getConditions(a, b);\r\n        return conditions.columnCondition || conditions.rowCondition\r\n    }\r\n    _columnCondition(a, b) {\r\n        var conditions = this._getConditions(a, b);\r\n        return conditions.rowCondition || conditions.columnCondition\r\n    }\r\n    _isSomeEdge(a, b) {\r\n        return a.i === b.i && a.j === b.j\r\n    }\r\n    _normalizeCondition(first, second) {\r\n        var result = first - second;\r\n        return Math.abs(result) > 1 ? result : 0\r\n    }\r\n    _isItemsCross(firstItem, secondItem) {\r\n        var areItemsInTheSameTable = !!firstItem.allDay === !!secondItem.allDay;\r\n        var areItemsAllDay = firstItem.allDay && secondItem.allDay;\r\n        if (areItemsInTheSameTable) {\r\n            var orientation = this._getOrientation(areItemsAllDay);\r\n            return this._checkItemsCrossing(firstItem, secondItem, orientation)\r\n        }\r\n        return false\r\n    }\r\n    _checkItemsCrossing(firstItem, secondItem, orientation) {\r\n        var firstItemSide1 = Math.floor(firstItem[orientation[0]]);\r\n        var firstItemSide2 = Math.floor(firstItem[orientation[1]]);\r\n        var secondItemSide1 = Math.ceil(secondItem[orientation[0]]);\r\n        var secondItemSide2 = Math.ceil(secondItem[orientation[1]]);\r\n        var isItemCross = Math.abs(firstItem[orientation[2]] - secondItem[orientation[2]]) <= 1;\r\n        return isItemCross && (firstItemSide1 <= secondItemSide1 && firstItemSide2 > secondItemSide1 || firstItemSide1 < secondItemSide2 && firstItemSide2 >= secondItemSide2 || firstItemSide1 === secondItemSide1 && firstItemSide2 === secondItemSide2)\r\n    }\r\n    _getOrientation(isAllDay) {\r\n        return isAllDay ? [\"left\", \"right\", \"top\"] : [\"top\", \"bottom\", \"left\"]\r\n    }\r\n    _getResultPositions(sortedArray) {\r\n        var result = [];\r\n        var i;\r\n        var sortedIndex = 0;\r\n        var currentItem;\r\n        var indexes;\r\n        var itemIndex;\r\n        var maxIndexInStack = 0;\r\n        var stack = {};\r\n        var findFreeIndex = (indexes, index) => {\r\n            var isFind = indexes.some(item => item === index);\r\n            if (isFind) {\r\n                return findFreeIndex(indexes, ++index)\r\n            }\r\n            return index\r\n        };\r\n        var createItem = (currentItem, index) => {\r\n            var currentIndex = index || 0;\r\n            return {\r\n                index: currentIndex,\r\n                i: currentItem.i,\r\n                j: currentItem.j,\r\n                left: currentItem.left,\r\n                right: currentItem.right,\r\n                top: currentItem.top,\r\n                bottom: currentItem.bottom,\r\n                allDay: currentItem.allDay,\r\n                sortedIndex: this._skipSortedIndex(currentIndex) ? null : sortedIndex++\r\n            }\r\n        };\r\n        var startNewStack = currentItem => {\r\n            stack.items = [createItem(currentItem)];\r\n            stack.left = currentItem.left;\r\n            stack.right = currentItem.right;\r\n            stack.top = currentItem.top;\r\n            stack.bottom = currentItem.bottom;\r\n            stack.allDay = currentItem.allDay\r\n        };\r\n        var pushItemsInResult = items => {\r\n            items.forEach(item => {\r\n                result.push({\r\n                    index: item.index,\r\n                    count: maxIndexInStack + 1,\r\n                    i: item.i,\r\n                    j: item.j,\r\n                    sortedIndex: item.sortedIndex\r\n                })\r\n            })\r\n        };\r\n        for (i = 0; i < sortedArray.length; i++) {\r\n            currentItem = sortedArray[i];\r\n            indexes = [];\r\n            if (!stack.items) {\r\n                startNewStack(currentItem)\r\n            } else if (this._isItemsCross(stack, currentItem)) {\r\n                stack.items.forEach(item => {\r\n                    if (this._isItemsCross(item, currentItem)) {\r\n                        indexes.push(item.index)\r\n                    }\r\n                });\r\n                itemIndex = indexes.length ? findFreeIndex(indexes, 0) : 0;\r\n                stack.items.push(createItem(currentItem, itemIndex));\r\n                maxIndexInStack = Math.max(itemIndex, maxIndexInStack);\r\n                stack.left = Math.min(stack.left, currentItem.left);\r\n                stack.right = Math.max(stack.right, currentItem.right);\r\n                stack.top = Math.min(stack.top, currentItem.top);\r\n                stack.bottom = Math.max(stack.bottom, currentItem.bottom);\r\n                stack.allDay = currentItem.allDay\r\n            } else {\r\n                pushItemsInResult(stack.items);\r\n                stack = {};\r\n                startNewStack(currentItem);\r\n                maxIndexInStack = 0\r\n            }\r\n        }\r\n        if (stack.items) {\r\n            pushItemsInResult(stack.items)\r\n        }\r\n        return result.sort((a, b) => {\r\n            var columnCondition = a.j - b.j;\r\n            var rowCondition = a.i - b.i;\r\n            return rowCondition || columnCondition\r\n        })\r\n    }\r\n    _skipSortedIndex(index) {\r\n        return index > this._getMaxAppointmentCountPerCell() - 1\r\n    }\r\n    _findIndexByKey(arr, iKey, jKey, iValue, jValue) {\r\n        var result = 0;\r\n        for (var i = 0, len = arr.length; i < len; i++) {\r\n            if (arr[i][iKey] === iValue && arr[i][jKey] === jValue) {\r\n                result = i;\r\n                break\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getExtendedPositionMap(map, positions) {\r\n        var positionCounter = 0;\r\n        var result = [];\r\n        for (var i = 0, mapLength = map.length; i < mapLength; i++) {\r\n            var resultString = [];\r\n            for (var j = 0, itemLength = map[i].length; j < itemLength; j++) {\r\n                map[i][j].index = positions[positionCounter].index;\r\n                map[i][j].sortedIndex = positions[positionCounter].sortedIndex;\r\n                map[i][j].count = positions[positionCounter++].count;\r\n                resultString.push(map[i][j]);\r\n                this._checkLongCompactAppointment(map[i][j], resultString)\r\n            }\r\n            result.push(resultString)\r\n        }\r\n        return result\r\n    }\r\n    _checkLongCompactAppointment(item, result) {\r\n        this._splitLongCompactAppointment(item, result);\r\n        return result\r\n    }\r\n    _splitLongCompactAppointment(item, result) {\r\n        var appointmentCountPerCell = this._getMaxAppointmentCountPerCellByType(item.allDay);\r\n        var compactCount = 0;\r\n        if (void 0 !== appointmentCountPerCell && item.index > appointmentCountPerCell - 1) {\r\n            item.isCompact = true;\r\n            compactCount = this._getCompactAppointmentParts(item.width);\r\n            for (var k = 1; k < compactCount; k++) {\r\n                var compactPart = extend(true, {}, item);\r\n                compactPart.left = this._getCompactLeftCoordinate(item.left, k);\r\n                compactPart.columnIndex += k;\r\n                compactPart.sortedIndex = null;\r\n                result.push(compactPart)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _adjustDurationByDaylightDiff(duration, startDate, endDate) {\r\n        var daylightDiff = timeZoneUtils.getDaylightOffset(startDate, endDate);\r\n        return this._needAdjustDuration(daylightDiff) ? this._calculateDurationByDaylightDiff(duration, daylightDiff) : duration\r\n    }\r\n    _needAdjustDuration(diff) {\r\n        return 0 !== diff\r\n    }\r\n    _calculateDurationByDaylightDiff(duration, diff) {\r\n        return duration + diff * toMs(\"minute\")\r\n    }\r\n    _getCollectorLeftOffset(isAllDay) {\r\n        if (isAllDay || !this.isApplyCompactAppointmentOffset()) {\r\n            return 0\r\n        }\r\n        var dropDownButtonWidth = this.getDropDownAppointmentWidth(this.intervalCount, isAllDay);\r\n        var rightOffset = this._isCompactTheme() ? COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET : WEEK_VIEW_COLLECTOR_OFFSET;\r\n        return this.cellWidth - dropDownButtonWidth - rightOffset\r\n    }\r\n    _markAppointmentAsVirtual(coordinates) {\r\n        var isAllDay = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        var countFullWidthAppointmentInCell = this._getMaxAppointmentCountPerCellByType(isAllDay);\r\n        if (coordinates.count - countFullWidthAppointmentInCell > 0) {\r\n            var {\r\n                top: top,\r\n                left: left\r\n            } = coordinates;\r\n            var compactRender = this.isAdaptive || !isAllDay && this.supportCompactDropDownAppointments();\r\n            coordinates.virtual = {\r\n                left: left + this._getCollectorLeftOffset(isAllDay),\r\n                top: top,\r\n                width: this.getDropDownAppointmentWidth(this.intervalCount, isAllDay),\r\n                height: this.getDropDownAppointmentHeight(),\r\n                index: this._generateAppointmentCollectorIndex(coordinates, isAllDay),\r\n                isAllDay: isAllDay,\r\n                groupIndex: coordinates.groupIndex,\r\n                isCompact: compactRender\r\n            }\r\n        }\r\n    }\r\n    isApplyCompactAppointmentOffset() {\r\n        return this.supportCompactDropDownAppointments()\r\n    }\r\n    supportCompactDropDownAppointments() {\r\n        return true\r\n    }\r\n    _generateAppointmentCollectorIndex(_ref, isAllDay) {\r\n        var {\r\n            groupIndex: groupIndex,\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        } = _ref;\r\n        return \"\".concat(groupIndex, \"-\").concat(rowIndex, \"-\").concat(columnIndex, \"-\").concat(isAllDay)\r\n    }\r\n    _getMaxAppointmentCountPerCellByType(isAllDay) {\r\n        var appointmentCountPerCell = this._getMaxAppointmentCountPerCell();\r\n        if (isObject(appointmentCountPerCell)) {\r\n            return isAllDay ? appointmentCountPerCell.allDay : appointmentCountPerCell.simple\r\n        }\r\n        return appointmentCountPerCell\r\n    }\r\n    getDropDownAppointmentWidth(intervalCount, isAllDay) {\r\n        return this.getPositioningStrategy().getDropDownAppointmentWidth(intervalCount, isAllDay)\r\n    }\r\n    getDropDownAppointmentHeight() {\r\n        return this.getPositioningStrategy().getDropDownAppointmentHeight()\r\n    }\r\n    getDropDownButtonAdaptiveSize() {\r\n        return DROP_DOWN_BUTTON_ADAPTIVE_SIZE\r\n    }\r\n    getCollectorTopOffset(allDay) {\r\n        return this.getPositioningStrategy().getCollectorTopOffset(allDay)\r\n    }\r\n    getCollectorLeftOffset() {\r\n        return this.getPositioningStrategy().getCollectorLeftOffset()\r\n    }\r\n    getAppointmentDataCalculator() {}\r\n    getVerticalAppointmentHeight(cellHeight, currentAppointmentCountInCell, maxAppointmentsPerCell) {\r\n        var resultMaxAppointmentsPerCell = maxAppointmentsPerCell;\r\n        if (isNumeric(this.maxAppointmentsPerCell)) {\r\n            var dynamicAppointmentCountPerCell = this._getDynamicAppointmentCountPerCell();\r\n            var maxAppointmentCountDisplayedInCell = dynamicAppointmentCountPerCell.allDay || dynamicAppointmentCountPerCell;\r\n            var maxAppointmentsCount = Math.max(currentAppointmentCountInCell, maxAppointmentCountDisplayedInCell);\r\n            resultMaxAppointmentsPerCell = Math.min(maxAppointmentsCount, maxAppointmentsPerCell)\r\n        }\r\n        return cellHeight / resultMaxAppointmentsPerCell\r\n    }\r\n    _customizeCoordinates(coordinates, cellHeight, appointmentCountPerCell, topOffset, isAllDay) {\r\n        var {\r\n            index: index,\r\n            count: count\r\n        } = coordinates;\r\n        var appointmentHeight = this.getVerticalAppointmentHeight(cellHeight, count, appointmentCountPerCell);\r\n        var appointmentTop = coordinates.top + index * appointmentHeight;\r\n        var top = appointmentTop + topOffset;\r\n        var {\r\n            width: width\r\n        } = coordinates;\r\n        var {\r\n            left: left\r\n        } = coordinates;\r\n        if (coordinates.isCompact) {\r\n            this.isAdaptive && this._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\r\n            this._markAppointmentAsVirtual(coordinates, isAllDay)\r\n        }\r\n        return {\r\n            height: appointmentHeight,\r\n            width: width,\r\n            top: top,\r\n            left: left,\r\n            empty: this._isAppointmentEmpty(cellHeight, width)\r\n        }\r\n    }\r\n    _isAppointmentEmpty(height, width) {\r\n        return height < this._getAppointmentMinHeight() || width < this._getAppointmentMinWidth()\r\n    }\r\n    _calculateGeometryConfig(coordinates) {\r\n        var overlappingMode = this.maxAppointmentsPerCell;\r\n        var offsets = this._getOffsets();\r\n        var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\r\n        var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\r\n        var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\r\n        var maxHeight = this._getMaxHeight();\r\n        if (!isNumeric(appointmentCountPerCell)) {\r\n            appointmentCountPerCell = coordinates.count;\r\n            ratio = (maxHeight - offsets.unlimited) / maxHeight\r\n        }\r\n        var topOffset = (1 - ratio) * maxHeight;\r\n        if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\r\n            ratio = 1;\r\n            maxHeight -= appointmentDefaultOffset;\r\n            topOffset = appointmentDefaultOffset\r\n        }\r\n        return {\r\n            height: ratio * maxHeight,\r\n            appointmentCountPerCell: appointmentCountPerCell,\r\n            offset: topOffset\r\n        }\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {}\r\n    _getDefaultRatio(coordinates, appointmentCountPerCell) {}\r\n    _getOffsets() {}\r\n    _getMaxHeight() {}\r\n    _needVerifyItemSize() {\r\n        return false\r\n    }\r\n    _getMaxAppointmentCountPerCell() {\r\n        if (!this._maxAppointmentCountPerCell) {\r\n            var overlappingMode = this.maxAppointmentsPerCell;\r\n            var appointmentCountPerCell;\r\n            if (isNumeric(overlappingMode)) {\r\n                appointmentCountPerCell = overlappingMode\r\n            }\r\n            if (\"auto\" === overlappingMode) {\r\n                appointmentCountPerCell = this._getDynamicAppointmentCountPerCell()\r\n            }\r\n            if (\"unlimited\" === overlappingMode) {\r\n                appointmentCountPerCell = void 0\r\n            }\r\n            this._maxAppointmentCountPerCell = appointmentCountPerCell\r\n        }\r\n        return this._maxAppointmentCountPerCell\r\n    }\r\n    _getDynamicAppointmentCountPerCell() {\r\n        return this.getPositioningStrategy().getDynamicAppointmentCountPerCell()\r\n    }\r\n    allDaySupported() {\r\n        return false\r\n    }\r\n    _isCompactTheme() {\r\n        return \"compact\" === (currentTheme() || \"\").split(\".\").pop()\r\n    }\r\n    _getAppointmentDefaultOffset() {\r\n        return this.getPositioningStrategy().getAppointmentDefaultOffset()\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return this._getAppointmentHeightByTheme()\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return this._getAppointmentDefaultHeight()\r\n    }\r\n    _getAppointmentHeightByTheme() {\r\n        return this._isCompactTheme() ? COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT : APPOINTMENT_DEFAULT_HEIGHT\r\n    }\r\n    _getAppointmentDefaultWidth() {\r\n        return this.getPositioningStrategy()._getAppointmentDefaultWidth()\r\n    }\r\n    _getAppointmentMinWidth() {\r\n        return this._getAppointmentDefaultWidth()\r\n    }\r\n    _needVerticalGroupBounds(allDay) {\r\n        return false\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return false\r\n    }\r\n    getAppointmentDurationInMs(apptStartDate, apptEndDate, allDay) {\r\n        if (allDay) {\r\n            var appointmentDuration = apptEndDate.getTime() - apptStartDate.getTime();\r\n            var ceilQuantityOfDays = Math.ceil(appointmentDuration / toMs(\"day\"));\r\n            return ceilQuantityOfDays * this.visibleDayDuration\r\n        }\r\n        var msInHour = toMs(\"hour\");\r\n        var trimmedStartDate = dateUtils.trimTime(apptStartDate);\r\n        var trimmedEndDate = dateUtils.trimTime(apptEndDate);\r\n        var deltaDate = trimmedEndDate - trimmedStartDate;\r\n        var quantityOfDays = deltaDate / toMs(\"day\") + 1;\r\n        var dayVisibleHours = this.endDayHour - this.startDayHour;\r\n        var appointmentDayHours = dayVisibleHours * quantityOfDays;\r\n        var startHours = (apptStartDate - trimmedStartDate) / msInHour;\r\n        var apptStartDelta = Math.max(0, startHours - this.startDayHour);\r\n        var endHours = Math.max(0, (apptEndDate - trimmedEndDate) / msInHour - this.startDayHour);\r\n        var apptEndDelta = Math.max(0, dayVisibleHours - endHours);\r\n        var result = (appointmentDayHours - (apptStartDelta + apptEndDelta)) * msInHour;\r\n        return result\r\n    }\r\n    getPositionShift(timeShift, isAllDay) {\r\n        return {\r\n            top: timeShift * this.cellHeight,\r\n            left: 0,\r\n            cellPosition: 0\r\n        }\r\n    }\r\n}\r\nexport default BaseRenderingStrategy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}