{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/week.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../../../../core/utils/date\";\nimport dateLocalization from \"../../../../../../../localization/date\";\nimport { getCalculatedFirstDayOfWeek, getStartViewDateTimeOffset, getViewStartByOptions, setOptionHour } from \"./base\";\nimport timeZoneUtils from \"../../../../../../../ui/scheduler/utils.timeZone\";\nexport var getIntervalDuration = intervalCount => 7 * dateUtils.dateToMilliseconds(\"day\") * intervalCount;\nexport var getValidStartDate = (startDate, firstDayOfWeek) => startDate ? dateUtils.getFirstWeekDate(startDate, firstDayOfWeek) : void 0;\nexport var calculateStartViewDate = (currentDate, startDayHour, startDate, intervalDuration, firstDayOfWeekOption) => {\n  var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\n  var viewStart = getViewStartByOptions(startDate, currentDate, intervalDuration, getValidStartDate(startDate, firstDayOfWeek));\n  var firstViewDate = dateUtils.getFirstWeekDate(viewStart, firstDayOfWeek);\n  return setOptionHour(firstViewDate, startDayHour);\n};\nexport var calculateViewStartDate = (startDateOption, firstDayOfWeek) => {\n  var validFirstDayOfWeek = null !== firstDayOfWeek && void 0 !== firstDayOfWeek ? firstDayOfWeek : dateLocalization.firstDayOfWeekIndex();\n  return dateUtils.getFirstWeekDate(startDateOption, validFirstDayOfWeek);\n};\nvar getTimeCellDate = (rowIndex, date, startViewDate, cellDuration, startDayHour) => {\n  if (!timeZoneUtils.isTimezoneChangeInDate(date)) {\n    return date;\n  }\n  var startViewDateWithoutDST = timeZoneUtils.getDateWithoutTimezoneChange(startViewDate);\n  var result = new Date(startViewDateWithoutDST);\n  var timeCellDuration = Math.round(cellDuration);\n  var startViewDateOffset = getStartViewDateTimeOffset(startViewDate, startDayHour);\n  result.setMilliseconds(result.getMilliseconds() + timeCellDuration * rowIndex - startViewDateOffset);\n  return result;\n};\nexport var getTimePanelCellText = (rowIndex, date, startViewDate, cellDuration, startDayHour) => {\n  if (rowIndex % 2 === 0) {\n    var validDate = getTimeCellDate(rowIndex, date, startViewDate, cellDuration, startDayHour);\n    return dateLocalization.format(validDate, \"shorttime\");\n  }\n  return \"\";\n};","map":{"version":3,"names":["dateUtils","dateLocalization","getCalculatedFirstDayOfWeek","getStartViewDateTimeOffset","getViewStartByOptions","setOptionHour","timeZoneUtils","getIntervalDuration","intervalCount","dateToMilliseconds","getValidStartDate","startDate","firstDayOfWeek","getFirstWeekDate","calculateStartViewDate","currentDate","startDayHour","intervalDuration","firstDayOfWeekOption","viewStart","firstViewDate","calculateViewStartDate","startDateOption","validFirstDayOfWeek","firstDayOfWeekIndex","getTimeCellDate","rowIndex","date","startViewDate","cellDuration","isTimezoneChangeInDate","startViewDateWithoutDST","getDateWithoutTimezoneChange","result","Date","timeCellDuration","Math","round","startViewDateOffset","setMilliseconds","getMilliseconds","getTimePanelCellText","validDate","format"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/devextreme/esm/renovation/ui/scheduler/view_model/to_test/views/utils/week.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/week.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../../../../../core/utils/date\";\r\nimport dateLocalization from \"../../../../../../../localization/date\";\r\nimport {\r\n    getCalculatedFirstDayOfWeek,\r\n    getStartViewDateTimeOffset,\r\n    getViewStartByOptions,\r\n    setOptionHour\r\n} from \"./base\";\r\nimport timeZoneUtils from \"../../../../../../../ui/scheduler/utils.timeZone\";\r\nexport var getIntervalDuration = intervalCount => 7 * dateUtils.dateToMilliseconds(\"day\") * intervalCount;\r\nexport var getValidStartDate = (startDate, firstDayOfWeek) => startDate ? dateUtils.getFirstWeekDate(startDate, firstDayOfWeek) : void 0;\r\nexport var calculateStartViewDate = (currentDate, startDayHour, startDate, intervalDuration, firstDayOfWeekOption) => {\r\n    var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\r\n    var viewStart = getViewStartByOptions(startDate, currentDate, intervalDuration, getValidStartDate(startDate, firstDayOfWeek));\r\n    var firstViewDate = dateUtils.getFirstWeekDate(viewStart, firstDayOfWeek);\r\n    return setOptionHour(firstViewDate, startDayHour)\r\n};\r\nexport var calculateViewStartDate = (startDateOption, firstDayOfWeek) => {\r\n    var validFirstDayOfWeek = null !== firstDayOfWeek && void 0 !== firstDayOfWeek ? firstDayOfWeek : dateLocalization.firstDayOfWeekIndex();\r\n    return dateUtils.getFirstWeekDate(startDateOption, validFirstDayOfWeek)\r\n};\r\nvar getTimeCellDate = (rowIndex, date, startViewDate, cellDuration, startDayHour) => {\r\n    if (!timeZoneUtils.isTimezoneChangeInDate(date)) {\r\n        return date\r\n    }\r\n    var startViewDateWithoutDST = timeZoneUtils.getDateWithoutTimezoneChange(startViewDate);\r\n    var result = new Date(startViewDateWithoutDST);\r\n    var timeCellDuration = Math.round(cellDuration);\r\n    var startViewDateOffset = getStartViewDateTimeOffset(startViewDate, startDayHour);\r\n    result.setMilliseconds(result.getMilliseconds() + timeCellDuration * rowIndex - startViewDateOffset);\r\n    return result\r\n};\r\nexport var getTimePanelCellText = (rowIndex, date, startViewDate, cellDuration, startDayHour) => {\r\n    if (rowIndex % 2 === 0) {\r\n        var validDate = getTimeCellDate(rowIndex, date, startViewDate, cellDuration, startDayHour);\r\n        return dateLocalization.format(validDate, \"shorttime\")\r\n    }\r\n    return \"\"\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,sCAAsC;AAC5D,OAAOC,gBAAgB,MAAM,wCAAwC;AACrE,SACIC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,qBAAqB,EACrBC,aAAa,QACV,QAAQ;AACf,OAAOC,aAAa,MAAM,kDAAkD;AAC5E,OAAO,IAAIC,mBAAmB,GAAGC,aAAa,IAAI,CAAC,GAAGR,SAAS,CAACS,kBAAkB,CAAC,KAAK,CAAC,GAAGD,aAAa;AACzG,OAAO,IAAIE,iBAAiB,GAAGA,CAACC,SAAS,EAAEC,cAAc,KAAKD,SAAS,GAAGX,SAAS,CAACa,gBAAgB,CAACF,SAAS,EAAEC,cAAc,CAAC,GAAG,KAAK,CAAC;AACxI,OAAO,IAAIE,sBAAsB,GAAGA,CAACC,WAAW,EAAEC,YAAY,EAAEL,SAAS,EAAEM,gBAAgB,EAAEC,oBAAoB,KAAK;EAClH,IAAIN,cAAc,GAAGV,2BAA2B,CAACgB,oBAAoB,CAAC;EACtE,IAAIC,SAAS,GAAGf,qBAAqB,CAACO,SAAS,EAAEI,WAAW,EAAEE,gBAAgB,EAAEP,iBAAiB,CAACC,SAAS,EAAEC,cAAc,CAAC,CAAC;EAC7H,IAAIQ,aAAa,GAAGpB,SAAS,CAACa,gBAAgB,CAACM,SAAS,EAAEP,cAAc,CAAC;EACzE,OAAOP,aAAa,CAACe,aAAa,EAAEJ,YAAY,CAAC;AACrD,CAAC;AACD,OAAO,IAAIK,sBAAsB,GAAGA,CAACC,eAAe,EAAEV,cAAc,KAAK;EACrE,IAAIW,mBAAmB,GAAG,IAAI,KAAKX,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,GAAGA,cAAc,GAAGX,gBAAgB,CAACuB,mBAAmB,CAAC,CAAC;EACxI,OAAOxB,SAAS,CAACa,gBAAgB,CAACS,eAAe,EAAEC,mBAAmB,CAAC;AAC3E,CAAC;AACD,IAAIE,eAAe,GAAGA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,aAAa,EAAEC,YAAY,EAAEb,YAAY,KAAK;EACjF,IAAI,CAACV,aAAa,CAACwB,sBAAsB,CAACH,IAAI,CAAC,EAAE;IAC7C,OAAOA,IAAI;EACf;EACA,IAAII,uBAAuB,GAAGzB,aAAa,CAAC0B,4BAA4B,CAACJ,aAAa,CAAC;EACvF,IAAIK,MAAM,GAAG,IAAIC,IAAI,CAACH,uBAAuB,CAAC;EAC9C,IAAII,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACR,YAAY,CAAC;EAC/C,IAAIS,mBAAmB,GAAGnC,0BAA0B,CAACyB,aAAa,EAAEZ,YAAY,CAAC;EACjFiB,MAAM,CAACM,eAAe,CAACN,MAAM,CAACO,eAAe,CAAC,CAAC,GAAGL,gBAAgB,GAAGT,QAAQ,GAAGY,mBAAmB,CAAC;EACpG,OAAOL,MAAM;AACjB,CAAC;AACD,OAAO,IAAIQ,oBAAoB,GAAGA,CAACf,QAAQ,EAAEC,IAAI,EAAEC,aAAa,EAAEC,YAAY,EAAEb,YAAY,KAAK;EAC7F,IAAIU,QAAQ,GAAG,CAAC,KAAK,CAAC,EAAE;IACpB,IAAIgB,SAAS,GAAGjB,eAAe,CAACC,QAAQ,EAAEC,IAAI,EAAEC,aAAa,EAAEC,YAAY,EAAEb,YAAY,CAAC;IAC1F,OAAOf,gBAAgB,CAAC0C,MAAM,CAACD,SAAS,EAAE,WAAW,CAAC;EAC1D;EACA,OAAO,EAAE;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}