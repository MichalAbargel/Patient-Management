{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { AppointmentViewModelGenerator } from \"../../__internal/scheduler/appointments/m_view_model_generator\";\nimport { getGroupCount } from \"../../__internal/scheduler/resources/m_utils\";\nimport { getCellWidth, getCellHeight, getAllDayHeight } from \"./workspaces/helpers/positionHelper\";\nimport { getCellDuration } from \"../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getAppointmentRenderingStrategyName } from \"../../renovation/ui/scheduler/model/appointments\";\nclass AppointmentLayoutManager {\n  constructor(instance) {\n    this.instance = instance;\n    this.appointmentViewModel = new AppointmentViewModelGenerator();\n  }\n  get appointmentRenderingStrategyName() {\n    return getAppointmentRenderingStrategyName(this.instance.currentViewType);\n  }\n  getCellDimensions(options) {\n    if (this.instance._workSpace) {\n      return {\n        width: this.instance._workSpace.getCellWidth(),\n        height: this.instance._workSpace.getCellHeight(),\n        allDayHeight: this.instance._workSpace.getAllDayHeight()\n      };\n    }\n  }\n  _getRenderingStrategyOptions() {\n    var workspace = this.instance.getWorkSpace();\n    var {\n      virtualScrollingDispatcher: virtualScrollingDispatcher\n    } = this.instance.getWorkSpace();\n    var {\n      cellCountInsideLeftVirtualCell: cellCountInsideLeftVirtualCell,\n      cellCountInsideTopVirtualRow: cellCountInsideTopVirtualRow\n    } = virtualScrollingDispatcher;\n    var groupCount = getGroupCount(this.instance.option(\"loadedResources\"));\n    var DOMMetaData = workspace.getDOMElementsMetaData();\n    var allDayHeight = getAllDayHeight(workspace.option(\"showAllDayPanel\"), workspace._isVerticalGroupedWorkSpace(), DOMMetaData);\n    var rowCount = workspace._getRowCount();\n    var {\n      positionHelper: positionHelper,\n      viewDataProvider: viewDataProvider\n    } = workspace;\n    var visibleDayDuration = viewDataProvider.getVisibleDayDuration(workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\n    var cellDuration = getCellDuration(workspace.type, workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\n    return {\n      resources: this.instance.option(\"resources\"),\n      loadedResources: this.instance.option(\"loadedResources\"),\n      getAppointmentColor: this.instance.createGetAppointmentColor(),\n      dataAccessors: this.instance._dataAccessors,\n      isRenovatedAppointments: this.instance.option(\"isRenovatedAppointments\"),\n      appointmentRenderingStrategyName: this.appointmentRenderingStrategyName,\n      adaptivityEnabled: this.instance.option(\"adaptivityEnabled\"),\n      rtlEnabled: this.instance.option(\"rtlEnabled\"),\n      startDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\n      endDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\n      maxAppointmentsPerCell: this.instance._getCurrentViewOption(\"maxAppointmentsPerCell\"),\n      currentDate: this.instance.option(\"currentDate\"),\n      isVirtualScrolling: this.instance.isVirtualScrolling(),\n      leftVirtualCellCount: cellCountInsideLeftVirtualCell,\n      topVirtualCellCount: cellCountInsideTopVirtualRow,\n      intervalCount: workspace.option(\"intervalCount\"),\n      hoursInterval: workspace.option(\"hoursInterval\"),\n      showAllDayPanel: workspace.option(\"showAllDayPanel\"),\n      isGroupedAllDayPanel: workspace.isGroupedAllDayPanel(),\n      groups: this.instance._getCurrentViewOption(\"groups\"),\n      groupCount: groupCount,\n      rowCount: rowCount,\n      appointmentCountPerCell: this.instance.option(\"_appointmentCountPerCell\"),\n      appointmentOffset: this.instance.option(\"_appointmentOffset\"),\n      allowResizing: this.instance._allowResizing(),\n      allowAllDayResizing: this.instance._allowAllDayResizing(),\n      startViewDate: workspace.getStartViewDate(),\n      groupOrientation: workspace._getRealGroupOrientation(),\n      cellWidth: getCellWidth(DOMMetaData),\n      cellHeight: getCellHeight(DOMMetaData),\n      allDayHeight: allDayHeight,\n      resizableStep: positionHelper.getResizableStep(),\n      visibleDayDuration: visibleDayDuration,\n      allDayPanelMode: this.instance._getCurrentViewOption(\"allDayPanelMode\"),\n      timeZoneCalculator: this.instance.timeZoneCalculator,\n      timeZone: this.instance.option(\"timeZone\"),\n      firstDayOfWeek: this.instance.getFirstDayOfWeek(),\n      viewStartDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\n      viewEndDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\n      viewType: workspace.type,\n      endViewDate: workspace.getEndViewDate(),\n      positionHelper: positionHelper,\n      isGroupedByDate: workspace.isGroupedByDate(),\n      cellDuration: cellDuration,\n      cellDurationInMinutes: workspace.option(\"cellDuration\"),\n      viewDataProvider: workspace.viewDataProvider,\n      supportAllDayRow: workspace.supportAllDayRow(),\n      dateRange: workspace.getDateRange(),\n      intervalDuration: workspace.getIntervalDuration(),\n      allDayIntervalDuration: workspace.getIntervalDuration(true),\n      isVerticalGroupOrientation: workspace.isVerticalOrientation(),\n      DOMMetaData: DOMMetaData,\n      instance: this.instance,\n      agendaDuration: workspace.option(\"agendaDuration\")\n    };\n  }\n  createAppointmentsMap(items) {\n    var renderingStrategyOptions = this._getRenderingStrategyOptions();\n    var {\n      viewModel: viewModel,\n      positionMap: positionMap\n    } = this.appointmentViewModel.generate(items, renderingStrategyOptions);\n    this._positionMap = positionMap;\n    return viewModel;\n  }\n  _isDataChanged(data) {\n    var appointmentDataProvider = this.instance.appointmentDataProvider;\n    var updatedData = appointmentDataProvider.getUpdatedAppointment();\n    return updatedData === data || appointmentDataProvider.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value);\n  }\n  _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\n    return currentAppointment.needRepaint && sourceAppointment.needRemove;\n  }\n  _isSettingChanged(settings, sourceSetting) {\n    if (settings.length !== sourceSetting.length) {\n      return true;\n    }\n    var createSettingsToCompare = (settings, index) => {\n      var currentSetting = settings[index];\n      var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\n      var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\n      var columnIndex = currentSetting.columnIndex + leftVirtualCellCount;\n      var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\n      var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\n      var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\n      return _extends({}, currentSetting, {\n        columnIndex: columnIndex,\n        rowIndex: rowIndex,\n        positionByMap: void 0,\n        topVirtualCellCount: void 0,\n        leftVirtualCellCount: void 0,\n        leftVirtualWidth: void 0,\n        topVirtualHeight: void 0,\n        hMax: hMax,\n        vMax: vMax,\n        info: {}\n      });\n    };\n    for (var i = 0; i < settings.length; i++) {\n      var newSettings = createSettingsToCompare(settings, i);\n      var oldSettings = createSettingsToCompare(sourceSetting, i);\n      if (oldSettings) {\n        oldSettings.sortedIndex = newSettings.sortedIndex;\n      }\n      if (!equalByValue(newSettings, oldSettings)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\n    for (var i = 0; i < sourceAppointments.length; i++) {\n      var item = sourceAppointments[i];\n      if (item.itemData === currentAppointment.itemData) {\n        return item;\n      }\n    }\n    return null;\n  }\n  _getDeletedAppointments(currentAppointments, sourceAppointments) {\n    var result = [];\n    for (var i = 0; i < sourceAppointments.length; i++) {\n      var sourceAppointment = sourceAppointments[i];\n      var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\n      if (!currentAppointment) {\n        sourceAppointment.needRemove = true;\n        result.push(sourceAppointment);\n      }\n    }\n    return result;\n  }\n  getRepaintedAppointments(currentAppointments, sourceAppointments) {\n    if (0 === sourceAppointments.length || \"agenda\" === this.appointmentRenderingStrategyName) {\n      return currentAppointments;\n    }\n    currentAppointments.forEach(appointment => {\n      var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\n      if (sourceAppointment) {\n        var isDataChanged = this._isDataChanged(appointment.itemData);\n        var isSettingChanged = this._isSettingChanged(appointment.settings, sourceAppointment.settings);\n        var isAppointmentShouldAppear = this._isAppointmentShouldAppear(appointment, sourceAppointment);\n        appointment.needRepaint = isDataChanged || isSettingChanged || isAppointmentShouldAppear;\n      }\n    });\n    return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments));\n  }\n  getRenderingStrategyInstance() {\n    var renderingStrategy = this.appointmentViewModel.getRenderingStrategy();\n    if (!renderingStrategy) {\n      var options = this._getRenderingStrategyOptions();\n      this.appointmentViewModel.initRenderingStrategy(options);\n    }\n    return this.appointmentViewModel.getRenderingStrategy();\n  }\n}\nexport default AppointmentLayoutManager;","map":{"version":3,"names":["_extends","equalByValue","AppointmentViewModelGenerator","getGroupCount","getCellWidth","getCellHeight","getAllDayHeight","getCellDuration","getAppointmentRenderingStrategyName","AppointmentLayoutManager","constructor","instance","appointmentViewModel","appointmentRenderingStrategyName","currentViewType","getCellDimensions","options","_workSpace","width","height","allDayHeight","_getRenderingStrategyOptions","workspace","getWorkSpace","virtualScrollingDispatcher","cellCountInsideLeftVirtualCell","cellCountInsideTopVirtualRow","groupCount","option","DOMMetaData","getDOMElementsMetaData","_isVerticalGroupedWorkSpace","rowCount","_getRowCount","positionHelper","viewDataProvider","visibleDayDuration","getVisibleDayDuration","cellDuration","type","resources","loadedResources","getAppointmentColor","createGetAppointmentColor","dataAccessors","_dataAccessors","isRenovatedAppointments","adaptivityEnabled","rtlEnabled","startDayHour","_getCurrentViewOption","endDayHour","maxAppointmentsPerCell","currentDate","isVirtualScrolling","leftVirtualCellCount","topVirtualCellCount","intervalCount","hoursInterval","showAllDayPanel","isGroupedAllDayPanel","groups","appointmentCountPerCell","appointmentOffset","allowResizing","_allowResizing","allowAllDayResizing","_allowAllDayResizing","startViewDate","getStartViewDate","groupOrientation","_getRealGroupOrientation","cellWidth","cellHeight","resizableStep","getResizableStep","allDayPanelMode","timeZoneCalculator","timeZone","firstDayOfWeek","getFirstDayOfWeek","viewStartDayHour","viewEndDayHour","viewType","endViewDate","getEndViewDate","isGroupedByDate","cellDurationInMinutes","supportAllDayRow","dateRange","getDateRange","intervalDuration","getIntervalDuration","allDayIntervalDuration","isVerticalGroupOrientation","isVerticalOrientation","agendaDuration","createAppointmentsMap","items","renderingStrategyOptions","viewModel","positionMap","generate","_positionMap","_isDataChanged","data","appointmentDataProvider","updatedData","getUpdatedAppointment","getUpdatedAppointmentKeys","some","item","key","value","_isAppointmentShouldAppear","currentAppointment","sourceAppointment","needRepaint","needRemove","_isSettingChanged","settings","sourceSetting","length","createSettingsToCompare","index","currentSetting","columnIndex","rowIndex","hMax","reduced","vMax","positionByMap","leftVirtualWidth","topVirtualHeight","info","i","newSettings","oldSettings","sortedIndex","_getAssociatedSourceAppointment","sourceAppointments","itemData","_getDeletedAppointments","currentAppointments","result","push","getRepaintedAppointments","forEach","appointment","isDataChanged","isSettingChanged","isAppointmentShouldAppear","concat","getRenderingStrategyInstance","renderingStrategy","getRenderingStrategy","initRenderingStrategy"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/ui/scheduler/appointments.layout_manager.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    AppointmentViewModelGenerator\r\n} from \"../../__internal/scheduler/appointments/m_view_model_generator\";\r\nimport {\r\n    getGroupCount\r\n} from \"../../__internal/scheduler/resources/m_utils\";\r\nimport {\r\n    getCellWidth,\r\n    getCellHeight,\r\n    getAllDayHeight\r\n} from \"./workspaces/helpers/positionHelper\";\r\nimport {\r\n    getCellDuration\r\n} from \"../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    getAppointmentRenderingStrategyName\r\n} from \"../../renovation/ui/scheduler/model/appointments\";\r\nclass AppointmentLayoutManager {\r\n    constructor(instance) {\r\n        this.instance = instance;\r\n        this.appointmentViewModel = new AppointmentViewModelGenerator\r\n    }\r\n    get appointmentRenderingStrategyName() {\r\n        return getAppointmentRenderingStrategyName(this.instance.currentViewType)\r\n    }\r\n    getCellDimensions(options) {\r\n        if (this.instance._workSpace) {\r\n            return {\r\n                width: this.instance._workSpace.getCellWidth(),\r\n                height: this.instance._workSpace.getCellHeight(),\r\n                allDayHeight: this.instance._workSpace.getAllDayHeight()\r\n            }\r\n        }\r\n    }\r\n    _getRenderingStrategyOptions() {\r\n        var workspace = this.instance.getWorkSpace();\r\n        var {\r\n            virtualScrollingDispatcher: virtualScrollingDispatcher\r\n        } = this.instance.getWorkSpace();\r\n        var {\r\n            cellCountInsideLeftVirtualCell: cellCountInsideLeftVirtualCell,\r\n            cellCountInsideTopVirtualRow: cellCountInsideTopVirtualRow\r\n        } = virtualScrollingDispatcher;\r\n        var groupCount = getGroupCount(this.instance.option(\"loadedResources\"));\r\n        var DOMMetaData = workspace.getDOMElementsMetaData();\r\n        var allDayHeight = getAllDayHeight(workspace.option(\"showAllDayPanel\"), workspace._isVerticalGroupedWorkSpace(), DOMMetaData);\r\n        var rowCount = workspace._getRowCount();\r\n        var {\r\n            positionHelper: positionHelper,\r\n            viewDataProvider: viewDataProvider\r\n        } = workspace;\r\n        var visibleDayDuration = viewDataProvider.getVisibleDayDuration(workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\r\n        var cellDuration = getCellDuration(workspace.type, workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\r\n        return {\r\n            resources: this.instance.option(\"resources\"),\r\n            loadedResources: this.instance.option(\"loadedResources\"),\r\n            getAppointmentColor: this.instance.createGetAppointmentColor(),\r\n            dataAccessors: this.instance._dataAccessors,\r\n            isRenovatedAppointments: this.instance.option(\"isRenovatedAppointments\"),\r\n            appointmentRenderingStrategyName: this.appointmentRenderingStrategyName,\r\n            adaptivityEnabled: this.instance.option(\"adaptivityEnabled\"),\r\n            rtlEnabled: this.instance.option(\"rtlEnabled\"),\r\n            startDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\r\n            endDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\r\n            maxAppointmentsPerCell: this.instance._getCurrentViewOption(\"maxAppointmentsPerCell\"),\r\n            currentDate: this.instance.option(\"currentDate\"),\r\n            isVirtualScrolling: this.instance.isVirtualScrolling(),\r\n            leftVirtualCellCount: cellCountInsideLeftVirtualCell,\r\n            topVirtualCellCount: cellCountInsideTopVirtualRow,\r\n            intervalCount: workspace.option(\"intervalCount\"),\r\n            hoursInterval: workspace.option(\"hoursInterval\"),\r\n            showAllDayPanel: workspace.option(\"showAllDayPanel\"),\r\n            isGroupedAllDayPanel: workspace.isGroupedAllDayPanel(),\r\n            groups: this.instance._getCurrentViewOption(\"groups\"),\r\n            groupCount: groupCount,\r\n            rowCount: rowCount,\r\n            appointmentCountPerCell: this.instance.option(\"_appointmentCountPerCell\"),\r\n            appointmentOffset: this.instance.option(\"_appointmentOffset\"),\r\n            allowResizing: this.instance._allowResizing(),\r\n            allowAllDayResizing: this.instance._allowAllDayResizing(),\r\n            startViewDate: workspace.getStartViewDate(),\r\n            groupOrientation: workspace._getRealGroupOrientation(),\r\n            cellWidth: getCellWidth(DOMMetaData),\r\n            cellHeight: getCellHeight(DOMMetaData),\r\n            allDayHeight: allDayHeight,\r\n            resizableStep: positionHelper.getResizableStep(),\r\n            visibleDayDuration: visibleDayDuration,\r\n            allDayPanelMode: this.instance._getCurrentViewOption(\"allDayPanelMode\"),\r\n            timeZoneCalculator: this.instance.timeZoneCalculator,\r\n            timeZone: this.instance.option(\"timeZone\"),\r\n            firstDayOfWeek: this.instance.getFirstDayOfWeek(),\r\n            viewStartDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\r\n            viewEndDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\r\n            viewType: workspace.type,\r\n            endViewDate: workspace.getEndViewDate(),\r\n            positionHelper: positionHelper,\r\n            isGroupedByDate: workspace.isGroupedByDate(),\r\n            cellDuration: cellDuration,\r\n            cellDurationInMinutes: workspace.option(\"cellDuration\"),\r\n            viewDataProvider: workspace.viewDataProvider,\r\n            supportAllDayRow: workspace.supportAllDayRow(),\r\n            dateRange: workspace.getDateRange(),\r\n            intervalDuration: workspace.getIntervalDuration(),\r\n            allDayIntervalDuration: workspace.getIntervalDuration(true),\r\n            isVerticalGroupOrientation: workspace.isVerticalOrientation(),\r\n            DOMMetaData: DOMMetaData,\r\n            instance: this.instance,\r\n            agendaDuration: workspace.option(\"agendaDuration\")\r\n        }\r\n    }\r\n    createAppointmentsMap(items) {\r\n        var renderingStrategyOptions = this._getRenderingStrategyOptions();\r\n        var {\r\n            viewModel: viewModel,\r\n            positionMap: positionMap\r\n        } = this.appointmentViewModel.generate(items, renderingStrategyOptions);\r\n        this._positionMap = positionMap;\r\n        return viewModel\r\n    }\r\n    _isDataChanged(data) {\r\n        var appointmentDataProvider = this.instance.appointmentDataProvider;\r\n        var updatedData = appointmentDataProvider.getUpdatedAppointment();\r\n        return updatedData === data || appointmentDataProvider.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value)\r\n    }\r\n    _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\r\n        return currentAppointment.needRepaint && sourceAppointment.needRemove\r\n    }\r\n    _isSettingChanged(settings, sourceSetting) {\r\n        if (settings.length !== sourceSetting.length) {\r\n            return true\r\n        }\r\n        var createSettingsToCompare = (settings, index) => {\r\n            var currentSetting = settings[index];\r\n            var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\r\n            var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\r\n            var columnIndex = currentSetting.columnIndex + leftVirtualCellCount;\r\n            var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\r\n            var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\r\n            var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\r\n            return _extends({}, currentSetting, {\r\n                columnIndex: columnIndex,\r\n                rowIndex: rowIndex,\r\n                positionByMap: void 0,\r\n                topVirtualCellCount: void 0,\r\n                leftVirtualCellCount: void 0,\r\n                leftVirtualWidth: void 0,\r\n                topVirtualHeight: void 0,\r\n                hMax: hMax,\r\n                vMax: vMax,\r\n                info: {}\r\n            })\r\n        };\r\n        for (var i = 0; i < settings.length; i++) {\r\n            var newSettings = createSettingsToCompare(settings, i);\r\n            var oldSettings = createSettingsToCompare(sourceSetting, i);\r\n            if (oldSettings) {\r\n                oldSettings.sortedIndex = newSettings.sortedIndex\r\n            }\r\n            if (!equalByValue(newSettings, oldSettings)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var item = sourceAppointments[i];\r\n            if (item.itemData === currentAppointment.itemData) {\r\n                return item\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    _getDeletedAppointments(currentAppointments, sourceAppointments) {\r\n        var result = [];\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var sourceAppointment = sourceAppointments[i];\r\n            var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\r\n            if (!currentAppointment) {\r\n                sourceAppointment.needRemove = true;\r\n                result.push(sourceAppointment)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    getRepaintedAppointments(currentAppointments, sourceAppointments) {\r\n        if (0 === sourceAppointments.length || \"agenda\" === this.appointmentRenderingStrategyName) {\r\n            return currentAppointments\r\n        }\r\n        currentAppointments.forEach(appointment => {\r\n            var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\r\n            if (sourceAppointment) {\r\n                var isDataChanged = this._isDataChanged(appointment.itemData);\r\n                var isSettingChanged = this._isSettingChanged(appointment.settings, sourceAppointment.settings);\r\n                var isAppointmentShouldAppear = this._isAppointmentShouldAppear(appointment, sourceAppointment);\r\n                appointment.needRepaint = isDataChanged || isSettingChanged || isAppointmentShouldAppear\r\n            }\r\n        });\r\n        return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments))\r\n    }\r\n    getRenderingStrategyInstance() {\r\n        var renderingStrategy = this.appointmentViewModel.getRenderingStrategy();\r\n        if (!renderingStrategy) {\r\n            var options = this._getRenderingStrategyOptions();\r\n            this.appointmentViewModel.initRenderingStrategy(options)\r\n        }\r\n        return this.appointmentViewModel.getRenderingStrategy()\r\n    }\r\n}\r\nexport default AppointmentLayoutManager;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}