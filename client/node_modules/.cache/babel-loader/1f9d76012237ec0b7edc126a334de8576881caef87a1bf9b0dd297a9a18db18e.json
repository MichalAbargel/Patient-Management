{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michal Abargel\\\\Desktop\\\\FULLSTACK_PROJECTS\\\\PrivateLessones\\\\PL\\\\client\\\\gui\\\\src\\\\components\\\\Calendar\\\\UserCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport Scheduler, { Editing, Resource } from \"devextreme-react/scheduler\";\n//const STATUSES = [\"Pending\", \"Approved\",\"Denied\", \"Done\", \"Cancelled\", \"Available\"];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STATUS_COLORS = {\n  Available: \"#09b4e8\",\n  Pending: \"#f0fc7c\",\n  Approved: \"#78eb8f\",\n  Done: \"#097507\",\n  Denied: \"grey\",\n  Cancelled: \"red\"\n};\nconst statuses = [{\n  id: \"Available\",\n  color: STATUS_COLORS[\"Available\"]\n}, {\n  id: \"Approved\",\n  color: STATUS_COLORS[\"Approved\"]\n}, {\n  id: \"Pending\",\n  color: STATUS_COLORS[\"Pending\"]\n}, {\n  id: \"Done\",\n  color: STATUS_COLORS[\"Done\"]\n}, {\n  id: \"Cancelled\",\n  color: STATUS_COLORS[\"Cancelled\"]\n}, {\n  id: \"Denied\",\n  color: STATUS_COLORS[\"Denied\"]\n}];\nconst Legend = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(STATUS_COLORS).map(([status, color]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, status, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = Legend;\nconst UserCalendar = ({\n  userDetails\n}) => {\n  _s();\n  const [abilities, setAbilities] = useState([]);\n  const scheduler = useRef(null);\n  const [appointments, setAppointments] = useState([]);\n  const [lessonInitialLoadComplete, setlessonInitialLoadComplete] = useState(false);\n  const [lessonAbilityInitialLoadComplete, setlessonAbilityInitialLoadComplete] = useState(false);\n  const [timeAbilityInitialLoadComplete, settimeAbilityInitialLoadComplete] = useState(false);\n  const [user] = useState(userDetails);\n  const isReadOnly = user.user_type === \"student\";\n  const appointmentRender = model => {\n    const {\n      appointmentData\n    } = model;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [user.user_type !== \"student\" && appointmentData.status && appointmentData.status !== \"Available\" && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Student name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), \" \", appointmentData.student_name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), user.user_type !== \"teacher\" && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Teacher name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), \" \", appointmentData.teacher_name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Subject:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), \" \", appointmentData.lesson_type_text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  };\n  const fetchLessonsData = async () => {\n    try {\n      const response = await fetch(`https://privatelessonsserver.azurewebsites.net/api/lessons/actual/${user.user_id}/${user.user_type}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      // Update the 'items' state with the fetched data.\n      if (response.status === 200) {\n        const data = await response.json();\n        const currentDate = new Date();\n        const newAppointments = data.map(appointment => {\n          let method = appointment.frontal === 1 ? \"frontal\" : \"zoom\";\n          if (appointment.frontal === 1 && appointment.zoom === 1) {\n            method = \"frontal/zoom\";\n          }\n          const formattedAppointment = {\n            student_name: appointment.student_name,\n            teacher_name: appointment.teacher_name,\n            student_phone: appointment.student_phone,\n            teacher_phone: appointment.teacher_phone,\n            student_email: appointment.student_email,\n            teacher_email: appointment.teacher_email,\n            subject: appointment.subject,\n            startDate: appointment.b_time,\n            endDate: appointment.e_time,\n            isEditable: new Date(appointment.b_time) < currentDate,\n            status: appointment.status,\n            id: `l${appointment.lesson_id}`,\n            paid: appointment.paid_up,\n            cost: appointment.lesson_cost,\n            type: method,\n            subject_type: appointment.subject_type,\n            subject_units: appointment.subject_units,\n            lesson_type_text: `${appointment.subject} ${appointment.subject_units} Units (${appointment.subject_type})`,\n            lesson_ability_id: appointment.lesson_ability_id\n          };\n          return formattedAppointment;\n        });\n        setAppointments(prevAppointments => [...prevAppointments, ...newAppointments]);\n        setlessonInitialLoadComplete(true);\n      } else {\n        // console.error(\"Error fetching data:\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const fetchLessonAbilities = async () => {\n    // Fetch teacher abilities from the server\n    fetch(`https://privatelessonsserver.azurewebsites.net/api/abilities/${user.user_id}`).then(response => response.json()).then(data => {\n      if (data.length) {\n        setAbilities(data.map(ability => {\n          return {\n            lesson_ability_id: ability.lesson_ability_id,\n            cost: ability.cost,\n            lesson_type_text: `${ability.subject_name} ${ability.units} Units (${ability.type})`,\n            subject: ability.subject_name,\n            units: ability.units,\n            type: ability.type,\n            subject_id: ability.subject_id\n          };\n        })); // Update the state with the fetched data\n\n        if (abilities.length) {\n          setlessonAbilityInitialLoadComplete(true);\n        }\n      } else {\n        alert(\"Please enter Lesson Abilities!\");\n      }\n    }).catch(error => {\n      // console.error(\"Error fetching teacher abilities:\", error);\n    });\n  };\n  const fetchTimeAbilities = async () => {\n    try {\n      const response = await fetch(`https://privatelessonsserver.azurewebsites.net/api/timeAbilities/${user.user_id}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const responseData = await response.json();\n        if (responseData.length > 0) {\n          // Use length to check if the array is not empty\n          responseData.forEach(element => {\n            let method = element.frontal === 1 ? \"frontal\" : \"zoom\";\n            if (element.frontal === 1 && element.zoom === 1) {\n              method = \"frontal/zoom\";\n            }\n            element.status = \"Available\";\n            element.startDate = element.start_time;\n            element.endDate = element.end_time;\n            element.id = `t${element.time_ability_id}`;\n            element.type = method;\n            element.cost = element.lesson_cost;\n            element.isEditable = true;\n            element.lesson_type_text = `${element.subject} ${element.units} Units (${element.subject_type})`;\n          });\n          setAppointments(prevAppointments => [...prevAppointments, ...responseData]);\n        }\n        settimeAbilityInitialLoadComplete(true);\n      } else {\n        // console.log(\"Failed to load teacherOptions\");\n      }\n    } catch (error) {\n      // console.error(\"Error fetching data:\", error);\n    }\n  };\n  useEffect(() => {\n    if (!lessonInitialLoadComplete) {\n      fetchLessonsData();\n    }\n    if (!timeAbilityInitialLoadComplete && user.user_type !== \"student\") {\n      fetchTimeAbilities();\n    }\n    if (!lessonAbilityInitialLoadComplete && user.user_type !== \"student\") {\n      fetchLessonAbilities();\n    }\n  }, []);\n  const doesOverlap = useCallback((appointment1, appointment2, newAppointment = false) => {\n    return (newAppointment || appointment1.id !== appointment2.id) && new Date(appointment1.startDate) < new Date(appointment2.endDate) && new Date(appointment2.startDate) < new Date(appointment1.endDate);\n  }, []);\n  const onAppointmentFormOpening = useCallback(e => {\n    const form = e.form;\n    let formItems = form.option(\"items\");\n    e.popup.option(\"showTitle\", true);\n    e.popup.option(\"title\", e.appointmentData.lesson_type_text ? e.appointmentData.lesson_type_text : \"Appointment Details\");\n    // Remove the repeat button or recurrence editor by filtering out the item\n    formItems = formItems.filter(item => item.name !== \"recurrenceGroup\");\n    formItems[0].items.forEach(group => {\n      if (group.items) {\n        group.items = group.items.filter(item => item.dataField !== \"repeat\" && item.dataField !== \"allDay\");\n      }\n    });\n    formItems[0].items.forEach(group => {\n      if (group.itemType === \"empty\") {\n        formItems[0].items.pop(group);\n      }\n    });\n    formItems[0].items.forEach(group => {\n      if (group.itemType === \"empty\") {\n        formItems[0].items.pop(group);\n      }\n    });\n    formItems[0].items = formItems[0].items.filter(item => item.dataField !== \"text\" && item.dataField !== \"description\");\n    if (!e.appointmentData.id) {\n      e.appointmentData.isEditable = true;\n      e.appointmentData.status = \"Available\";\n      e.appointmentData.paid = false;\n      e.appointmentData.cost = 0;\n      e.appointmentData.type = \"zoom\";\n      e.appointmentData.student_name = \"\";\n      e.appointmentData.teacher_name = \"\";\n      e.lesson_type_text = \"\";\n      e.appointmentData.id = 1;\n    }\n    formItems[0].items = formItems[0].items.filter(item => item.dataField !== \"student_name\" && item.dataField !== \"teacher_name\" && item.dataField !== \"teacher_phone\" && item.dataField !== \"teacher_email\" && item.dataField !== \"student_phone\" && item.dataField !== \"student_email\");\n    if (e.appointmentData.status !== \"Available\") {\n      if (user.user_type !== \"student\") {\n        formItems[0].items.push({\n          colSpan: 1,\n          label: {\n            text: \"Student Name\"\n          },\n          editorType: \"dxTextBox\",\n          dataField: \"student_name\",\n          editorOptions: {\n            readOnly: true,\n            value: e.appointmentData.student_name\n          }\n        });\n        formItems[0].items.push({\n          colSpan: 1,\n          label: {\n            text: \"Student Phone\"\n          },\n          editorType: \"dxTextBox\",\n          dataField: \"student_phone\",\n          editorOptions: {\n            readOnly: true,\n            value: e.appointmentData.student_phone\n          }\n        });\n        formItems[0].items.push({\n          colSpan: 1,\n          label: {\n            text: \"Student Email\"\n          },\n          editorType: \"dxTextBox\",\n          dataField: \"student_email\",\n          editorOptions: {\n            readOnly: true,\n            value: e.appointmentData.student_email\n          }\n        });\n      }\n      if (user.user_type !== \"teacher\") {\n        formItems[0].items.push({\n          colSpan: 1,\n          label: {\n            text: \"Teacher Name\"\n          },\n          editorType: \"dxTextBox\",\n          dataField: \"teacher_name\",\n          editorOptions: {\n            readOnly: true,\n            value: e.appointmentData.teacher_name\n          }\n        });\n        formItems[0].items.push({\n          colSpan: 1,\n          label: {\n            text: \"Teacher Phone\"\n          },\n          editorType: \"dxTextBox\",\n          dataField: \"teacher_phone\",\n          editorOptions: {\n            readOnly: true,\n            value: e.appointmentData.teacher_phone\n          }\n        });\n        formItems[0].items.push({\n          colSpan: 1,\n          label: {\n            text: \"Teacher Email\"\n          },\n          editorType: \"dxTextBox\",\n          dataField: \"teacher_email\",\n          editorOptions: {\n            readOnly: true,\n            value: e.appointmentData.teacher_email\n          }\n        });\n      }\n    }\n    formItems[0].items = formItems[0].items.filter(item => item.dataField !== \"status\");\n    formItems[0].items.push({\n      colSpan: 1,\n      label: {\n        text: \"Status\"\n      },\n      editorType: \"dxTextBox\",\n      dataField: \"status\",\n      editorOptions: {\n        readOnly: true,\n        value: e.appointmentData.status\n      }\n    });\n    formItems[0].items = formItems[0].items.filter(item => item.dataField !== \"cost\");\n    formItems[0].items.push({\n      colSpan: 1,\n      label: {\n        text: \"Cost\"\n      },\n      editorType: \"dxNumberBox\",\n      dataField: \"cost\",\n      editorOptions: {\n        value: e.appointmentData.cost,\n        readOnly: true\n      }\n    });\n    formItems[0].items = formItems[0].items.filter(item => item.dataField !== \"type\");\n    formItems[0].items.unshift({\n      colSpan: 1,\n      editorType: \"dxSelectBox\",\n      dataField: \"type\",\n      editorOptions: {\n        items: [\"zoom\", \"frontal\", \"frontal/zoom\"],\n        value: e.appointmentData.type\n      }\n    });\n    formItems[0].items = formItems[0].items.filter(item => item.dataField !== \"lesson_ability_id\");\n    if (user.user_type !== \"student\") {\n      formItems[0].items.unshift({\n        colSpan: 1,\n        label: {\n          text: \"Lesson\"\n        },\n        editorType: \"dxSelectBox\",\n        dataField: \"lesson_ability_id\",\n        editorOptions: {\n          items: abilities,\n          displayExpr: \"lesson_type_text\",\n          valueExpr: \"lesson_ability_id\",\n          onValueChanged: args => {\n            const selectedLesson = abilities.find(lesson => lesson.lesson_ability_id === args.value);\n            if (selectedLesson) {\n              e.appointmentData.cost = selectedLesson.cost;\n              e.appointmentData.lesson_type_text = selectedLesson.lesson_type_text;\n              // Directly update the cost editor's value without repainting the entire form\n              const costEditor = form.getEditor(\"cost\");\n              if (costEditor) {\n                costEditor.option(\"value\", selectedLesson.cost);\n              }\n            }\n          }\n        }\n      });\n    } else {\n      formItems[0].items.unshift({\n        colSpan: 1,\n        label: {\n          text: \"Lesson\"\n        },\n        editorType: \"dxTextBox\",\n        dataField: \"lesson_ability_id\",\n        editorOptions: {\n          value: e.appointmentData.lesson_type_text\n        }\n      });\n    }\n    formItems[0].items = formItems[0].items.filter(item => item.dataField !== \"paid\");\n    if (e.appointmentData.id && e.appointmentData.status !== \"Available\") {\n      formItems[0].items.push({\n        colSpan: 1,\n        label: {\n          text: \"Paid Up\"\n        },\n        editorType: \"dxCheckBox\",\n        dataField: \"paid\",\n        editorOptions: {\n          readOnly: (e.appointmentData.status === \"Approved\" || e.appointmentData.status === \"Done\") && user.user_type === \"teacher\" ? false : true,\n          value: e.appointmentData.paid\n        }\n      });\n    }\n    form.option(\"items\", formItems);\n    const updateEditorOptions = items => {\n      items.forEach(item => {\n        if (item.items) {\n          // Recursively handle groups\n          updateEditorOptions(item.items);\n        } else if (item.dataField && item.dataField !== \"status\" && item.dataField !== \"paid\" && item.dataField !== \"cost\") {\n          const currentEditorOptions = item.editorOptions || {};\n          item.editorOptions = {\n            ...currentEditorOptions,\n            readOnly: !e.appointmentData.isEditable\n          };\n        }\n      });\n    };\n    if (e.appointmentData.isEditable === false) {\n      updateEditorOptions(formItems);\n    }\n    form.option(\"items\", [...formItems]);\n    form.repaint();\n    if (user.user_type === \"student\") {\n      const toolbarItems = e.popup.option(\"toolbarItems\");\n      toolbarItems.forEach(item => {\n        if (item.shortcut === \"done\") {\n          item.options.visible = e.appointmentData.isEditable;\n        }\n      });\n      e.popup.option(\"toolbarItems\", toolbarItems);\n      form.repaint();\n    }\n  }, [user.user_type, abilities]);\n  const onAppointmentAdding = useCallback(e => {\n    e.cancel = true;\n    const newAppointment = e.appointmentData;\n    for (let appointment of appointments) {\n      if (doesOverlap(newAppointment, appointment, true)) {\n        e.cancel = true;\n        alert(\"Appointment overlaps with an existing appointment!\");\n        return;\n      }\n    }\n    if (newAppointment.type === \"zoom\") {\n      newAppointment.zoom = true;\n      newAppointment.frontal = false;\n    } else if (newAppointment.type === \"frontal\") {\n      newAppointment.zoom = false;\n      newAppointment.frontal = true;\n    } else if (newAppointment.type === \"frontal/zoom\") {\n      newAppointment.zoom = true;\n      newAppointment.frontal = true;\n    }\n    const selectedLesson = abilities.find(lesson => lesson.lesson_ability_id === newAppointment.lesson_ability_id);\n    newAppointment.status = \"Available\";\n    newAppointment.cost = selectedLesson.cost;\n    newAppointment.subject_name = selectedLesson.subject;\n    newAppointment.subject_type = selectedLesson.type;\n    newAppointment.subject_units = selectedLesson.units;\n    newAppointment.lesson_type_text = selectedLesson.lesson_type_text;\n    newAppointment.startDate = new Date(newAppointment.startDate).toLocaleString(\"sv\").replace(\" \", \"T\");\n    newAppointment.endDate = new Date(newAppointment.endDate).toLocaleString(\"sv\").replace(\" \", \"T\");\n    fetch(`https://privatelessonsserver.azurewebsites.net/api/timeAbilities`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newAppointment)\n    }).then(response => {\n      if (!response.ok) {\n        e.cancel = true;\n        throw new Error(`Request failed with status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      // Access the insertId from the response\n      newAppointment.id = `t${data.insertId}`;\n      newAppointment.time_ability_id = `t${data.insertId}`;\n      // Add the updated appointment to the state\n      setAppointments(prevAppointments => [...prevAppointments, newAppointment]);\n      // Cancel the original appointment\n      e.cancel = true;\n    }).catch(error => {\n      // Handle errors here\n      // console.error(\"Error:\", error.message);\n      // You can display an error message to the user or perform error-specific actions\n      e.cancel = true;\n    });\n  }, [doesOverlap, appointments, abilities]);\n  const setCancelAppointment = appointmentId => {\n    setAppointments(prevAppointments => prevAppointments.map(appointment => {\n      if (appointment.id === appointmentId) {\n        // Update the status to \"Cancelled\"\n        return {\n          ...appointment,\n          status: \"Cancelled\"\n        };\n      }\n      return appointment;\n    }));\n  };\n  const onAppointmentDeleting = useCallback(async e => {\n    e.cancel = true;\n    if (e.appointmentData.status === \"Done\") {\n      return;\n    } else if (e.appointmentData.status !== \"Available\") {\n      const userConfirmed = window.confirm(\"Are you sure you want to cancel this lesson?\");\n      if (!userConfirmed) {\n        e.cancel = true;\n        return;\n      }\n      try {\n        // Send an HTTP DELETE request to the server to delete the lesson\n        const response = await fetch(`https://privatelessonsserver.azurewebsites.net/api/lessons/${e.appointmentData.id.toString().slice(1)}`, {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (response.status === 200) {\n          // Lesson was successfully deleted\n          alert(`Lesson ${e.appointmentData.lesson_type_text} has been cancelled.`);\n          setCancelAppointment(e.appointmentData.id);\n        } else if (response.status === 404) {\n          // Lesson not found\n          // console.log(`Lesson ${e.appointmentData.id} not found.`);\n          e.cancel = true;\n          return;\n        } else {\n          // Handle other error cases\n          // console.error(\"An error occurred while cancelling the lesson.\");\n          e.cancel = true;\n          return;\n        }\n      } catch (error) {\n        // console.error(\"An error occurred:\", error);\n        e.cancel = true;\n        return;\n      }\n    } else {\n      fetch(`https://privatelessonsserver.azurewebsites.net/api/timeAbilities/${e.appointmentData.id.toString().slice(1)}`, {\n        method: \"DELETE\"\n      }).then(response => {\n        if (response.status === 200) {\n          // Time ability deleted successfully\n          alert(\"Appointment deleted successfully.\");\n          setAppointments(prevAppointments => {\n            return prevAppointments.filter(a => a.id.toString().slice(1) !== e.appointmentData.id.toString().slice(1));\n          });\n        } else if (response.status === 404) {\n          // Time ability not found\n          // console.log(\"Time ability not found.\");\n        } else if (response.status === 403) {\n          // Time ability in use and cannot be deleted\n          alert(\"Time ability is in use and cannot be deleted.\");\n          e.cancel = true;\n        } else {\n          // Handle other errors here\n          alert(\"Time ability is in use and cannot be deleted.\");\n          // console.log(\"An error occurred while deleting the time ability.\");\n          e.cancel = true;\n        }\n      }).catch(error => {\n        // Handle network errors here\n        // console.error(\"Network error:\", error);\n      });\n    }\n  }, [isReadOnly]);\n  const onAppointmentUpdating = useCallback(e => {\n    if (isReadOnly) {\n      e.cancel = true;\n      return;\n    }\n    if (e.newData.status === \"Available\") {\n      const selectedLesson = abilities.find(lesson => lesson.lesson_ability_id === e.newData.lesson_ability_id);\n      e.newData.cost = selectedLesson.cost;\n      e.newData.subject_name = selectedLesson.subject;\n      e.newData.subject_type = selectedLesson.type;\n      e.newData.subject_units = selectedLesson.units;\n      e.newData.lesson_type_text = selectedLesson.lesson_type_text;\n      for (let appointment of appointments) {\n        if (doesOverlap(e.newData, appointment)) {\n          e.cancel = true;\n          alert(\"Appointment overlaps with an existing appointment!\");\n          return;\n        }\n      }\n      const fullUpdatedAppointment = e.newData;\n      if (fullUpdatedAppointment.isEditable === false) {\n        e.cancel = true;\n        return;\n      }\n      if (fullUpdatedAppointment.type === \"zoom\") {\n        fullUpdatedAppointment.zoom = true;\n        fullUpdatedAppointment.frontal = false;\n      } else if (fullUpdatedAppointment.type === \"frontal\") {\n        fullUpdatedAppointment.zoom = false;\n        fullUpdatedAppointment.frontal = true;\n      } else if (fullUpdatedAppointment.type === \"frontal/zoom\") {\n        fullUpdatedAppointment.zoom = true;\n        fullUpdatedAppointment.frontal = true;\n      }\n      fullUpdatedAppointment.startDate = new Date(fullUpdatedAppointment.startDate).toLocaleString(\"sv\").replace(\" \", \"T\");\n      fullUpdatedAppointment.endDate = new Date(fullUpdatedAppointment.endDate).toLocaleString(\"sv\").replace(\" \", \"T\");\n      fetch(`https://privatelessonsserver.azurewebsites.net/api/timeAbilities/${fullUpdatedAppointment.id.toString().slice(1)}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(fullUpdatedAppointment)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`Request failed with status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        // Handle the successful response here\n        // console.log(\"Success:\", data.message);\n      }).catch(error => {\n        // Handle errors here\n        // console.error(\"Error:\", error.message);\n        e.cancel = true;\n      });\n    } else {\n      if (e.newData.startDate !== e.oldData.startDate || e.newData.endDate !== e.oldData.endDate) {\n        e.cancel = true;\n        return;\n      }\n      for (let appointment of appointments) {\n        if (doesOverlap(e.newData, appointment)) {\n          e.cancel = true;\n          alert(\"Appointment overlaps with an existing appointment!\");\n          return;\n        }\n      }\n      const fullUpdatedAppointment = e.newData;\n      // Make the PUT request using fetch\n      return fetch(`https://privatelessonsserver.azurewebsites.net/api/lessons/${fullUpdatedAppointment.id.toString().slice(1)}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          paid_up: fullUpdatedAppointment.paid,\n          status: fullUpdatedAppointment.status\n        })\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`Failed with status: ${response.status}`);\n        }\n        return response.text();\n      }).then(data => {\n        // console.log(data);\n      }).catch(error => {\n        // console.error(\"Error updating lesson:\", error);\n      });\n    }\n  }, [doesOverlap, appointments, isReadOnly, abilities]);\n  let views = [\"day\", \"week\", \"month\"];\n  const handleAddAppointmentClick = () => {\n    const appointmentData = {};\n    scheduler.current.instance.showAppointmentPopup(appointmentData, true);\n  };\n  const onCellClick = useCallback(e => {\n    if (isReadOnly || new Date(e.cellData.startDate) < new Date()) {\n      e.cancel = true;\n      return;\n    }\n  }, [isReadOnly]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Scheduler, {\n        ref: scheduler,\n        dataSource: appointments,\n        timeZone: \"Asia/Jerusalem\",\n        defaultCurrentDate: new Date(),\n        defaultCurrentView: \"day\",\n        views: views,\n        height: 600,\n        width: 1300,\n        firstDayOfWeek: 0,\n        startDayHour: 7,\n        endDayHour: 24,\n        showAllDayPanel: false,\n        crossScrollingEnabled: true,\n        cellDuration: 60,\n        appointmentRender: appointmentRender,\n        onAppointmentFormOpening: onAppointmentFormOpening,\n        onAppointmentAdding: onAppointmentAdding,\n        onAppointmentUpdating: onAppointmentUpdating,\n        onAppointmentDeleting: onAppointmentDeleting,\n        onCellClick: onCellClick\n        // groups={groups}\n        ,\n        children: /*#__PURE__*/_jsxDEV(Resource, {\n          fieldExpr: \"status\",\n          dataSource: statuses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editing, {\n        allowAdding: !isReadOnly,\n        allowDeleting: !isReadOnly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"200px\",\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 9\n      }, this), !isReadOnly && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddAppointmentClick,\n        children: \"Add Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 834,\n    columnNumber: 5\n  }, this);\n};\n_s(UserCalendar, \"DpXbtopTdlCs+ssWCpZv23jXDF4=\");\n_c2 = UserCalendar;\nexport default UserCalendar;\nvar _c, _c2;\n$RefreshReg$(_c, \"Legend\");\n$RefreshReg$(_c2, \"UserCalendar\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","Scheduler","Editing","Resource","jsxDEV","_jsxDEV","STATUS_COLORS","Available","Pending","Approved","Done","Denied","Cancelled","statuses","id","color","Legend","children","Object","entries","map","status","fileName","_jsxFileName","lineNumber","columnNumber","_c","UserCalendar","userDetails","_s","abilities","setAbilities","scheduler","appointments","setAppointments","lessonInitialLoadComplete","setlessonInitialLoadComplete","lessonAbilityInitialLoadComplete","setlessonAbilityInitialLoadComplete","timeAbilityInitialLoadComplete","settimeAbilityInitialLoadComplete","user","isReadOnly","user_type","appointmentRender","model","appointmentData","student_name","teacher_name","lesson_type_text","fetchLessonsData","response","fetch","user_id","method","headers","data","json","currentDate","Date","newAppointments","appointment","frontal","zoom","formattedAppointment","student_phone","teacher_phone","student_email","teacher_email","subject","startDate","b_time","endDate","e_time","isEditable","lesson_id","paid","paid_up","cost","lesson_cost","type","subject_type","subject_units","lesson_ability_id","prevAppointments","error","console","fetchLessonAbilities","then","length","ability","subject_name","units","subject_id","alert","catch","fetchTimeAbilities","ok","responseData","forEach","element","start_time","end_time","time_ability_id","doesOverlap","appointment1","appointment2","newAppointment","onAppointmentFormOpening","e","form","formItems","option","popup","filter","item","name","items","group","dataField","itemType","pop","push","colSpan","label","text","editorType","editorOptions","readOnly","value","unshift","displayExpr","valueExpr","onValueChanged","args","selectedLesson","find","lesson","costEditor","getEditor","updateEditorOptions","currentEditorOptions","repaint","toolbarItems","shortcut","options","visible","onAppointmentAdding","cancel","toLocaleString","replace","body","JSON","stringify","Error","insertId","setCancelAppointment","appointmentId","onAppointmentDeleting","userConfirmed","window","confirm","toString","slice","a","onAppointmentUpdating","newData","fullUpdatedAppointment","oldData","views","handleAddAppointmentClick","current","instance","showAppointmentPopup","onCellClick","cellData","ref","dataSource","timeZone","defaultCurrentDate","defaultCurrentView","height","width","firstDayOfWeek","startDayHour","endDayHour","showAllDayPanel","crossScrollingEnabled","cellDuration","fieldExpr","allowAdding","allowDeleting","style","padding","borderLeft","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/src/components/Calendar/UserCalendar.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport Scheduler, { Editing, Resource } from \"devextreme-react/scheduler\";\r\n//const STATUSES = [\"Pending\", \"Approved\",\"Denied\", \"Done\", \"Cancelled\", \"Available\"];\r\n\r\nconst STATUS_COLORS = {\r\n  Available: \"#09b4e8\",\r\n  Pending: \"#f0fc7c\",\r\n  Approved: \"#78eb8f\",\r\n  Done: \"#097507\",\r\n  Denied: \"grey\",\r\n  Cancelled: \"red\",\r\n};\r\nconst statuses = [\r\n  { id: \"Available\", color: STATUS_COLORS[\"Available\"] },\r\n  { id: \"Approved\", color: STATUS_COLORS[\"Approved\"] },\r\n  { id: \"Pending\", color: STATUS_COLORS[\"Pending\"] },\r\n  { id: \"Done\", color: STATUS_COLORS[\"Done\"] },\r\n  { id: \"Cancelled\", color: STATUS_COLORS[\"Cancelled\"] },\r\n  { id: \"Denied\", color: STATUS_COLORS[\"Denied\"] },\r\n];\r\n\r\nconst Legend = () => {\r\n  return (\r\n    <div>\r\n      {/* <h4>Legend</h4> */}\r\n      {Object.entries(STATUS_COLORS).map(([status, color]) => (\r\n        <div\r\n          key={status}\r\n        >\r\n          <div\r\n          ></div>\r\n          <span>{status}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserCalendar = ({ userDetails }) => {\r\n  const [abilities, setAbilities] = useState([]);\r\n  const scheduler = useRef(null);\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [lessonInitialLoadComplete, setlessonInitialLoadComplete] =\r\n    useState(false);\r\n  const [\r\n    lessonAbilityInitialLoadComplete,\r\n    setlessonAbilityInitialLoadComplete,\r\n  ] = useState(false);\r\n  const [timeAbilityInitialLoadComplete, settimeAbilityInitialLoadComplete] =\r\n    useState(false);\r\n  const [user] = useState(userDetails);\r\n\r\n  const isReadOnly = user.user_type === \"student\";\r\n\r\n  const appointmentRender = (model) => {\r\n    const { appointmentData } = model;\r\n    return (\r\n      <div>\r\n        {user.user_type !== \"student\" &&\r\n          appointmentData.status &&\r\n          appointmentData.status !== \"Available\" && (\r\n            <span>\r\n              <strong>Student name:</strong> {appointmentData.student_name}{\" \"}\r\n            </span>\r\n          )}\r\n        {user.user_type !== \"teacher\" && (\r\n          <span>\r\n            <strong>Teacher name:</strong> {appointmentData.teacher_name}{\" \"}\r\n          </span>\r\n        )}\r\n\r\n        <span>\r\n          <strong>Subject:</strong> {appointmentData.lesson_type_text}\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const fetchLessonsData = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://privatelessonsserver.azurewebsites.net/api/lessons/actual/${user.user_id}/${user.user_type}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      // Update the 'items' state with the fetched data.\r\n      if (response.status === 200) {\r\n        const data = await response.json();\r\n        const currentDate = new Date();\r\n\r\n        const newAppointments = data.map((appointment) => {\r\n          let method = appointment.frontal === 1 ? \"frontal\" : \"zoom\";\r\n          if (appointment.frontal === 1 && appointment.zoom === 1) {\r\n            method = \"frontal/zoom\";\r\n          }\r\n          const formattedAppointment = {\r\n            student_name: appointment.student_name,\r\n            teacher_name: appointment.teacher_name,\r\n            student_phone: appointment.student_phone,\r\n            teacher_phone: appointment.teacher_phone,\r\n            student_email: appointment.student_email,\r\n            teacher_email: appointment.teacher_email,\r\n            subject: appointment.subject,\r\n            startDate: appointment.b_time,\r\n            endDate: appointment.e_time,\r\n            isEditable: new Date(appointment.b_time) < currentDate,\r\n            status: appointment.status,\r\n            id: `l${appointment.lesson_id}`,\r\n            paid: appointment.paid_up,\r\n            cost: appointment.lesson_cost,\r\n            type: method,\r\n            subject_type: appointment.subject_type,\r\n            subject_units: appointment.subject_units,\r\n            lesson_type_text: `${appointment.subject} ${appointment.subject_units} Units (${appointment.subject_type})`,\r\n            lesson_ability_id: appointment.lesson_ability_id,\r\n          };\r\n          return formattedAppointment;\r\n        });\r\n        setAppointments((prevAppointments) => [\r\n          ...prevAppointments,\r\n          ...newAppointments,\r\n        ]);\r\n        setlessonInitialLoadComplete(true);\r\n      } else {\r\n        // console.error(\"Error fetching data:\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n  const fetchLessonAbilities = async () => {\r\n    // Fetch teacher abilities from the server\r\n    fetch(\r\n      `https://privatelessonsserver.azurewebsites.net/api/abilities/${user.user_id}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.length) {\r\n          setAbilities(\r\n            data.map((ability) => {\r\n              return {\r\n                lesson_ability_id: ability.lesson_ability_id,\r\n                cost: ability.cost,\r\n                lesson_type_text: `${ability.subject_name} ${ability.units} Units (${ability.type})`,\r\n                subject: ability.subject_name,\r\n                units: ability.units,\r\n                type: ability.type,\r\n                subject_id: ability.subject_id,\r\n              };\r\n            })\r\n          ); // Update the state with the fetched data\r\n\r\n          if (abilities.length) {\r\n            setlessonAbilityInitialLoadComplete(true);\r\n          }\r\n        } else {\r\n          alert(\"Please enter Lesson Abilities!\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // console.error(\"Error fetching teacher abilities:\", error);\r\n      });\r\n  };\r\n\r\n  const fetchTimeAbilities = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://privatelessonsserver.azurewebsites.net/api/timeAbilities/${user.user_id}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        if (responseData.length > 0) {\r\n          // Use length to check if the array is not empty\r\n          responseData.forEach((element) => {\r\n            let method = element.frontal === 1 ? \"frontal\" : \"zoom\";\r\n            if (element.frontal === 1 && element.zoom === 1) {\r\n              method = \"frontal/zoom\";\r\n            }\r\n            element.status = \"Available\";\r\n            element.startDate = element.start_time;\r\n            element.endDate = element.end_time;\r\n            element.id = `t${element.time_ability_id}`;\r\n            element.type = method;\r\n            element.cost = element.lesson_cost;\r\n            element.isEditable = true;\r\n            element.lesson_type_text = `${element.subject} ${element.units} Units (${element.subject_type})`;\r\n          });\r\n          setAppointments((prevAppointments) => [\r\n            ...prevAppointments,\r\n            ...responseData,\r\n          ]);\r\n        }\r\n        settimeAbilityInitialLoadComplete(true);\r\n      } else {\r\n        // console.log(\"Failed to load teacherOptions\");\r\n      }\r\n    } catch (error) {\r\n      // console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!lessonInitialLoadComplete) {\r\n      fetchLessonsData();\r\n    }\r\n    if (!timeAbilityInitialLoadComplete && user.user_type !== \"student\") {\r\n      fetchTimeAbilities();\r\n    }\r\n    if (!lessonAbilityInitialLoadComplete && user.user_type !== \"student\") {\r\n      fetchLessonAbilities();\r\n    }\r\n  }, []);\r\n\r\n  const doesOverlap = useCallback(\r\n    (appointment1, appointment2, newAppointment = false) => {\r\n      return (\r\n        (newAppointment || appointment1.id !== appointment2.id) &&\r\n        new Date(appointment1.startDate) < new Date(appointment2.endDate) &&\r\n        new Date(appointment2.startDate) < new Date(appointment1.endDate)\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  const onAppointmentFormOpening = useCallback(\r\n    (e) => {\r\n      const form = e.form;\r\n      let formItems = form.option(\"items\");\r\n\r\n      e.popup.option(\"showTitle\", true);\r\n      e.popup.option(\r\n        \"title\",\r\n        e.appointmentData.lesson_type_text\r\n          ? e.appointmentData.lesson_type_text\r\n          : \"Appointment Details\"\r\n      );\r\n      // Remove the repeat button or recurrence editor by filtering out the item\r\n      formItems = formItems.filter((item) => item.name !== \"recurrenceGroup\");\r\n      formItems[0].items.forEach((group) => {\r\n        if (group.items) {\r\n          group.items = group.items.filter(\r\n            (item) => item.dataField !== \"repeat\" && item.dataField !== \"allDay\"\r\n          );\r\n        }\r\n      });\r\n      formItems[0].items.forEach((group) => {\r\n        if (group.itemType === \"empty\") {\r\n          formItems[0].items.pop(group);\r\n        }\r\n      });\r\n      formItems[0].items.forEach((group) => {\r\n        if (group.itemType === \"empty\") {\r\n          formItems[0].items.pop(group);\r\n        }\r\n      });\r\n      formItems[0].items = formItems[0].items.filter(\r\n        (item) => item.dataField !== \"text\" && item.dataField !== \"description\"\r\n      );\r\n\r\n      if (!e.appointmentData.id) {\r\n        e.appointmentData.isEditable = true;\r\n        e.appointmentData.status = \"Available\";\r\n        e.appointmentData.paid = false;\r\n        e.appointmentData.cost = 0;\r\n        e.appointmentData.type = \"zoom\";\r\n        e.appointmentData.student_name = \"\";\r\n        e.appointmentData.teacher_name = \"\";\r\n        e.lesson_type_text = \"\";\r\n        e.appointmentData.id = 1;\r\n      }\r\n\r\n      formItems[0].items = formItems[0].items.filter(\r\n        (item) =>\r\n          item.dataField !== \"student_name\" &&\r\n          item.dataField !== \"teacher_name\" &&\r\n          item.dataField !== \"teacher_phone\" &&\r\n          item.dataField !== \"teacher_email\" &&\r\n          item.dataField !== \"student_phone\" &&\r\n          item.dataField !== \"student_email\"\r\n      );\r\n\r\n      if (e.appointmentData.status !== \"Available\") {\r\n        if (user.user_type !== \"student\") {\r\n          formItems[0].items.push({\r\n            colSpan: 1,\r\n            label: { text: \"Student Name\" },\r\n            editorType: \"dxTextBox\",\r\n            dataField: \"student_name\",\r\n            editorOptions: {\r\n              readOnly: true,\r\n              value: e.appointmentData.student_name,\r\n            },\r\n          });\r\n          formItems[0].items.push({\r\n            colSpan: 1,\r\n            label: { text: \"Student Phone\" },\r\n            editorType: \"dxTextBox\",\r\n            dataField: \"student_phone\",\r\n            editorOptions: {\r\n              readOnly: true,\r\n              value: e.appointmentData.student_phone,\r\n            },\r\n          });\r\n          formItems[0].items.push({\r\n            colSpan: 1,\r\n            label: { text: \"Student Email\" },\r\n            editorType: \"dxTextBox\",\r\n            dataField: \"student_email\",\r\n            editorOptions: {\r\n              readOnly: true,\r\n              value: e.appointmentData.student_email,\r\n            },\r\n          });\r\n        }\r\n        if (user.user_type !== \"teacher\") {\r\n          formItems[0].items.push({\r\n            colSpan: 1,\r\n            label: { text: \"Teacher Name\" },\r\n            editorType: \"dxTextBox\",\r\n            dataField: \"teacher_name\",\r\n            editorOptions: {\r\n              readOnly: true,\r\n              value: e.appointmentData.teacher_name,\r\n            },\r\n          });\r\n          formItems[0].items.push({\r\n            colSpan: 1,\r\n            label: { text: \"Teacher Phone\" },\r\n            editorType: \"dxTextBox\",\r\n            dataField: \"teacher_phone\",\r\n            editorOptions: {\r\n              readOnly: true,\r\n              value: e.appointmentData.teacher_phone,\r\n            },\r\n          });\r\n          formItems[0].items.push({\r\n            colSpan: 1,\r\n            label: { text: \"Teacher Email\" },\r\n            editorType: \"dxTextBox\",\r\n            dataField: \"teacher_email\",\r\n            editorOptions: {\r\n              readOnly: true,\r\n              value: e.appointmentData.teacher_email,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      formItems[0].items = formItems[0].items.filter(\r\n        (item) => item.dataField !== \"status\"\r\n      );\r\n      formItems[0].items.push({\r\n        colSpan: 1,\r\n        label: { text: \"Status\" },\r\n        editorType: \"dxTextBox\",\r\n        dataField: \"status\",\r\n        editorOptions: {\r\n          readOnly: true,\r\n          value: e.appointmentData.status,\r\n        },\r\n      });\r\n\r\n      formItems[0].items = formItems[0].items.filter(\r\n        (item) => item.dataField !== \"cost\"\r\n      );\r\n      formItems[0].items.push({\r\n        colSpan: 1,\r\n        label: { text: \"Cost\" },\r\n        editorType: \"dxNumberBox\",\r\n        dataField: \"cost\",\r\n        editorOptions: {\r\n          value: e.appointmentData.cost,\r\n          readOnly: true,\r\n        },\r\n      });\r\n      formItems[0].items = formItems[0].items.filter(\r\n        (item) => item.dataField !== \"type\"\r\n      );\r\n      formItems[0].items.unshift({\r\n        colSpan: 1,\r\n        editorType: \"dxSelectBox\",\r\n        dataField: \"type\",\r\n        editorOptions: {\r\n          items: [\"zoom\", \"frontal\", \"frontal/zoom\"],\r\n          value: e.appointmentData.type,\r\n        },\r\n      });\r\n\r\n      formItems[0].items = formItems[0].items.filter(\r\n        (item) => item.dataField !== \"lesson_ability_id\"\r\n      );\r\n      if (user.user_type !== \"student\") {\r\n        formItems[0].items.unshift({\r\n          colSpan: 1,\r\n          label: { text: \"Lesson\" },\r\n          editorType: \"dxSelectBox\",\r\n          dataField: \"lesson_ability_id\",\r\n          editorOptions: {\r\n            items: abilities,\r\n            displayExpr: \"lesson_type_text\",\r\n            valueExpr: \"lesson_ability_id\",\r\n            onValueChanged: (args) => {\r\n              const selectedLesson = abilities.find(\r\n                (lesson) => lesson.lesson_ability_id === args.value\r\n              );\r\n\r\n              if (selectedLesson) {\r\n                e.appointmentData.cost = selectedLesson.cost;\r\n                e.appointmentData.lesson_type_text =\r\n                  selectedLesson.lesson_type_text;\r\n                // Directly update the cost editor's value without repainting the entire form\r\n                const costEditor = form.getEditor(\"cost\");\r\n                if (costEditor) {\r\n                  costEditor.option(\"value\", selectedLesson.cost);\r\n                }\r\n              }\r\n            },\r\n          },\r\n        });\r\n      } else {\r\n        formItems[0].items.unshift({\r\n          colSpan: 1,\r\n          label: { text: \"Lesson\" },\r\n          editorType: \"dxTextBox\",\r\n          dataField: \"lesson_ability_id\",\r\n          editorOptions: {\r\n            value: e.appointmentData.lesson_type_text,\r\n          },\r\n        });\r\n      }\r\n\r\n      formItems[0].items = formItems[0].items.filter(\r\n        (item) => item.dataField !== \"paid\"\r\n      );\r\n      if (e.appointmentData.id && e.appointmentData.status !== \"Available\") {\r\n        formItems[0].items.push({\r\n          colSpan: 1,\r\n          label: { text: \"Paid Up\" },\r\n          editorType: \"dxCheckBox\",\r\n          dataField: \"paid\",\r\n          editorOptions: {\r\n            readOnly:\r\n              (e.appointmentData.status === \"Approved\" ||\r\n                e.appointmentData.status === \"Done\") &&\r\n              user.user_type === \"teacher\"\r\n                ? false\r\n                : true,\r\n            value: e.appointmentData.paid,\r\n          },\r\n        });\r\n      }\r\n      form.option(\"items\", formItems);\r\n\r\n      const updateEditorOptions = (items) => {\r\n        items.forEach((item) => {\r\n          if (item.items) {\r\n            // Recursively handle groups\r\n            updateEditorOptions(item.items);\r\n          } else if (\r\n            item.dataField &&\r\n            item.dataField !== \"status\" &&\r\n            item.dataField !== \"paid\" &&\r\n            item.dataField !== \"cost\"\r\n          ) {\r\n            const currentEditorOptions = item.editorOptions || {};\r\n            item.editorOptions = {\r\n              ...currentEditorOptions,\r\n              readOnly: !e.appointmentData.isEditable,\r\n            };\r\n          }\r\n        });\r\n      };\r\n      if (e.appointmentData.isEditable === false) {\r\n        updateEditorOptions(formItems);\r\n      }\r\n\r\n      form.option(\"items\", [...formItems]);\r\n      form.repaint();\r\n\r\n      if (user.user_type === \"student\") {\r\n        const toolbarItems = e.popup.option(\"toolbarItems\");\r\n        toolbarItems.forEach((item) => {\r\n          if (item.shortcut === \"done\") {\r\n            item.options.visible = e.appointmentData.isEditable;\r\n          }\r\n        });\r\n        e.popup.option(\"toolbarItems\", toolbarItems);\r\n        form.repaint();\r\n      }\r\n\r\n    },\r\n    [user.user_type, abilities]\r\n  );\r\n\r\n  const onAppointmentAdding = useCallback(\r\n    (e) => {\r\n      e.cancel = true;\r\n      const newAppointment = e.appointmentData;\r\n      for (let appointment of appointments) {\r\n        if (doesOverlap(newAppointment, appointment, true)) {\r\n          e.cancel = true;\r\n          alert(\"Appointment overlaps with an existing appointment!\");\r\n          return;\r\n        }\r\n      }\r\n      if (newAppointment.type === \"zoom\") {\r\n        newAppointment.zoom = true;\r\n        newAppointment.frontal = false;\r\n      } else if (newAppointment.type === \"frontal\") {\r\n        newAppointment.zoom = false;\r\n        newAppointment.frontal = true;\r\n      } else if (newAppointment.type === \"frontal/zoom\") {\r\n        newAppointment.zoom = true;\r\n        newAppointment.frontal = true;\r\n      }\r\n      const selectedLesson = abilities.find(\r\n        (lesson) =>\r\n          lesson.lesson_ability_id === newAppointment.lesson_ability_id\r\n      );\r\n      newAppointment.status = \"Available\";\r\n      newAppointment.cost = selectedLesson.cost;\r\n      newAppointment.subject_name = selectedLesson.subject;\r\n      newAppointment.subject_type = selectedLesson.type;\r\n      newAppointment.subject_units = selectedLesson.units;\r\n      newAppointment.lesson_type_text = selectedLesson.lesson_type_text;\r\n      newAppointment.startDate = new Date(newAppointment.startDate)\r\n        .toLocaleString(\"sv\")\r\n        .replace(\" \", \"T\");\r\n      newAppointment.endDate = new Date(newAppointment.endDate)\r\n        .toLocaleString(\"sv\")\r\n        .replace(\" \", \"T\");\r\n\r\n      fetch(\r\n        `https://privatelessonsserver.azurewebsites.net/api/timeAbilities`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(newAppointment),\r\n        }\r\n      )\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            e.cancel = true;\r\n            throw new Error(`Request failed with status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          // Access the insertId from the response\r\n          newAppointment.id = `t${data.insertId}`;\r\n          newAppointment.time_ability_id = `t${data.insertId}`;\r\n          // Add the updated appointment to the state\r\n          setAppointments((prevAppointments) => [\r\n            ...prevAppointments,\r\n            newAppointment,\r\n          ]);\r\n          // Cancel the original appointment\r\n          e.cancel = true;\r\n        })\r\n        .catch((error) => {\r\n          // Handle errors here\r\n          // console.error(\"Error:\", error.message);\r\n          // You can display an error message to the user or perform error-specific actions\r\n          e.cancel = true;\r\n        });\r\n    },\r\n    [doesOverlap, appointments, abilities]\r\n  );\r\n  const setCancelAppointment = (appointmentId) => {\r\n    setAppointments((prevAppointments) =>\r\n      prevAppointments.map((appointment) => {\r\n        if (appointment.id === appointmentId) {\r\n          // Update the status to \"Cancelled\"\r\n          return {\r\n            ...appointment,\r\n            status: \"Cancelled\",\r\n          };\r\n        }\r\n        return appointment;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onAppointmentDeleting = useCallback(\r\n    async (e) => {\r\n      e.cancel = true;\r\n      if (e.appointmentData.status === \"Done\") {\r\n        return;\r\n      } else if (e.appointmentData.status !== \"Available\") {\r\n        const userConfirmed = window.confirm(\r\n          \"Are you sure you want to cancel this lesson?\"\r\n        );\r\n        if (!userConfirmed) {\r\n          e.cancel = true;\r\n          return;\r\n        }\r\n        try {\r\n          // Send an HTTP DELETE request to the server to delete the lesson\r\n          const response = await fetch(\r\n            `https://privatelessonsserver.azurewebsites.net/api/lessons/${e.appointmentData.id\r\n              .toString()\r\n              .slice(1)}`,\r\n            {\r\n              method: \"DELETE\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n\r\n          if (response.status === 200) {\r\n            // Lesson was successfully deleted\r\n            alert(\r\n              `Lesson ${e.appointmentData.lesson_type_text} has been cancelled.`\r\n            );\r\n            setCancelAppointment(e.appointmentData.id);\r\n          } else if (response.status === 404) {\r\n            // Lesson not found\r\n            // console.log(`Lesson ${e.appointmentData.id} not found.`);\r\n            e.cancel = true;\r\n            return;\r\n          } else {\r\n            // Handle other error cases\r\n            // console.error(\"An error occurred while cancelling the lesson.\");\r\n            e.cancel = true;\r\n            return;\r\n          }\r\n        } catch (error) {\r\n          // console.error(\"An error occurred:\", error);\r\n          e.cancel = true;\r\n          return;\r\n        }\r\n      } else {\r\n        fetch(\r\n          `https://privatelessonsserver.azurewebsites.net/api/timeAbilities/${e.appointmentData.id\r\n            .toString()\r\n            .slice(1)}`,\r\n          {\r\n            method: \"DELETE\",\r\n          }\r\n        )\r\n          .then((response) => {\r\n            if (response.status === 200) {\r\n              // Time ability deleted successfully\r\n              alert(\"Appointment deleted successfully.\");\r\n              setAppointments((prevAppointments) => {\r\n                return prevAppointments.filter(\r\n                  (a) =>\r\n                    a.id.toString().slice(1) !==\r\n                    e.appointmentData.id.toString().slice(1)\r\n                );\r\n              });\r\n            } else if (response.status === 404) {\r\n              // Time ability not found\r\n              // console.log(\"Time ability not found.\");\r\n            } else if (response.status === 403) {\r\n              // Time ability in use and cannot be deleted\r\n              alert(\"Time ability is in use and cannot be deleted.\");\r\n              e.cancel = true;\r\n            } else {\r\n              // Handle other errors here\r\n              alert(\"Time ability is in use and cannot be deleted.\");\r\n              // console.log(\"An error occurred while deleting the time ability.\");\r\n              e.cancel = true;\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            // Handle network errors here\r\n            // console.error(\"Network error:\", error);\r\n          });\r\n      }\r\n    },\r\n    [isReadOnly]\r\n  );\r\n\r\n  const onAppointmentUpdating = useCallback(\r\n    (e) => {\r\n      if (isReadOnly) {\r\n        e.cancel = true;\r\n        return;\r\n      }\r\n\r\n      if (e.newData.status === \"Available\") {\r\n        const selectedLesson = abilities.find(\r\n          (lesson) => lesson.lesson_ability_id === e.newData.lesson_ability_id\r\n        );\r\n        e.newData.cost = selectedLesson.cost;\r\n        e.newData.subject_name = selectedLesson.subject;\r\n        e.newData.subject_type = selectedLesson.type;\r\n        e.newData.subject_units = selectedLesson.units;\r\n        e.newData.lesson_type_text = selectedLesson.lesson_type_text;\r\n        for (let appointment of appointments) {\r\n          if (doesOverlap(e.newData, appointment)) {\r\n            e.cancel = true;\r\n            alert(\"Appointment overlaps with an existing appointment!\");\r\n            return;\r\n          }\r\n        }\r\n        const fullUpdatedAppointment = e.newData;\r\n        if (fullUpdatedAppointment.isEditable === false) {\r\n          e.cancel = true;\r\n          return;\r\n        }\r\n\r\n        if (fullUpdatedAppointment.type === \"zoom\") {\r\n          fullUpdatedAppointment.zoom = true;\r\n          fullUpdatedAppointment.frontal = false;\r\n        } else if (fullUpdatedAppointment.type === \"frontal\") {\r\n          fullUpdatedAppointment.zoom = false;\r\n          fullUpdatedAppointment.frontal = true;\r\n        } else if (fullUpdatedAppointment.type === \"frontal/zoom\") {\r\n          fullUpdatedAppointment.zoom = true;\r\n          fullUpdatedAppointment.frontal = true;\r\n        }\r\n        fullUpdatedAppointment.startDate = new Date(\r\n          fullUpdatedAppointment.startDate\r\n        )\r\n          .toLocaleString(\"sv\")\r\n          .replace(\" \", \"T\");\r\n        fullUpdatedAppointment.endDate = new Date(\r\n          fullUpdatedAppointment.endDate\r\n        )\r\n          .toLocaleString(\"sv\")\r\n          .replace(\" \", \"T\");\r\n\r\n        fetch(\r\n          `https://privatelessonsserver.azurewebsites.net/api/timeAbilities/${fullUpdatedAppointment.id\r\n            .toString()\r\n            .slice(1)}`,\r\n          {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(fullUpdatedAppointment),\r\n          }\r\n        )\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`Request failed with status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            // Handle the successful response here\r\n            // console.log(\"Success:\", data.message);\r\n          })\r\n          .catch((error) => {\r\n            // Handle errors here\r\n            // console.error(\"Error:\", error.message);\r\n            e.cancel = true;\r\n          });\r\n      } else {\r\n        if (\r\n          e.newData.startDate !== e.oldData.startDate ||\r\n          e.newData.endDate !== e.oldData.endDate\r\n        ) {\r\n          e.cancel = true;\r\n          return;\r\n        }\r\n        for (let appointment of appointments) {\r\n          if (doesOverlap(e.newData, appointment)) {\r\n            e.cancel = true;\r\n            alert(\"Appointment overlaps with an existing appointment!\");\r\n            return;\r\n          }\r\n        }\r\n        const fullUpdatedAppointment = e.newData;\r\n        // Make the PUT request using fetch\r\n        return fetch(\r\n          `https://privatelessonsserver.azurewebsites.net/api/lessons/${fullUpdatedAppointment.id\r\n            .toString()\r\n            .slice(1)}`,\r\n          {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              paid_up: fullUpdatedAppointment.paid,\r\n              status: fullUpdatedAppointment.status,\r\n            }),\r\n          }\r\n        )\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`Failed with status: ${response.status}`);\r\n            }\r\n            return response.text();\r\n          })\r\n          .then((data) => {\r\n            // console.log(data);\r\n          })\r\n          .catch((error) => {\r\n            // console.error(\"Error updating lesson:\", error);\r\n          });\r\n      }\r\n    },\r\n    [doesOverlap, appointments, isReadOnly, abilities]\r\n  );\r\n\r\n  let views = [\"day\", \"week\", \"month\"];\r\n\r\n  const handleAddAppointmentClick = () => {\r\n    const appointmentData = {};\r\n    scheduler.current.instance.showAppointmentPopup(appointmentData, true);\r\n  };\r\n\r\n  const onCellClick = useCallback(\r\n    (e) => {\r\n      if (isReadOnly || new Date(e.cellData.startDate) < new Date()) {\r\n        e.cancel = true;\r\n        return;\r\n      }\r\n    },\r\n    [isReadOnly]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Scheduler\r\n          ref={scheduler}\r\n          dataSource={appointments}\r\n          timeZone=\"Asia/Jerusalem\"\r\n          defaultCurrentDate={new Date()}\r\n          defaultCurrentView=\"day\"\r\n          views={views}\r\n          height={600}\r\n          width={1300}\r\n          firstDayOfWeek={0}\r\n          startDayHour={7}\r\n          endDayHour={24}\r\n          showAllDayPanel={false}\r\n          crossScrollingEnabled={true}\r\n          cellDuration={60}\r\n          appointmentRender={appointmentRender}\r\n          onAppointmentFormOpening={onAppointmentFormOpening}\r\n          onAppointmentAdding={onAppointmentAdding}\r\n          onAppointmentUpdating={onAppointmentUpdating}\r\n          onAppointmentDeleting={onAppointmentDeleting}\r\n          onCellClick={onCellClick}\r\n          // groups={groups}\r\n        >\r\n          <Resource fieldExpr=\"status\" dataSource={statuses} />\r\n        </Scheduler>\r\n        <Editing allowAdding={!isReadOnly} allowDeleting={!isReadOnly} />\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: \"200px\",\r\n          padding: \"10px\",\r\n          borderLeft: \"1px solid #ccc\",\r\n        }}\r\n      >\r\n        <Legend/>\r\n        {!isReadOnly && (\r\n          <button onClick={handleAddAppointmentClick}>\r\n            Add Appointment\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}