{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport { HEADER_CURRENT_TIME_CELL_CLASS } from \"../classes\";\nimport { getToday } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport timezoneUtils from \"../utils.timeZone\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\nclass SchedulerWorkSpaceIndicator extends SchedulerWorkSpace {\n  _getToday() {\n    return getToday(this.option(\"indicatorTime\"), this.timeZoneCalculator);\n  }\n  isIndicationOnView() {\n    if (this.option(\"showCurrentTimeIndicator\")) {\n      var today = this._getToday();\n      var endViewDate = dateUtils.trimTime(this.getEndViewDate());\n      return dateUtils.dateInRange(today, this.getStartViewDate(), new Date(endViewDate.getTime() + toMs(\"day\")));\n    }\n    return false;\n  }\n  isIndicationAvailable() {\n    if (!hasWindow()) {\n      return false;\n    }\n    var today = this._getToday();\n    return today >= dateUtils.trimTime(new Date(this.getStartViewDate()));\n  }\n  isIndicatorVisible() {\n    var today = this._getToday();\n    var endViewDate = new Date(this.getEndViewDate().getTime() + toMs(\"minute\") - 1);\n    var firstViewDate = new Date(this.getStartViewDate());\n    firstViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n    endViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n    return dateUtils.dateInRange(today, firstViewDate, endViewDate);\n  }\n  _renderDateTimeIndication() {\n    if (this.isIndicationAvailable()) {\n      if (this.option(\"shadeUntilCurrentTime\")) {\n        this._shader.render();\n      }\n      if (this.isIndicationOnView() && this.isIndicatorVisible()) {\n        var groupCount = this._getGroupCount() || 1;\n        var $container = this._dateTableScrollable.$content();\n        var height = this.getIndicationHeight();\n        var rtlOffset = this._getRtlOffset(this.getCellWidth());\n        this._renderIndicator(height, rtlOffset, $container, groupCount);\n        this._setCurrentTimeCells();\n      }\n    }\n  }\n  _renderIndicator(height, rtlOffset, $container, groupCount) {\n    var groupedByDate = this.isGroupedByDate();\n    var repeatCount = groupedByDate ? 1 : groupCount;\n    for (var i = 0; i < repeatCount; i++) {\n      var $indicator = this._createIndicator($container);\n      setWidth($indicator, groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\n      this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i);\n    }\n  }\n  _createIndicator($container) {\n    var $indicator = $(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\n    $container.append($indicator);\n    return $indicator;\n  }\n  _getRtlOffset(width) {\n    return this.option(\"rtlEnabled\") ? getBoundingRect(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0;\n  }\n  _setIndicationUpdateInterval() {\n    if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\n      return;\n    }\n    this._clearIndicatorUpdateInterval();\n    this._indicatorInterval = setInterval(function () {\n      this._refreshDateTimeIndication();\n    }.bind(this), this.option(\"indicatorUpdateInterval\"));\n  }\n  _clearIndicatorUpdateInterval() {\n    if (this._indicatorInterval) {\n      clearInterval(this._indicatorInterval);\n      delete this._indicatorInterval;\n    }\n  }\n  _isVerticalShader() {\n    return true;\n  }\n  getIndicationWidth(groupIndex) {\n    var maxWidth = this.getCellWidth() * this._getCellCount();\n    var difference = this._getIndicatorDuration();\n    if (difference > this._getCellCount()) {\n      difference = this._getCellCount();\n    }\n    var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n    return maxWidth < width ? maxWidth : width;\n  }\n  getIndicatorOffset(groupIndex) {\n    var difference = this._getIndicatorDuration() - 1;\n    var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n    return offset;\n  }\n  _getIndicatorDuration() {\n    var today = this._getToday();\n    var firstViewDate = new Date(this.getStartViewDate());\n    var timeDiff = today.getTime() - firstViewDate.getTime();\n    if (\"workWeek\" === this.option(\"type\")) {\n      timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\");\n    }\n    return Math.ceil((timeDiff + 1) / toMs(\"day\"));\n  }\n  getIndicationHeight() {\n    var today = timezoneUtils.getDateWithoutTimezoneChange(this._getToday());\n    var cellHeight = this.getCellHeight();\n    var date = new Date(this.getStartViewDate());\n    if (this.isIndicationOnView()) {\n      date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n    }\n    var duration = today.getTime() - date.getTime();\n    var cellCount = duration / this.getCellDuration();\n    return cellCount * cellHeight;\n  }\n  _dispose() {\n    this._clearIndicatorUpdateInterval();\n    super._dispose.apply(this, arguments);\n  }\n  _refreshDateTimeIndication() {\n    var _this$_shader;\n    this._cleanDateTimeIndicator();\n    this._cleanCurrentTimeCells();\n    null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\n    this._renderDateTimeIndication();\n  }\n  _setCurrentTimeCells() {\n    var timePanelCells = this._getTimePanelCells();\n    var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\n    currentTimeCellIndices.forEach(timePanelCellIndex => {\n      timePanelCells.eq(timePanelCellIndex).addClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS);\n    });\n  }\n  _isCurrentTimeHeaderCell(headerIndex) {\n    if (this.isIndicationOnView()) {\n      var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\n      var date = completeDateHeaderMap[completeDateHeaderMap.length - 1][headerIndex].startDate;\n      return dateUtils.sameDate(date, this._getToday());\n    }\n    return false;\n  }\n  _getHeaderPanelCellClass(i) {\n    var cellClass = super._getHeaderPanelCellClass(i);\n    if (this._isCurrentTimeHeaderCell(i)) {\n      return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS;\n    }\n    return cellClass;\n  }\n  _cleanView() {\n    super._cleanView();\n    this._cleanDateTimeIndicator();\n  }\n  _dimensionChanged() {\n    super._dimensionChanged();\n    this._refreshDateTimeIndication();\n  }\n  _cleanDateTimeIndicator() {\n    this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove();\n  }\n  _cleanCurrentTimeCells() {\n    this.$element().find(\".\".concat(TIME_PANEL_CURRENT_TIME_CELL_CLASS)).removeClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS);\n  }\n  _cleanWorkSpace() {\n    super._cleanWorkSpace();\n    this._renderDateTimeIndication();\n    this._setIndicationUpdateInterval();\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"showCurrentTimeIndicator\":\n      case \"indicatorTime\":\n        this._cleanWorkSpace();\n        break;\n      case \"indicatorUpdateInterval\":\n        this._setIndicationUpdateInterval();\n        break;\n      case \"showAllDayPanel\":\n      case \"allDayExpanded\":\n      case \"crossScrollingEnabled\":\n        super._optionChanged(args);\n        this._refreshDateTimeIndication();\n        break;\n      case \"shadeUntilCurrentTime\":\n        this._refreshDateTimeIndication();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      showCurrentTimeIndicator: true,\n      indicatorTime: new Date(),\n      indicatorUpdateInterval: 5 * toMs(\"minute\"),\n      shadeUntilCurrentTime: true\n    });\n  }\n  _getCurrentTimePanelCellIndices() {\n    var rowCountPerGroup = this._getTimePanelRowCount();\n    var today = this._getToday();\n    var index = this.getCellIndexByDate(today);\n    var {\n      rowIndex: currentTimeRowIndex\n    } = this._getCellCoordinatesByIndex(index);\n    if (void 0 === currentTimeRowIndex) {\n      return [];\n    }\n    var cellIndices;\n    if (0 === currentTimeRowIndex) {\n      cellIndices = [currentTimeRowIndex];\n    } else {\n      cellIndices = currentTimeRowIndex % 2 === 0 ? [currentTimeRowIndex - 1, currentTimeRowIndex] : [currentTimeRowIndex, currentTimeRowIndex + 1];\n    }\n    var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\n    return [...new Array(verticalGroupCount)].reduce((currentIndices, _, groupIndex) => [...currentIndices, ...cellIndices.map(cellIndex => rowCountPerGroup * groupIndex + cellIndex)], []);\n  }\n}\nregisterComponent(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\nexport default SchedulerWorkSpaceIndicator;","map":{"version":3,"names":["setWidth","$","SchedulerWorkSpace","registerComponent","dateUtils","extend","getBoundingRect","hasWindow","HEADER_CURRENT_TIME_CELL_CLASS","getToday","timezoneUtils","toMs","dateToMilliseconds","SCHEDULER_DATE_TIME_INDICATOR_CLASS","TIME_PANEL_CURRENT_TIME_CELL_CLASS","SchedulerWorkSpaceIndicator","_getToday","option","timeZoneCalculator","isIndicationOnView","today","endViewDate","trimTime","getEndViewDate","dateInRange","getStartViewDate","Date","getTime","isIndicationAvailable","isIndicatorVisible","firstViewDate","setFullYear","getFullYear","getMonth","getDate","_renderDateTimeIndication","_shader","render","groupCount","_getGroupCount","$container","_dateTableScrollable","$content","height","getIndicationHeight","rtlOffset","_getRtlOffset","getCellWidth","_renderIndicator","_setCurrentTimeCells","groupedByDate","isGroupedByDate","repeatCount","i","$indicator","_createIndicator","_groupedStrategy","shiftIndicator","addClass","append","width","get","getTimePanelWidth","_setIndicationUpdateInterval","_clearIndicatorUpdateInterval","_indicatorInterval","setInterval","_refreshDateTimeIndication","bind","clearInterval","_isVerticalShader","getIndicationWidth","groupIndex","maxWidth","_getCellCount","difference","_getIndicatorDuration","getRoundedCellWidth","getIndicatorOffset","offset","timeDiff","_getWeekendsCount","Math","round","ceil","getDateWithoutTimezoneChange","cellHeight","getCellHeight","date","duration","cellCount","getCellDuration","_dispose","apply","arguments","_this$_shader","_cleanDateTimeIndicator","_cleanCurrentTimeCells","clean","timePanelCells","_getTimePanelCells","currentTimeCellIndices","_getCurrentTimePanelCellIndices","forEach","timePanelCellIndex","eq","_isCurrentTimeHeaderCell","headerIndex","completeDateHeaderMap","viewDataProvider","length","startDate","sameDate","_getHeaderPanelCellClass","cellClass","_cleanView","_dimensionChanged","$element","find","remove","concat","removeClass","_cleanWorkSpace","_optionChanged","args","name","_getDefaultOptions","showCurrentTimeIndicator","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","rowCountPerGroup","_getTimePanelRowCount","index","getCellIndexByDate","rowIndex","currentTimeRowIndex","_getCellCoordinatesByIndex","cellIndices","verticalGroupCount","_isVerticalGroupedWorkSpace","Array","reduce","currentIndices","_","map","cellIndex"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setWidth\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    HEADER_CURRENT_TIME_CELL_CLASS\r\n} from \"../classes\";\r\nimport {\r\n    getToday\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport timezoneUtils from \"../utils.timeZone\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\r\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\r\nclass SchedulerWorkSpaceIndicator extends SchedulerWorkSpace {\r\n    _getToday() {\r\n        return getToday(this.option(\"indicatorTime\"), this.timeZoneCalculator)\r\n    }\r\n    isIndicationOnView() {\r\n        if (this.option(\"showCurrentTimeIndicator\")) {\r\n            var today = this._getToday();\r\n            var endViewDate = dateUtils.trimTime(this.getEndViewDate());\r\n            return dateUtils.dateInRange(today, this.getStartViewDate(), new Date(endViewDate.getTime() + toMs(\"day\")))\r\n        }\r\n        return false\r\n    }\r\n    isIndicationAvailable() {\r\n        if (!hasWindow()) {\r\n            return false\r\n        }\r\n        var today = this._getToday();\r\n        return today >= dateUtils.trimTime(new Date(this.getStartViewDate()))\r\n    }\r\n    isIndicatorVisible() {\r\n        var today = this._getToday();\r\n        var endViewDate = new Date(this.getEndViewDate().getTime() + toMs(\"minute\") - 1);\r\n        var firstViewDate = new Date(this.getStartViewDate());\r\n        firstViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\r\n        endViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\r\n        return dateUtils.dateInRange(today, firstViewDate, endViewDate)\r\n    }\r\n    _renderDateTimeIndication() {\r\n        if (this.isIndicationAvailable()) {\r\n            if (this.option(\"shadeUntilCurrentTime\")) {\r\n                this._shader.render()\r\n            }\r\n            if (this.isIndicationOnView() && this.isIndicatorVisible()) {\r\n                var groupCount = this._getGroupCount() || 1;\r\n                var $container = this._dateTableScrollable.$content();\r\n                var height = this.getIndicationHeight();\r\n                var rtlOffset = this._getRtlOffset(this.getCellWidth());\r\n                this._renderIndicator(height, rtlOffset, $container, groupCount);\r\n                this._setCurrentTimeCells()\r\n            }\r\n        }\r\n    }\r\n    _renderIndicator(height, rtlOffset, $container, groupCount) {\r\n        var groupedByDate = this.isGroupedByDate();\r\n        var repeatCount = groupedByDate ? 1 : groupCount;\r\n        for (var i = 0; i < repeatCount; i++) {\r\n            var $indicator = this._createIndicator($container);\r\n            setWidth($indicator, groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\r\n            this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i)\r\n        }\r\n    }\r\n    _createIndicator($container) {\r\n        var $indicator = $(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\r\n        $container.append($indicator);\r\n        return $indicator\r\n    }\r\n    _getRtlOffset(width) {\r\n        return this.option(\"rtlEnabled\") ? getBoundingRect(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0\r\n    }\r\n    _setIndicationUpdateInterval() {\r\n        if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\r\n            return\r\n        }\r\n        this._clearIndicatorUpdateInterval();\r\n        this._indicatorInterval = setInterval(function() {\r\n            this._refreshDateTimeIndication()\r\n        }.bind(this), this.option(\"indicatorUpdateInterval\"))\r\n    }\r\n    _clearIndicatorUpdateInterval() {\r\n        if (this._indicatorInterval) {\r\n            clearInterval(this._indicatorInterval);\r\n            delete this._indicatorInterval\r\n        }\r\n    }\r\n    _isVerticalShader() {\r\n        return true\r\n    }\r\n    getIndicationWidth(groupIndex) {\r\n        var maxWidth = this.getCellWidth() * this._getCellCount();\r\n        var difference = this._getIndicatorDuration();\r\n        if (difference > this._getCellCount()) {\r\n            difference = this._getCellCount()\r\n        }\r\n        var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\r\n        return maxWidth < width ? maxWidth : width\r\n    }\r\n    getIndicatorOffset(groupIndex) {\r\n        var difference = this._getIndicatorDuration() - 1;\r\n        var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\r\n        return offset\r\n    }\r\n    _getIndicatorDuration() {\r\n        var today = this._getToday();\r\n        var firstViewDate = new Date(this.getStartViewDate());\r\n        var timeDiff = today.getTime() - firstViewDate.getTime();\r\n        if (\"workWeek\" === this.option(\"type\")) {\r\n            timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\")\r\n        }\r\n        return Math.ceil((timeDiff + 1) / toMs(\"day\"))\r\n    }\r\n    getIndicationHeight() {\r\n        var today = timezoneUtils.getDateWithoutTimezoneChange(this._getToday());\r\n        var cellHeight = this.getCellHeight();\r\n        var date = new Date(this.getStartViewDate());\r\n        if (this.isIndicationOnView()) {\r\n            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate())\r\n        }\r\n        var duration = today.getTime() - date.getTime();\r\n        var cellCount = duration / this.getCellDuration();\r\n        return cellCount * cellHeight\r\n    }\r\n    _dispose() {\r\n        this._clearIndicatorUpdateInterval();\r\n        super._dispose.apply(this, arguments)\r\n    }\r\n    _refreshDateTimeIndication() {\r\n        var _this$_shader;\r\n        this._cleanDateTimeIndicator();\r\n        this._cleanCurrentTimeCells();\r\n        null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\r\n        this._renderDateTimeIndication()\r\n    }\r\n    _setCurrentTimeCells() {\r\n        var timePanelCells = this._getTimePanelCells();\r\n        var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\r\n        currentTimeCellIndices.forEach(timePanelCellIndex => {\r\n            timePanelCells.eq(timePanelCellIndex).addClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS)\r\n        })\r\n    }\r\n    _isCurrentTimeHeaderCell(headerIndex) {\r\n        if (this.isIndicationOnView()) {\r\n            var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\r\n            var date = completeDateHeaderMap[completeDateHeaderMap.length - 1][headerIndex].startDate;\r\n            return dateUtils.sameDate(date, this._getToday())\r\n        }\r\n        return false\r\n    }\r\n    _getHeaderPanelCellClass(i) {\r\n        var cellClass = super._getHeaderPanelCellClass(i);\r\n        if (this._isCurrentTimeHeaderCell(i)) {\r\n            return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS\r\n        }\r\n        return cellClass\r\n    }\r\n    _cleanView() {\r\n        super._cleanView();\r\n        this._cleanDateTimeIndicator()\r\n    }\r\n    _dimensionChanged() {\r\n        super._dimensionChanged();\r\n        this._refreshDateTimeIndication()\r\n    }\r\n    _cleanDateTimeIndicator() {\r\n        this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove()\r\n    }\r\n    _cleanCurrentTimeCells() {\r\n        this.$element().find(\".\".concat(TIME_PANEL_CURRENT_TIME_CELL_CLASS)).removeClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS)\r\n    }\r\n    _cleanWorkSpace() {\r\n        super._cleanWorkSpace();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"showCurrentTimeIndicator\":\r\n            case \"indicatorTime\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"indicatorUpdateInterval\":\r\n                this._setIndicationUpdateInterval();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n            case \"allDayExpanded\":\r\n            case \"crossScrollingEnabled\":\r\n                super._optionChanged(args);\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            case \"shadeUntilCurrentTime\":\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            showCurrentTimeIndicator: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true\r\n        })\r\n    }\r\n    _getCurrentTimePanelCellIndices() {\r\n        var rowCountPerGroup = this._getTimePanelRowCount();\r\n        var today = this._getToday();\r\n        var index = this.getCellIndexByDate(today);\r\n        var {\r\n            rowIndex: currentTimeRowIndex\r\n        } = this._getCellCoordinatesByIndex(index);\r\n        if (void 0 === currentTimeRowIndex) {\r\n            return []\r\n        }\r\n        var cellIndices;\r\n        if (0 === currentTimeRowIndex) {\r\n            cellIndices = [currentTimeRowIndex]\r\n        } else {\r\n            cellIndices = currentTimeRowIndex % 2 === 0 ? [currentTimeRowIndex - 1, currentTimeRowIndex] : [currentTimeRowIndex, currentTimeRowIndex + 1]\r\n        }\r\n        var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\r\n        return [...new Array(verticalGroupCount)].reduce((currentIndices, _, groupIndex) => [...currentIndices, ...cellIndices.map(cellIndex => rowCountPerGroup * groupIndex + cellIndex)], [])\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\r\nexport default SchedulerWorkSpaceIndicator;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}