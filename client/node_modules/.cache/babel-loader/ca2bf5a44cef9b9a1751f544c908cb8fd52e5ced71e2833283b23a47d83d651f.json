{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // Translation map for Clock Label\n\nconst timeViews = {\n  hours: 'часы',\n  minutes: 'минуты',\n  seconds: 'секунды'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nconst viewTypes = {\n  calendar: 'календарный',\n  clock: 'часовой'\n};\nconst ruRUPickers = {\n  // Calendar navigation\n  previousMonth: 'Предыдущий месяц',\n  nextMonth: 'Следующий месяц',\n  // View navigation\n  openPreviousView: 'открыть предыдущий вид',\n  openNextView: 'открыть следующий вид',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'открыт годовой вид, переключить на календарный вид' : 'открыт календарный вид, переключить на годовой вид',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Открыт текстовый вид, перейти на ${viewTypes[viewType]} вид` : `Открыт ${viewTypes[viewType]} вид, перейти на текстовый вид`,\n  // DateRange placeholders\n  start: 'Начало',\n  end: 'Конец',\n  // Action bar\n  cancelButtonLabel: 'Отмена',\n  clearButtonLabel: 'Очистить',\n  okButtonLabel: 'Ок',\n  todayButtonLabel: 'Сегодня',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Выбрать дату',\n  dateTimePickerDefaultToolbarTitle: 'Выбрать дату и время',\n  timePickerDefaultToolbarTitle: 'Выбрать время',\n  dateRangePickerDefaultToolbarTitle: 'Выбрать период',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Выбрать ${timeViews[view]}. ${time === null ? 'Время не выбрано' : `Выбрано время ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} часов`,\n  minutesClockNumberText: minutes => `${minutes} минут`,\n  secondsClockNumberText: seconds => `${seconds} секунд`,\n  // Open picker labels\n  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Выберите дату, выбрана дата ${utils.format(value, 'fullDate')}` : 'Выберите дату',\n  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Выберите время, выбрано время ${utils.format(value, 'fullTime')}` : 'Выберите время',\n  // Table labels\n  timeTableLabel: 'выбрать время',\n  dateTableLabel: 'выбрать дату'\n};\nexport const ruRU = getPickersLocalization(ruRUPickers);","map":{"version":3,"names":["getPickersLocalization","timeViews","hours","minutes","seconds","viewTypes","calendar","clock","ruRUPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","inputModeToggleButtonAriaLabel","isKeyboardInputOpen","viewType","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","datePickerDefaultToolbarTitle","dateTimePickerDefaultToolbarTitle","timePickerDefaultToolbarTitle","dateRangePickerDefaultToolbarTitle","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","value","utils","isValid","openTimePickerDialogue","timeTableLabel","dateTableLabel","ruRU"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/@mui/x-date-pickers/locales/ruRU.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization'; // Translation map for Clock Label\r\n\r\nconst timeViews = {\r\n  hours: 'часы',\r\n  minutes: 'минуты',\r\n  seconds: 'секунды'\r\n}; // maps PickersToolbar[\"viewType\"] to its translation\r\n\r\nconst viewTypes = {\r\n  calendar: 'календарный',\r\n  clock: 'часовой'\r\n};\r\nconst ruRUPickers = {\r\n  // Calendar navigation\r\n  previousMonth: 'Предыдущий месяц',\r\n  nextMonth: 'Следующий месяц',\r\n  // View navigation\r\n  openPreviousView: 'открыть предыдущий вид',\r\n  openNextView: 'открыть следующий вид',\r\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'открыт годовой вид, переключить на календарный вид' : 'открыт календарный вид, переключить на годовой вид',\r\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Открыт текстовый вид, перейти на ${viewTypes[viewType]} вид` : `Открыт ${viewTypes[viewType]} вид, перейти на текстовый вид`,\r\n  // DateRange placeholders\r\n  start: 'Начало',\r\n  end: 'Конец',\r\n  // Action bar\r\n  cancelButtonLabel: 'Отмена',\r\n  clearButtonLabel: 'Очистить',\r\n  okButtonLabel: 'Ок',\r\n  todayButtonLabel: 'Сегодня',\r\n  // Toolbar titles\r\n  datePickerDefaultToolbarTitle: 'Выбрать дату',\r\n  dateTimePickerDefaultToolbarTitle: 'Выбрать дату и время',\r\n  timePickerDefaultToolbarTitle: 'Выбрать время',\r\n  dateRangePickerDefaultToolbarTitle: 'Выбрать период',\r\n  // Clock labels\r\n  clockLabelText: (view, time, adapter) => `Выбрать ${timeViews[view]}. ${time === null ? 'Время не выбрано' : `Выбрано время ${adapter.format(time, 'fullTime')}`}`,\r\n  hoursClockNumberText: hours => `${hours} часов`,\r\n  minutesClockNumberText: minutes => `${minutes} минут`,\r\n  secondsClockNumberText: seconds => `${seconds} секунд`,\r\n  // Open picker labels\r\n  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Выберите дату, выбрана дата ${utils.format(value, 'fullDate')}` : 'Выберите дату',\r\n  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Выберите время, выбрано время ${utils.format(value, 'fullTime')}` : 'Выберите время',\r\n  // Table labels\r\n  timeTableLabel: 'выбрать время',\r\n  dateTableLabel: 'выбрать дату'\r\n};\r\nexport const ruRU = getPickersLocalization(ruRUPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC,CAAC,CAAC;;AAEzE,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAE,MAAM;EACbC,OAAO,EAAE,QAAQ;EACjBC,OAAO,EAAE;AACX,CAAC,CAAC,CAAC;;AAEH,MAAMC,SAAS,GAAG;EAChBC,QAAQ,EAAE,aAAa;EACvBC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,kBAAkB;EACjCC,SAAS,EAAE,iBAAiB;EAC5B;EACAC,gBAAgB,EAAE,wBAAwB;EAC1CC,YAAY,EAAE,uBAAuB;EACrCC,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAM,GAAG,oDAAoD,GAAG,oDAAoD;EAC3KC,8BAA8B,EAAEA,CAACC,mBAAmB,EAAEC,QAAQ,KAAKD,mBAAmB,GAAI,oCAAmCX,SAAS,CAACY,QAAQ,CAAE,MAAK,GAAI,UAASZ,SAAS,CAACY,QAAQ,CAAE,gCAA+B;EACtN;EACAC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,OAAO;EACZ;EACAC,iBAAiB,EAAE,QAAQ;EAC3BC,gBAAgB,EAAE,UAAU;EAC5BC,aAAa,EAAE,IAAI;EACnBC,gBAAgB,EAAE,SAAS;EAC3B;EACAC,6BAA6B,EAAE,cAAc;EAC7CC,iCAAiC,EAAE,sBAAsB;EACzDC,6BAA6B,EAAE,eAAe;EAC9CC,kCAAkC,EAAE,gBAAgB;EACpD;EACAC,cAAc,EAAEA,CAACd,IAAI,EAAEe,IAAI,EAAEC,OAAO,KAAM,WAAU7B,SAAS,CAACa,IAAI,CAAE,KAAIe,IAAI,KAAK,IAAI,GAAG,kBAAkB,GAAI,iBAAgBC,OAAO,CAACC,MAAM,CAACF,IAAI,EAAE,UAAU,CAAE,EAAE,EAAC;EAClKG,oBAAoB,EAAE9B,KAAK,IAAK,GAAEA,KAAM,QAAO;EAC/C+B,sBAAsB,EAAE9B,OAAO,IAAK,GAAEA,OAAQ,QAAO;EACrD+B,sBAAsB,EAAE9B,OAAO,IAAK,GAAEA,OAAQ,SAAQ;EACtD;EACA+B,sBAAsB,EAAEA,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,GAAI,+BAA8BC,KAAK,CAACN,MAAM,CAACK,KAAK,EAAE,UAAU,CAAE,EAAC,GAAG,eAAe;EACrKG,sBAAsB,EAAEA,CAACH,KAAK,EAAEC,KAAK,KAAKD,KAAK,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,GAAI,iCAAgCC,KAAK,CAACN,MAAM,CAACK,KAAK,EAAE,UAAU,CAAE,EAAC,GAAG,gBAAgB;EACxK;EACAI,cAAc,EAAE,eAAe;EAC/BC,cAAc,EAAE;AAClB,CAAC;AACD,OAAO,MAAMC,IAAI,GAAG1C,sBAAsB,CAACQ,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}