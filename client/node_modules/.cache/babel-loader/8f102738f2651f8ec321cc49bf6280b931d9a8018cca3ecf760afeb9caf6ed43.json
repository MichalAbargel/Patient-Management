{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth } from \"../../../core/utils/size\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\nclass HorizontalCurrentTimeShader extends CurrentTimeShader {\n  renderShader() {\n    var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\n    for (var i = 0; i < groupCount; i++) {\n      var isFirstShader = 0 === i;\n      var $shader = isFirstShader ? this._$shader : this.createShader();\n      if (this._workSpace.isGroupedByDate()) {\n        this._customizeGroupedByDateShader($shader, i);\n      } else {\n        this._customizeShader($shader, i);\n      }\n      !isFirstShader && this._shader.push($shader);\n    }\n  }\n  _customizeShader($shader, groupIndex) {\n    var shaderWidth = this._workSpace.getIndicationWidth();\n    this._applyShaderWidth($shader, shaderWidth);\n    if (groupIndex >= 1) {\n      var workSpace = this._workSpace;\n      var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\n      $shader.css(\"left\", indicationWidth);\n    } else {\n      $shader.css(\"left\", 0);\n    }\n  }\n  _applyShaderWidth($shader, width) {\n    var maxWidth = getBoundingRect(this._$container.get(0)).width;\n    if (width > maxWidth) {\n      width = maxWidth;\n    }\n    if (width > 0) {\n      setWidth($shader, width);\n    }\n  }\n  _customizeGroupedByDateShader($shader, groupIndex) {\n    var cellCount = this._workSpace.getIndicationCellCount();\n    var integerPart = Math.floor(cellCount);\n    var fractionPart = cellCount - integerPart;\n    var isFirstShaderPart = 0 === groupIndex;\n    var workSpace = this._workSpace;\n    var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\n    var shaderLeft;\n    this._applyShaderWidth($shader, shaderWidth);\n    if (isFirstShaderPart) {\n      shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex;\n    } else {\n      shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth();\n    }\n    $shader.css(\"left\", shaderLeft);\n  }\n}\nexport default HorizontalCurrentTimeShader;","map":{"version":3,"names":["setWidth","getBoundingRect","CurrentTimeShader","HorizontalCurrentTimeShader","renderShader","groupCount","_workSpace","_isHorizontalGroupedWorkSpace","_getGroupCount","i","isFirstShader","$shader","_$shader","createShader","isGroupedByDate","_customizeGroupedByDateShader","_customizeShader","_shader","push","groupIndex","shaderWidth","getIndicationWidth","_applyShaderWidth","workSpace","indicationWidth","_getCellCount","getCellWidth","css","width","maxWidth","_$container","get","cellCount","getIndicationCellCount","integerPart","Math","floor","fractionPart","isFirstShaderPart","shaderLeft"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/node_modules/devextreme/esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setWidth\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\r\nclass HorizontalCurrentTimeShader extends CurrentTimeShader {\r\n    renderShader() {\r\n        var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\r\n        for (var i = 0; i < groupCount; i++) {\r\n            var isFirstShader = 0 === i;\r\n            var $shader = isFirstShader ? this._$shader : this.createShader();\r\n            if (this._workSpace.isGroupedByDate()) {\r\n                this._customizeGroupedByDateShader($shader, i)\r\n            } else {\r\n                this._customizeShader($shader, i)\r\n            }!isFirstShader && this._shader.push($shader)\r\n        }\r\n    }\r\n    _customizeShader($shader, groupIndex) {\r\n        var shaderWidth = this._workSpace.getIndicationWidth();\r\n        this._applyShaderWidth($shader, shaderWidth);\r\n        if (groupIndex >= 1) {\r\n            var workSpace = this._workSpace;\r\n            var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\r\n            $shader.css(\"left\", indicationWidth)\r\n        } else {\r\n            $shader.css(\"left\", 0)\r\n        }\r\n    }\r\n    _applyShaderWidth($shader, width) {\r\n        var maxWidth = getBoundingRect(this._$container.get(0)).width;\r\n        if (width > maxWidth) {\r\n            width = maxWidth\r\n        }\r\n        if (width > 0) {\r\n            setWidth($shader, width)\r\n        }\r\n    }\r\n    _customizeGroupedByDateShader($shader, groupIndex) {\r\n        var cellCount = this._workSpace.getIndicationCellCount();\r\n        var integerPart = Math.floor(cellCount);\r\n        var fractionPart = cellCount - integerPart;\r\n        var isFirstShaderPart = 0 === groupIndex;\r\n        var workSpace = this._workSpace;\r\n        var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\r\n        var shaderLeft;\r\n        this._applyShaderWidth($shader, shaderWidth);\r\n        if (isFirstShaderPart) {\r\n            shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex\r\n        } else {\r\n            shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth()\r\n        }\r\n        $shader.css(\"left\", shaderLeft)\r\n    }\r\n}\r\nexport default HorizontalCurrentTimeShader;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}