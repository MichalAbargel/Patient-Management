{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setHeight, setWidth } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\nvar DATE_TIME_SHADER_ALL_DAY_CLASS = \"dx-scheduler-date-time-shader-all-day\";\nvar DATE_TIME_SHADER_TOP_CLASS = \"dx-scheduler-date-time-shader-top\";\nvar DATE_TIME_SHADER_BOTTOM_CLASS = \"dx-scheduler-date-time-shader-bottom\";\nclass VerticalCurrentTimeShader extends CurrentTimeShader {\n  renderShader() {\n    var shaderHeight = this._getShaderHeight();\n    var maxHeight = this._getShaderMaxHeight();\n    var isSolidShader = shaderHeight > maxHeight;\n    if (shaderHeight > maxHeight) {\n      shaderHeight = maxHeight;\n    }\n    setHeight(this._$shader, shaderHeight);\n    var groupCount = this._workSpace._getGroupCount() || 1;\n    if (this._workSpace.isGroupedByDate()) {\n      this._renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader);\n    } else {\n      this._renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader);\n    }\n  }\n  _renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\n    for (var i = 0; i < groupCount; i++) {\n      var shaderWidth = this._getShaderWidth(i);\n      this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);\n      !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, shaderWidth, i);\n      this._renderAllDayShader(shaderWidth, i);\n    }\n  }\n  _renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\n    var shaderWidth = this._getShaderWidth(0);\n    var bottomShaderWidth = shaderWidth - this._workSpace.getCellWidth();\n    if (shaderHeight < 0) {\n      shaderHeight = 0;\n      bottomShaderWidth = shaderWidth;\n    }\n    this._renderTopShader(this._$shader, shaderHeight, shaderWidth * groupCount, 0);\n    !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, bottomShaderWidth * groupCount + this._workSpace.getCellWidth(), 0);\n    this._renderAllDayShader(shaderWidth * groupCount, 0);\n  }\n  _renderTopShader($shader, height, width, i) {\n    this._$topShader = $(\"<div>\").addClass(DATE_TIME_SHADER_TOP_CLASS);\n    if (width) {\n      setWidth(this._$topShader, width);\n    }\n    if (height) {\n      setHeight(this._$topShader, height);\n    }\n    this._$topShader.css(\"marginTop\", this._getShaderTopOffset(i));\n    this._$topShader.css(\"left\", this._getShaderOffset(i, width));\n    $shader.append(this._$topShader);\n  }\n  _renderBottomShader($shader, maxHeight, height, width, i) {\n    this._$bottomShader = $(\"<div>\").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);\n    var shaderWidth = height < 0 ? width : width - this._workSpace.getCellWidth();\n    var shaderHeight = height < 0 ? maxHeight : maxHeight - height;\n    setWidth(this._$bottomShader, shaderWidth);\n    setHeight(this._$bottomShader, shaderHeight);\n    this._$bottomShader.css(\"left\", this._getShaderOffset(i, width - this._workSpace.getCellWidth()));\n    $shader.append(this._$bottomShader);\n  }\n  _renderAllDayShader(shaderWidth, i) {\n    if (this._workSpace.option(\"showAllDayPanel\")) {\n      this._$allDayIndicator = $(\"<div>\").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);\n      setHeight(this._$allDayIndicator, this._workSpace.getAllDayHeight());\n      setWidth(this._$allDayIndicator, shaderWidth);\n      this._$allDayIndicator.css(\"left\", this._getShaderOffset(i, shaderWidth));\n      this._workSpace._$allDayPanel.prepend(this._$allDayIndicator);\n    }\n  }\n  _getShaderOffset(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderOffset(i, width);\n  }\n  _getShaderTopOffset(i) {\n    return this._workSpace.getGroupedStrategy().getShaderTopOffset(i);\n  }\n  _getShaderHeight(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderHeight();\n  }\n  _getShaderMaxHeight(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderMaxHeight();\n  }\n  _getShaderWidth(i) {\n    return this._workSpace.getGroupedStrategy().getShaderWidth(i);\n  }\n  clean() {\n    super.clean();\n    this._workSpace && this._workSpace._$allDayPanel && this._workSpace._$allDayPanel.find(\".\" + DATE_TIME_SHADER_ALL_DAY_CLASS).remove();\n  }\n}\nexport default VerticalCurrentTimeShader;","map":{"version":3,"names":["setHeight","setWidth","$","CurrentTimeShader","DATE_TIME_SHADER_ALL_DAY_CLASS","DATE_TIME_SHADER_TOP_CLASS","DATE_TIME_SHADER_BOTTOM_CLASS","VerticalCurrentTimeShader","renderShader","shaderHeight","_getShaderHeight","maxHeight","_getShaderMaxHeight","isSolidShader","_$shader","groupCount","_workSpace","_getGroupCount","isGroupedByDate","_renderGroupedByDateShaderParts","_renderShaderParts","i","shaderWidth","_getShaderWidth","_renderTopShader","_renderBottomShader","_renderAllDayShader","bottomShaderWidth","getCellWidth","$shader","height","width","_$topShader","addClass","css","_getShaderTopOffset","_getShaderOffset","append","_$bottomShader","option","_$allDayIndicator","getAllDayHeight","_$allDayPanel","prepend","getGroupedStrategy","getShaderOffset","getShaderTopOffset","getShaderHeight","getShaderMaxHeight","getShaderWidth","clean","find","remove"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/node_modules/devextreme/esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setHeight,\r\n    setWidth\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\r\nvar DATE_TIME_SHADER_ALL_DAY_CLASS = \"dx-scheduler-date-time-shader-all-day\";\r\nvar DATE_TIME_SHADER_TOP_CLASS = \"dx-scheduler-date-time-shader-top\";\r\nvar DATE_TIME_SHADER_BOTTOM_CLASS = \"dx-scheduler-date-time-shader-bottom\";\r\nclass VerticalCurrentTimeShader extends CurrentTimeShader {\r\n    renderShader() {\r\n        var shaderHeight = this._getShaderHeight();\r\n        var maxHeight = this._getShaderMaxHeight();\r\n        var isSolidShader = shaderHeight > maxHeight;\r\n        if (shaderHeight > maxHeight) {\r\n            shaderHeight = maxHeight\r\n        }\r\n        setHeight(this._$shader, shaderHeight);\r\n        var groupCount = this._workSpace._getGroupCount() || 1;\r\n        if (this._workSpace.isGroupedByDate()) {\r\n            this._renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader)\r\n        } else {\r\n            this._renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader)\r\n        }\r\n    }\r\n    _renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\r\n        for (var i = 0; i < groupCount; i++) {\r\n            var shaderWidth = this._getShaderWidth(i);\r\n            this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);\r\n            !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, shaderWidth, i);\r\n            this._renderAllDayShader(shaderWidth, i)\r\n        }\r\n    }\r\n    _renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\r\n        var shaderWidth = this._getShaderWidth(0);\r\n        var bottomShaderWidth = shaderWidth - this._workSpace.getCellWidth();\r\n        if (shaderHeight < 0) {\r\n            shaderHeight = 0;\r\n            bottomShaderWidth = shaderWidth\r\n        }\r\n        this._renderTopShader(this._$shader, shaderHeight, shaderWidth * groupCount, 0);\r\n        !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, bottomShaderWidth * groupCount + this._workSpace.getCellWidth(), 0);\r\n        this._renderAllDayShader(shaderWidth * groupCount, 0)\r\n    }\r\n    _renderTopShader($shader, height, width, i) {\r\n        this._$topShader = $(\"<div>\").addClass(DATE_TIME_SHADER_TOP_CLASS);\r\n        if (width) {\r\n            setWidth(this._$topShader, width)\r\n        }\r\n        if (height) {\r\n            setHeight(this._$topShader, height)\r\n        }\r\n        this._$topShader.css(\"marginTop\", this._getShaderTopOffset(i));\r\n        this._$topShader.css(\"left\", this._getShaderOffset(i, width));\r\n        $shader.append(this._$topShader)\r\n    }\r\n    _renderBottomShader($shader, maxHeight, height, width, i) {\r\n        this._$bottomShader = $(\"<div>\").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);\r\n        var shaderWidth = height < 0 ? width : width - this._workSpace.getCellWidth();\r\n        var shaderHeight = height < 0 ? maxHeight : maxHeight - height;\r\n        setWidth(this._$bottomShader, shaderWidth);\r\n        setHeight(this._$bottomShader, shaderHeight);\r\n        this._$bottomShader.css(\"left\", this._getShaderOffset(i, width - this._workSpace.getCellWidth()));\r\n        $shader.append(this._$bottomShader)\r\n    }\r\n    _renderAllDayShader(shaderWidth, i) {\r\n        if (this._workSpace.option(\"showAllDayPanel\")) {\r\n            this._$allDayIndicator = $(\"<div>\").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);\r\n            setHeight(this._$allDayIndicator, this._workSpace.getAllDayHeight());\r\n            setWidth(this._$allDayIndicator, shaderWidth);\r\n            this._$allDayIndicator.css(\"left\", this._getShaderOffset(i, shaderWidth));\r\n            this._workSpace._$allDayPanel.prepend(this._$allDayIndicator)\r\n        }\r\n    }\r\n    _getShaderOffset(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderOffset(i, width)\r\n    }\r\n    _getShaderTopOffset(i) {\r\n        return this._workSpace.getGroupedStrategy().getShaderTopOffset(i)\r\n    }\r\n    _getShaderHeight(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderHeight()\r\n    }\r\n    _getShaderMaxHeight(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderMaxHeight()\r\n    }\r\n    _getShaderWidth(i) {\r\n        return this._workSpace.getGroupedStrategy().getShaderWidth(i)\r\n    }\r\n    clean() {\r\n        super.clean();\r\n        this._workSpace && this._workSpace._$allDayPanel && this._workSpace._$allDayPanel.find(\".\" + DATE_TIME_SHADER_ALL_DAY_CLASS).remove()\r\n    }\r\n}\r\nexport default VerticalCurrentTimeShader;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}