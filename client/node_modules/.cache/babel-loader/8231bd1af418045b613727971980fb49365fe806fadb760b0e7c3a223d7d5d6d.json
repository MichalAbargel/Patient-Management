{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/utils.timeZone.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../core/utils/date\";\nimport timeZoneDataUtils from \"../../__internal/scheduler/timezones/m_utils_timezones_data\";\nimport DateAdapter from \"./dateAdapter\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar MINUTES_IN_HOUR = 60;\nvar MS_IN_MINUTE = 6e4;\nvar createUTCDateWithLocalOffset = date => {\n  if (!date) {\n    return null;\n  }\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\n};\nvar createDateFromUTCWithLocalOffset = date => {\n  var result = DateAdapter(date);\n  var timezoneOffsetBeforeInMin = result.getTimezoneOffset();\n  result.addTime(result.getTimezoneOffset(\"minute\"));\n  result.subtractMinutes(timezoneOffsetBeforeInMin - result.getTimezoneOffset());\n  return result.source;\n};\nvar getTimeZones = function () {\n  var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  var dateInUTC = createUTCDate(date);\n  return timeZoneDataUtils.getDisplayedTimeZones(dateInUTC.getTime());\n};\nvar createUTCDate = date => new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes()));\nvar getTimezoneOffsetChangeInMinutes = (startDate, endDate, updatedStartDate, updatedEndDate) => getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate);\nvar getTimezoneOffsetChangeInMs = (startDate, endDate, updatedStartDate, updatedEndDate) => getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\");\nvar getDaylightOffset = (startDate, endDate) => new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset();\nvar getDaylightOffsetInMs = (startDate, endDate) => getDaylightOffset(startDate, endDate) * toMs(\"minute\");\nvar calculateTimezoneByValue = function (timezone) {\n  var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n  if (\"string\" === typeof timezone) {\n    var dateUtc = createUTCDate(date);\n    return timeZoneDataUtils.getTimeZoneOffsetById(timezone, dateUtc.getTime());\n  }\n  return timezone;\n};\nvar _getDaylightOffsetByTimezone = (startDate, endDate, timeZone) => calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate);\nvar getCorrectedDateByDaylightOffsets = (convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) => {\n  var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\n  var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\n  var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\n  return new Date(date.getTime() - diff * toMs(\"hour\"));\n};\nvar correctRecurrenceExceptionByTimezone = function (exception, exceptionByStartDate, timeZone, startDateTimeZone) {\n  var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n  var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\n  if (startDateTimeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone);\n  } else if (timeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone);\n  }\n  return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"));\n};\nvar isTimezoneChangeInDate = date => {\n  var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\n  var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\n  return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0;\n};\nvar getDateWithoutTimezoneChange = date => {\n  var clonedDate = new Date(date);\n  if (isTimezoneChangeInDate(clonedDate)) {\n    var result = new Date(clonedDate);\n    return new Date(result.setDate(result.getDate() + 1));\n  }\n  return clonedDate;\n};\nvar isSameAppointmentDates = (startDate, endDate) => {\n  endDate = new Date(endDate.getTime() - 1);\n  return dateUtils.sameDate(startDate, endDate);\n};\nvar getClientTimezoneOffset = function () {\n  var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  return date.getTimezoneOffset() * MS_IN_MINUTE;\n};\nvar getDiffBetweenClientTimezoneOffsets = function () {\n  var firstDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  var secondDate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n  return getClientTimezoneOffset(firstDate) - getClientTimezoneOffset(secondDate);\n};\nvar isEqualLocalTimeZone = function (timeZoneName) {\n  var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n  if (Intl) {\n    var localTimeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    if (localTimeZoneName === timeZoneName) {\n      return true;\n    }\n  }\n  return isEqualLocalTimeZoneByDeclaration(timeZoneName, date);\n};\nvar hasDSTInLocalTimeZone = () => {\n  var [startDate, endDate] = getExtremeDates();\n  return startDate.getTimezoneOffset() !== endDate.getTimezoneOffset();\n};\nvar isEqualLocalTimeZoneByDeclaration = (timeZoneName, date) => {\n  var year = date.getFullYear();\n  var getOffset = date => -date.getTimezoneOffset() / 60;\n  var getDateAndMoveHourBack = dateStamp => new Date(dateStamp - 36e5);\n  var configTuple = timeZoneDataUtils.getTimeZoneDeclarationTuple(timeZoneName, year);\n  var [summerTime, winterTime] = configTuple;\n  var noDSTInTargetTimeZone = configTuple.length < 2;\n  if (noDSTInTargetTimeZone) {\n    var targetTimeZoneOffset = timeZoneDataUtils.getTimeZoneOffsetById(timeZoneName, date);\n    var localTimeZoneOffset = getOffset(date);\n    if (targetTimeZoneOffset !== localTimeZoneOffset) {\n      return false;\n    }\n    return hasDSTInLocalTimeZone() ? false : true;\n  }\n  var localSummerOffset = getOffset(new Date(summerTime.date));\n  var localWinterOffset = getOffset(new Date(winterTime.date));\n  if (localSummerOffset !== summerTime.offset) {\n    return false;\n  }\n  if (localSummerOffset === getOffset(getDateAndMoveHourBack(summerTime.date))) {\n    return false;\n  }\n  if (localWinterOffset !== winterTime.offset) {\n    return false;\n  }\n  if (localWinterOffset === getOffset(getDateAndMoveHourBack(winterTime.date))) {\n    return false;\n  }\n  return true;\n};\nvar getExtremeDates = () => {\n  var nowDate = new Date(Date.now());\n  var startDate = new Date();\n  var endDate = new Date();\n  startDate.setFullYear(nowDate.getFullYear(), 0, 1);\n  endDate.setFullYear(nowDate.getFullYear(), 6, 1);\n  return [startDate, endDate];\n};\nvar setOffsetsToDate = (targetDate, offsetsArray) => {\n  var newDateMs = offsetsArray.reduce((result, offset) => result + offset, targetDate.getTime());\n  return new Date(newDateMs);\n};\nvar utils = {\n  getDaylightOffset: getDaylightOffset,\n  getDaylightOffsetInMs: getDaylightOffsetInMs,\n  getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\n  getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\n  calculateTimezoneByValue: calculateTimezoneByValue,\n  getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\n  isSameAppointmentDates: isSameAppointmentDates,\n  correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone,\n  getClientTimezoneOffset: getClientTimezoneOffset,\n  getDiffBetweenClientTimezoneOffsets: getDiffBetweenClientTimezoneOffsets,\n  createUTCDateWithLocalOffset: createUTCDateWithLocalOffset,\n  createDateFromUTCWithLocalOffset: createDateFromUTCWithLocalOffset,\n  createUTCDate: createUTCDate,\n  isTimezoneChangeInDate: isTimezoneChangeInDate,\n  getDateWithoutTimezoneChange: getDateWithoutTimezoneChange,\n  hasDSTInLocalTimeZone: hasDSTInLocalTimeZone,\n  isEqualLocalTimeZone: isEqualLocalTimeZone,\n  isEqualLocalTimeZoneByDeclaration: isEqualLocalTimeZoneByDeclaration,\n  getTimeZones: getTimeZones,\n  setOffsetsToDate: setOffsetsToDate\n};\nexport default utils;","map":{"version":3,"names":["dateUtils","timeZoneDataUtils","DateAdapter","toMs","dateToMilliseconds","MINUTES_IN_HOUR","MS_IN_MINUTE","createUTCDateWithLocalOffset","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","createDateFromUTCWithLocalOffset","result","timezoneOffsetBeforeInMin","getTimezoneOffset","addTime","subtractMinutes","source","getTimeZones","arguments","length","dateInUTC","createUTCDate","getDisplayedTimeZones","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getTimezoneOffsetChangeInMinutes","startDate","endDate","updatedStartDate","updatedEndDate","getDaylightOffset","getTimezoneOffsetChangeInMs","getDaylightOffsetInMs","calculateTimezoneByValue","timezone","dateUtc","getTimeZoneOffsetById","_getDaylightOffsetByTimezone","timeZone","getCorrectedDateByDaylightOffsets","convertedOriginalStartDate","convertedDate","startDateTimezone","daylightOffsetByCommonTimezone","daylightOffsetByAppointmentTimezone","diff","correctRecurrenceExceptionByTimezone","exception","exceptionByStartDate","startDateTimeZone","isBackConversion","timezoneOffset","isTimezoneChangeInDate","startDayDate","setHours","endDayDate","getDateWithoutTimezoneChange","clonedDate","setDate","isSameAppointmentDates","sameDate","getClientTimezoneOffset","getDiffBetweenClientTimezoneOffsets","firstDate","secondDate","isEqualLocalTimeZone","timeZoneName","Intl","localTimeZoneName","DateTimeFormat","resolvedOptions","isEqualLocalTimeZoneByDeclaration","hasDSTInLocalTimeZone","getExtremeDates","year","getOffset","getDateAndMoveHourBack","dateStamp","configTuple","getTimeZoneDeclarationTuple","summerTime","winterTime","noDSTInTargetTimeZone","targetTimeZoneOffset","localTimeZoneOffset","localSummerOffset","localWinterOffset","offset","nowDate","now","setFullYear","setOffsetsToDate","targetDate","offsetsArray","newDateMs","reduce","utils"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/devextreme/esm/ui/scheduler/utils.timeZone.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/utils.timeZone.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../core/utils/date\";\r\nimport timeZoneDataUtils from \"../../__internal/scheduler/timezones/m_utils_timezones_data\";\r\nimport DateAdapter from \"./dateAdapter\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar MINUTES_IN_HOUR = 60;\r\nvar MS_IN_MINUTE = 6e4;\r\nvar createUTCDateWithLocalOffset = date => {\r\n    if (!date) {\r\n        return null\r\n    }\r\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()))\r\n};\r\nvar createDateFromUTCWithLocalOffset = date => {\r\n    var result = DateAdapter(date);\r\n    var timezoneOffsetBeforeInMin = result.getTimezoneOffset();\r\n    result.addTime(result.getTimezoneOffset(\"minute\"));\r\n    result.subtractMinutes(timezoneOffsetBeforeInMin - result.getTimezoneOffset());\r\n    return result.source\r\n};\r\nvar getTimeZones = function() {\r\n    var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date;\r\n    var dateInUTC = createUTCDate(date);\r\n    return timeZoneDataUtils.getDisplayedTimeZones(dateInUTC.getTime())\r\n};\r\nvar createUTCDate = date => new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes()));\r\nvar getTimezoneOffsetChangeInMinutes = (startDate, endDate, updatedStartDate, updatedEndDate) => getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate);\r\nvar getTimezoneOffsetChangeInMs = (startDate, endDate, updatedStartDate, updatedEndDate) => getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\");\r\nvar getDaylightOffset = (startDate, endDate) => new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset();\r\nvar getDaylightOffsetInMs = (startDate, endDate) => getDaylightOffset(startDate, endDate) * toMs(\"minute\");\r\nvar calculateTimezoneByValue = function(timezone) {\r\n    var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date;\r\n    if (\"string\" === typeof timezone) {\r\n        var dateUtc = createUTCDate(date);\r\n        return timeZoneDataUtils.getTimeZoneOffsetById(timezone, dateUtc.getTime())\r\n    }\r\n    return timezone\r\n};\r\nvar _getDaylightOffsetByTimezone = (startDate, endDate, timeZone) => calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate);\r\nvar getCorrectedDateByDaylightOffsets = (convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) => {\r\n    var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\r\n    var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\r\n    var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\r\n    return new Date(date.getTime() - diff * toMs(\"hour\"))\r\n};\r\nvar correctRecurrenceExceptionByTimezone = function(exception, exceptionByStartDate, timeZone, startDateTimeZone) {\r\n    var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\r\n    var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\r\n    if (startDateTimeZone) {\r\n        timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone)\r\n    } else if (timeZone) {\r\n        timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone)\r\n    }\r\n    return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"))\r\n};\r\nvar isTimezoneChangeInDate = date => {\r\n    var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\r\n    var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\r\n    return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0\r\n};\r\nvar getDateWithoutTimezoneChange = date => {\r\n    var clonedDate = new Date(date);\r\n    if (isTimezoneChangeInDate(clonedDate)) {\r\n        var result = new Date(clonedDate);\r\n        return new Date(result.setDate(result.getDate() + 1))\r\n    }\r\n    return clonedDate\r\n};\r\nvar isSameAppointmentDates = (startDate, endDate) => {\r\n    endDate = new Date(endDate.getTime() - 1);\r\n    return dateUtils.sameDate(startDate, endDate)\r\n};\r\nvar getClientTimezoneOffset = function() {\r\n    var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date;\r\n    return date.getTimezoneOffset() * MS_IN_MINUTE\r\n};\r\nvar getDiffBetweenClientTimezoneOffsets = function() {\r\n    var firstDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date;\r\n    var secondDate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date;\r\n    return getClientTimezoneOffset(firstDate) - getClientTimezoneOffset(secondDate)\r\n};\r\nvar isEqualLocalTimeZone = function(timeZoneName) {\r\n    var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date;\r\n    if (Intl) {\r\n        var localTimeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        if (localTimeZoneName === timeZoneName) {\r\n            return true\r\n        }\r\n    }\r\n    return isEqualLocalTimeZoneByDeclaration(timeZoneName, date)\r\n};\r\nvar hasDSTInLocalTimeZone = () => {\r\n    var [startDate, endDate] = getExtremeDates();\r\n    return startDate.getTimezoneOffset() !== endDate.getTimezoneOffset()\r\n};\r\nvar isEqualLocalTimeZoneByDeclaration = (timeZoneName, date) => {\r\n    var year = date.getFullYear();\r\n    var getOffset = date => -date.getTimezoneOffset() / 60;\r\n    var getDateAndMoveHourBack = dateStamp => new Date(dateStamp - 36e5);\r\n    var configTuple = timeZoneDataUtils.getTimeZoneDeclarationTuple(timeZoneName, year);\r\n    var [summerTime, winterTime] = configTuple;\r\n    var noDSTInTargetTimeZone = configTuple.length < 2;\r\n    if (noDSTInTargetTimeZone) {\r\n        var targetTimeZoneOffset = timeZoneDataUtils.getTimeZoneOffsetById(timeZoneName, date);\r\n        var localTimeZoneOffset = getOffset(date);\r\n        if (targetTimeZoneOffset !== localTimeZoneOffset) {\r\n            return false\r\n        }\r\n        return hasDSTInLocalTimeZone() ? false : true\r\n    }\r\n    var localSummerOffset = getOffset(new Date(summerTime.date));\r\n    var localWinterOffset = getOffset(new Date(winterTime.date));\r\n    if (localSummerOffset !== summerTime.offset) {\r\n        return false\r\n    }\r\n    if (localSummerOffset === getOffset(getDateAndMoveHourBack(summerTime.date))) {\r\n        return false\r\n    }\r\n    if (localWinterOffset !== winterTime.offset) {\r\n        return false\r\n    }\r\n    if (localWinterOffset === getOffset(getDateAndMoveHourBack(winterTime.date))) {\r\n        return false\r\n    }\r\n    return true\r\n};\r\nvar getExtremeDates = () => {\r\n    var nowDate = new Date(Date.now());\r\n    var startDate = new Date;\r\n    var endDate = new Date;\r\n    startDate.setFullYear(nowDate.getFullYear(), 0, 1);\r\n    endDate.setFullYear(nowDate.getFullYear(), 6, 1);\r\n    return [startDate, endDate]\r\n};\r\nvar setOffsetsToDate = (targetDate, offsetsArray) => {\r\n    var newDateMs = offsetsArray.reduce((result, offset) => result + offset, targetDate.getTime());\r\n    return new Date(newDateMs)\r\n};\r\nvar utils = {\r\n    getDaylightOffset: getDaylightOffset,\r\n    getDaylightOffsetInMs: getDaylightOffsetInMs,\r\n    getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\r\n    getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\r\n    calculateTimezoneByValue: calculateTimezoneByValue,\r\n    getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\r\n    isSameAppointmentDates: isSameAppointmentDates,\r\n    correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone,\r\n    getClientTimezoneOffset: getClientTimezoneOffset,\r\n    getDiffBetweenClientTimezoneOffsets: getDiffBetweenClientTimezoneOffsets,\r\n    createUTCDateWithLocalOffset: createUTCDateWithLocalOffset,\r\n    createDateFromUTCWithLocalOffset: createDateFromUTCWithLocalOffset,\r\n    createUTCDate: createUTCDate,\r\n    isTimezoneChangeInDate: isTimezoneChangeInDate,\r\n    getDateWithoutTimezoneChange: getDateWithoutTimezoneChange,\r\n    hasDSTInLocalTimeZone: hasDSTInLocalTimeZone,\r\n    isEqualLocalTimeZone: isEqualLocalTimeZone,\r\n    isEqualLocalTimeZoneByDeclaration: isEqualLocalTimeZoneByDeclaration,\r\n    getTimeZones: getTimeZones,\r\n    setOffsetsToDate: setOffsetsToDate\r\n};\r\nexport default utils;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}