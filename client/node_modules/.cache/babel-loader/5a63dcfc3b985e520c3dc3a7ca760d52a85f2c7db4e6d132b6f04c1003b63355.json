{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/month.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../../../../core/utils/date\";\nimport dateLocalization from \"../../../../../../../localization/date\";\nimport { getCalculatedFirstDayOfWeek, isDateInRange, setOptionHour } from \"./base\";\nexport var getViewStartByOptions = (startDate, currentDate, intervalCount, startViewDate) => {\n  if (!startDate) {\n    return new Date(currentDate);\n  }\n  var currentStartDate = new Date(startViewDate);\n  var validStartViewDate = new Date(startViewDate);\n  var diff = currentStartDate.getTime() <= currentDate.getTime() ? 1 : -1;\n  var endDate = new Date(new Date(validStartViewDate.setMonth(validStartViewDate.getMonth() + diff * intervalCount)));\n  while (!isDateInRange(currentDate, currentStartDate, endDate, diff)) {\n    currentStartDate = new Date(endDate);\n    if (diff > 0) {\n      currentStartDate.setDate(1);\n    }\n    endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * intervalCount)));\n  }\n  return diff > 0 ? currentStartDate : endDate;\n};\nexport var calculateStartViewDate = (currentDate, startDayHour, startDate, intervalCount, firstDayOfWeekOption) => {\n  var viewStart = getViewStartByOptions(startDate, currentDate, intervalCount, dateUtils.getFirstMonthDate(startDate));\n  var firstMonthDate = dateUtils.getFirstMonthDate(viewStart);\n  var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\n  var firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\n  return setOptionHour(firstViewDate, startDayHour);\n};\nexport var calculateCellIndex = (rowIndex, columnIndex, _, columnCount) => rowIndex * columnCount + columnIndex;\nexport var isFirstCellInMonthWithIntervalCount = (cellDate, intervalCount) => 1 === cellDate.getDate() && intervalCount > 1;\nexport var getCellText = (date, intervalCount) => {\n  if (isFirstCellInMonthWithIntervalCount(date, intervalCount)) {\n    var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\n    return [monthName, dateLocalization.format(date, \"day\")].join(\" \");\n  }\n  return dateLocalization.format(date, \"dd\");\n};","map":{"version":3,"names":["dateUtils","dateLocalization","getCalculatedFirstDayOfWeek","isDateInRange","setOptionHour","getViewStartByOptions","startDate","currentDate","intervalCount","startViewDate","Date","currentStartDate","validStartViewDate","diff","getTime","endDate","setMonth","getMonth","setDate","calculateStartViewDate","startDayHour","firstDayOfWeekOption","viewStart","getFirstMonthDate","firstMonthDate","firstDayOfWeek","firstViewDate","getFirstWeekDate","calculateCellIndex","rowIndex","columnIndex","_","columnCount","isFirstCellInMonthWithIntervalCount","cellDate","getDate","getCellText","date","monthName","getMonthNames","format","join"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/renovation/ui/scheduler/view_model/to_test/views/utils/month.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/month.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../../../../../core/utils/date\";\r\nimport dateLocalization from \"../../../../../../../localization/date\";\r\nimport {\r\n    getCalculatedFirstDayOfWeek,\r\n    isDateInRange,\r\n    setOptionHour\r\n} from \"./base\";\r\nexport var getViewStartByOptions = (startDate, currentDate, intervalCount, startViewDate) => {\r\n    if (!startDate) {\r\n        return new Date(currentDate)\r\n    }\r\n    var currentStartDate = new Date(startViewDate);\r\n    var validStartViewDate = new Date(startViewDate);\r\n    var diff = currentStartDate.getTime() <= currentDate.getTime() ? 1 : -1;\r\n    var endDate = new Date(new Date(validStartViewDate.setMonth(validStartViewDate.getMonth() + diff * intervalCount)));\r\n    while (!isDateInRange(currentDate, currentStartDate, endDate, diff)) {\r\n        currentStartDate = new Date(endDate);\r\n        if (diff > 0) {\r\n            currentStartDate.setDate(1)\r\n        }\r\n        endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * intervalCount)))\r\n    }\r\n    return diff > 0 ? currentStartDate : endDate\r\n};\r\nexport var calculateStartViewDate = (currentDate, startDayHour, startDate, intervalCount, firstDayOfWeekOption) => {\r\n    var viewStart = getViewStartByOptions(startDate, currentDate, intervalCount, dateUtils.getFirstMonthDate(startDate));\r\n    var firstMonthDate = dateUtils.getFirstMonthDate(viewStart);\r\n    var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\r\n    var firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\r\n    return setOptionHour(firstViewDate, startDayHour)\r\n};\r\nexport var calculateCellIndex = (rowIndex, columnIndex, _, columnCount) => rowIndex * columnCount + columnIndex;\r\nexport var isFirstCellInMonthWithIntervalCount = (cellDate, intervalCount) => 1 === cellDate.getDate() && intervalCount > 1;\r\nexport var getCellText = (date, intervalCount) => {\r\n    if (isFirstCellInMonthWithIntervalCount(date, intervalCount)) {\r\n        var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\r\n        return [monthName, dateLocalization.format(date, \"day\")].join(\" \")\r\n    }\r\n    return dateLocalization.format(date, \"dd\")\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}