{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { setWidth, getOuterHeight, getOuterWidth, setOuterHeight, getHeight, getWidth } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport messageLocalization from \"../../../localization/message\";\nimport { noop } from \"../../../core/utils/common\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { addNamespace, isMouseEvent } from \"../../../events/utils/index\";\nimport pointerEvents from \"../../../events/pointer\";\nimport errors from \"../../widget/ui.errors\";\nimport { name as clickEventName } from \"../../../events/click\";\nimport { name as contextMenuEventName } from \"../../../events/contextmenu\";\nimport { enter as dragEventEnter, leave as dragEventLeave, drop as dragEventDrop } from \"../../../events/drag\";\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\nimport tableCreatorModule from \"../table_creator\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\nimport { APPOINTMENT_SETTINGS_KEY } from \"../constants\";\nimport { FIXED_CONTAINER_CLASS, VIRTUAL_CELL_CLASS, TIME_PANEL_CLASS, DATE_TABLE_CLASS, DATE_TABLE_ROW_CLASS, GROUP_ROW_CLASS, GROUP_HEADER_CONTENT_CLASS, VERTICAL_GROUP_COUNT_CLASSES } from \"../classes\";\nimport WidgetObserver from \"../../../__internal/scheduler/base/m_widget_observer\";\nimport { resetPosition, locate } from \"../../../animation/translator\";\nimport { VirtualScrollingDispatcher, VirtualScrollingRenderer } from \"./ui.scheduler.virtual_scrolling\";\nimport ViewDataProvider from \"./view_model/view_data_provider\";\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\nimport dxrAllDayPanelTable from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/table.j\";\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\nimport CellsSelectionState from \"./cells_selection_state\";\nimport { Cache } from \"./cache\";\nimport { CellsSelectionController } from \"./cells_selection_controller\";\nimport { calculateViewStartDate, getViewStartByOptions, validateDayHours, getStartViewDateTimeOffset, isDateAndTimeView, calculateIsGroupedAllDayPanel, getCellDuration } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { createResourcesTree, getCellGroups, getGroupsObjectFromGroupsArray, getGroupCount } from \"../../../__internal/scheduler/resources/m_utils\";\nimport { getCellWidth, getCellHeight, getAllDayHeight, getMaxAllowedPosition, PositionHelper } from \"./helpers/positionHelper\";\nimport { utils } from \"../utils\";\nimport { compileGetter } from \"../../../core/utils/data\";\nimport { getMemoizeScrollTo } from \"../../../renovation/ui/common/utils/scroll/getMemoizeScrollTo\";\nvar DRAGGING_MOUSE_FAULT = 10;\nvar abstract = WidgetObserver.abstract;\nvar toMs = dateUtils.dateToMilliseconds;\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\nvar DragEventNames = {\n  ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\n  DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\n  LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\n};\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\nvar CELL_DATA = \"dxCellData\";\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\nvar DAY_MS = toMs(\"day\");\nvar HOUR_MS = toMs(\"hour\");\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\nvar CELL_INDEX_CALCULATION_EPSILON = .05;\nclass SchedulerWorkSpace extends WidgetObserver {\n  get viewDataProvider() {\n    if (!this._viewDataProvider) {\n      this._viewDataProvider = new ViewDataProvider(this.type);\n    }\n    return this._viewDataProvider;\n  }\n  get cache() {\n    if (!this._cache) {\n      this._cache = new Cache();\n    }\n    return this._cache;\n  }\n  get cellsSelectionState() {\n    if (!this._cellsSelectionState) {\n      this._cellsSelectionState = new CellsSelectionState(this.viewDataProvider);\n      var selectedCellsOption = this.option(\"selectedCellData\");\n      if ((null === selectedCellsOption || void 0 === selectedCellsOption ? void 0 : selectedCellsOption.length) > 0) {\n        var validSelectedCells = selectedCellsOption.map(selectedCell => {\n          var groups = selectedCell.groups;\n          if (!groups || 0 === this._getGroupCount()) {\n            return _extends({}, selectedCell, {\n              groupIndex: 0\n            });\n          }\n          var groupIndex = this._getGroupIndexByResourceId(groups);\n          return _extends({}, selectedCell, {\n            groupIndex: groupIndex\n          });\n        });\n        this._cellsSelectionState.setSelectedCellsByData(validSelectedCells);\n      }\n    }\n    return this._cellsSelectionState;\n  }\n  get cellsSelectionController() {\n    if (!this._cellsSelectionController) {\n      this._cellsSelectionController = new CellsSelectionController();\n    }\n    return this._cellsSelectionController;\n  }\n  get isAllDayPanelVisible() {\n    return this._isShowAllDayPanel() && this.supportAllDayRow();\n  }\n  get verticalGroupTableClass() {\n    return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS;\n  }\n  get viewDirection() {\n    return \"vertical\";\n  }\n  get renovatedHeaderPanelComponent() {\n    return dxrDateHeader;\n  }\n  get timeZoneCalculator() {\n    return this.option(\"timeZoneCalculator\");\n  }\n  get isDefaultDraggingMode() {\n    return \"default\" === this.option(\"draggingMode\");\n  }\n  _supportedKeys() {\n    var clickHandler = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var selectedCells = this.cellsSelectionState.getSelectedCells();\n      if (null !== selectedCells && void 0 !== selectedCells && selectedCells.length) {\n        var selectedCellsElement = selectedCells.map(cellData => this._getCellByData(cellData)).filter(cell => !!cell);\n        e.target = selectedCellsElement;\n        this._showPopup = true;\n        this._cellClickAction({\n          event: e,\n          cellElement: $(selectedCellsElement),\n          cellData: selectedCells[0]\n        });\n      }\n    };\n    var onArrowPressed = (e, key) => {\n      var _this$cellsSelectionS;\n      e.preventDefault();\n      e.stopPropagation();\n      var focusedCellData = null === (_this$cellsSelectionS = this.cellsSelectionState.focusedCell) || void 0 === _this$cellsSelectionS ? void 0 : _this$cellsSelectionS.cellData;\n      if (focusedCellData) {\n        var isAllDayPanelCell = focusedCellData.allDay && !this._isVerticalGroupedWorkSpace();\n        var isMultiSelection = e.shiftKey;\n        var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\n        var isRTL = this._isRTL();\n        var groupCount = this._getGroupCount();\n        var isGroupedByDate = this.isGroupedByDate();\n        var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\n        var focusedCellPosition = this.viewDataProvider.findCellPositionInMap(_extends({}, focusedCellData, {\n          isAllDay: focusedCellData.allDay\n        }));\n        var edgeIndices = isHorizontalGrouping && isMultiSelection && !isGroupedByDate ? this.viewDataProvider.getGroupEdgeIndices(focusedCellData.groupIndex, isAllDayPanelCell) : this.viewDataProvider.getViewEdgeIndices(isAllDayPanelCell);\n        var nextCellData = this.cellsSelectionController.handleArrowClick({\n          focusedCellPosition: focusedCellPosition,\n          edgeIndices: edgeIndices,\n          isRTL: isRTL,\n          isGroupedByDate: isGroupedByDate,\n          groupCount: groupCount,\n          isMultiSelection: isMultiSelection,\n          isMultiSelectionAllowed: isMultiSelectionAllowed,\n          viewType: this.type,\n          key: key,\n          getCellDataByPosition: this.viewDataProvider.getCellData.bind(this.viewDataProvider),\n          isAllDayPanelCell: isAllDayPanelCell,\n          focusedCellData: focusedCellData\n        });\n        this._processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection && isMultiSelectionAllowed);\n      }\n    };\n    return extend(super._supportedKeys(), {\n      enter: clickHandler,\n      space: clickHandler,\n      downArrow: e => {\n        onArrowPressed(e, \"down\");\n      },\n      upArrow: e => {\n        onArrowPressed(e, \"up\");\n      },\n      rightArrow: e => {\n        onArrowPressed(e, \"right\");\n      },\n      leftArrow: e => {\n        onArrowPressed(e, \"left\");\n      }\n    });\n  }\n  _isRTL() {\n    return this.option(\"rtlEnabled\");\n  }\n  _moveToCell($cell, isMultiSelection) {\n    if (!isDefined($cell) || !$cell.length) {\n      return;\n    }\n    var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\n    var currentCellData = this._getFullCellData($cell);\n    var focusedCellData = this.cellsSelectionState.focusedCell.cellData;\n    var nextFocusedCellData = this.cellsSelectionController.moveToCell({\n      isMultiSelection: isMultiSelection,\n      isMultiSelectionAllowed: isMultiSelectionAllowed,\n      currentCellData: currentCellData,\n      focusedCellData: focusedCellData,\n      isVirtualCell: $cell.hasClass(VIRTUAL_CELL_CLASS)\n    });\n    this._processNextSelectedCell(nextFocusedCellData, focusedCellData, isMultiSelectionAllowed && isMultiSelection);\n  }\n  _processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection) {\n    var nextCellPosition = this.viewDataProvider.findCellPositionInMap({\n      startDate: nextCellData.startDate,\n      groupIndex: nextCellData.groupIndex,\n      isAllDay: nextCellData.allDay,\n      index: nextCellData.index\n    });\n    if (!this.viewDataProvider.isSameCell(focusedCellData, nextCellData)) {\n      var $cell = nextCellData.allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(nextCellPosition.columnIndex) : this._dom_getDateCell(nextCellPosition);\n      var isNextCellAllDay = nextCellData.allDay;\n      this._setSelectedCellsStateAndUpdateSelection(isNextCellAllDay, nextCellPosition, isMultiSelection, $cell);\n      this._dateTableScrollable.scrollToElement($cell);\n    }\n  }\n  _setSelectedCellsStateAndUpdateSelection(isAllDay, cellPosition, isMultiSelection, $nextFocusedCell) {\n    var nextCellCoordinates = {\n      rowIndex: cellPosition.rowIndex,\n      columnIndex: cellPosition.columnIndex,\n      allDay: isAllDay\n    };\n    this.cellsSelectionState.setFocusedCell(nextCellCoordinates.rowIndex, nextCellCoordinates.columnIndex, isAllDay);\n    if (isMultiSelection) {\n      this.cellsSelectionState.setSelectedCells(nextCellCoordinates);\n    } else {\n      this.cellsSelectionState.setSelectedCells(nextCellCoordinates, nextCellCoordinates);\n    }\n    this.updateCellsSelection();\n    this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells(), $nextFocusedCell);\n  }\n  _hasAllDayClass($cell) {\n    return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\n  }\n  _focusInHandler(e) {\n    if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\n      delete this._isCellClick;\n      delete this._contextMenuHandled;\n      super._focusInHandler.apply(this, arguments);\n      this.cellsSelectionState.restoreSelectedAndFocusedCells();\n      if (!this.cellsSelectionState.focusedCell) {\n        var cellCoordinates = {\n          columnIndex: 0,\n          rowIndex: 0,\n          allDay: this._isVerticalGroupedWorkSpace() && this.isAllDayPanelVisible\n        };\n        this.cellsSelectionState.setFocusedCell(cellCoordinates.rowIndex, cellCoordinates.columnIndex, cellCoordinates.allDay);\n        this.cellsSelectionState.setSelectedCells(cellCoordinates, cellCoordinates);\n      }\n      this.updateCellsSelection();\n      this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells());\n    }\n  }\n  _focusOutHandler() {\n    super._focusOutHandler.apply(this, arguments);\n    if (!this._contextMenuHandled && !this._disposed) {\n      this.cellsSelectionState.releaseSelectedAndFocusedCells();\n      this.viewDataProvider.updateViewData(this.generateRenderOptions());\n      this.updateCellsSelection();\n    }\n  }\n  _focusTarget() {\n    return this.$element();\n  }\n  _isVerticalGroupedWorkSpace() {\n    return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\");\n  }\n  _isHorizontalGroupedWorkSpace() {\n    return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\");\n  }\n  _isWorkSpaceWithCount() {\n    return this.option(\"intervalCount\") > 1;\n  }\n  _isWorkspaceWithOddCells() {\n    return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling();\n  }\n  _getRealGroupOrientation() {\n    return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\";\n  }\n  createRAllDayPanelElements() {\n    this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS);\n    this._$allDayTitle = $(\"<div>\").appendTo(this._$headerPanelEmptyCell);\n  }\n  _dateTableScrollableConfig() {\n    var config = {\n      useKeyboard: false,\n      bounceEnabled: false,\n      updateManually: true,\n      onScroll: () => {\n        var _this$_groupedStrateg;\n        null === (_this$_groupedStrateg = this._groupedStrategy.cache) || void 0 === _this$_groupedStrateg ? void 0 : _this$_groupedStrateg.clear();\n      }\n    };\n    if (this._needCreateCrossScrolling()) {\n      config = extend(config, this._createCrossScrollingConfig(config));\n    }\n    if (this.isVirtualScrolling() && (this.virtualScrollingDispatcher.horizontalScrollingAllowed || this.virtualScrollingDispatcher.height)) {\n      var currentOnScroll = config.onScroll;\n      config = _extends({}, config, {\n        onScroll: e => {\n          null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll(e);\n          this.virtualScrollingDispatcher.handleOnScrollEvent(null === e || void 0 === e ? void 0 : e.scrollOffset);\n        }\n      });\n    }\n    return config;\n  }\n  _createCrossScrollingConfig(_ref) {\n    var {\n      onScroll: _onScroll\n    } = _ref;\n    return {\n      direction: \"both\",\n      onScroll: event => {\n        null === _onScroll || void 0 === _onScroll ? void 0 : _onScroll();\n        this._scrollSync.sidebar({\n          top: event.scrollOffset.top\n        });\n        this._scrollSync.header({\n          left: event.scrollOffset.left\n        });\n      },\n      onEnd: () => {\n        this.option(\"onScrollEnd\")();\n      }\n    };\n  }\n  _headerScrollableConfig() {\n    return {\n      useKeyboard: false,\n      showScrollbar: \"never\",\n      direction: \"horizontal\",\n      useNative: false,\n      updateManually: true,\n      bounceEnabled: false,\n      onScroll: event => {\n        this._scrollSync.dateTable({\n          left: event.scrollOffset.left\n        });\n      }\n    };\n  }\n  _visibilityChanged(visible) {\n    this.cache.clear();\n    if (visible) {\n      this._updateGroupTableHeight();\n    }\n    if (visible && this._needCreateCrossScrolling()) {\n      this._setTableSizes();\n    }\n  }\n  _setTableSizes() {\n    this.cache.clear();\n    this._attachTableClasses();\n    var cellWidth = this.getCellWidth();\n    if (cellWidth < this.getCellMinWidth()) {\n      cellWidth = this.getCellMinWidth();\n    }\n    var minWidth = this.getWorkSpaceMinWidth();\n    var groupCount = this._getGroupCount();\n    var totalCellCount = this._getTotalCellCount(groupCount);\n    var width = cellWidth * totalCellCount;\n    if (width < minWidth) {\n      width = minWidth;\n    }\n    setWidth(this._$headerPanel, width);\n    setWidth(this._$dateTable, width);\n    if (this._$allDayTable) {\n      setWidth(this._$allDayTable, width);\n    }\n    this._attachHeaderTableClasses();\n    this._updateGroupTableHeight();\n    this._updateScrollable();\n  }\n  getWorkSpaceMinWidth() {\n    return this._groupedStrategy.getWorkSpaceMinWidth();\n  }\n  _dimensionChanged() {\n    if (!this._isVisible()) {\n      return;\n    }\n    if (this.option(\"crossScrollingEnabled\")) {\n      this._setTableSizes();\n    }\n    this.updateHeaderEmptyCellWidth();\n    this._updateScrollable();\n    this.cache.clear();\n  }\n  _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\");\n  }\n  _getElementClass() {\n    return noop();\n  }\n  _getRowCount() {\n    return this.viewDataProvider.getRowCount({\n      intervalCount: this.option(\"intervalCount\"),\n      currentDate: this.option(\"currentDate\"),\n      viewType: this.type,\n      hoursInterval: this.option(\"hoursInterval\"),\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\")\n    });\n  }\n  _getCellCount() {\n    return this.viewDataProvider.getCellCount({\n      intervalCount: this.option(\"intervalCount\"),\n      currentDate: this.option(\"currentDate\"),\n      viewType: this.type,\n      hoursInterval: this.option(\"hoursInterval\"),\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\")\n    });\n  }\n  isRenovatedRender() {\n    return this.renovatedRenderSupported() && this.option(\"renovateRender\");\n  }\n  _isVirtualModeOn() {\n    return \"virtual\" === this.option(\"scrolling.mode\");\n  }\n  isVirtualScrolling() {\n    return this.isRenovatedRender() && this._isVirtualModeOn();\n  }\n  _initVirtualScrolling() {\n    if (this.virtualScrollingDispatcher) {\n      this.virtualScrollingDispatcher.dispose();\n      this.virtualScrollingDispatcher = null;\n    }\n    this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this._getVirtualScrollingDispatcherOptions());\n    this.virtualScrollingDispatcher.attachScrollableEvents();\n    this.renderer = new VirtualScrollingRenderer(this);\n  }\n  onDataSourceChanged() {}\n  isGroupedAllDayPanel() {\n    return calculateIsGroupedAllDayPanel(this.option(\"groups\"), this.option(\"groupOrientation\"), this.isAllDayPanelVisible);\n  }\n  generateRenderOptions(isProvideVirtualCellsWidth) {\n    var _this$_getToday;\n    var groupCount = this._getGroupCount();\n    var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n    var options = _extends({\n      groupByDate: this.option(\"groupByDate\"),\n      startRowIndex: 0,\n      startCellIndex: 0,\n      groupOrientation: groupOrientation,\n      today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\n      groups: this.option(\"groups\"),\n      isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\n      isAllDayPanelVisible: this.isAllDayPanelVisible,\n      selectedCells: this.cellsSelectionState.getSelectedCells(),\n      focusedCell: this.cellsSelectionState.focusedCell,\n      headerCellTextFormat: this._getFormat(),\n      getDateForHeaderText: (_, date) => date,\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\"),\n      cellDuration: this.getCellDuration(),\n      viewType: this.type,\n      intervalCount: this.option(\"intervalCount\"),\n      hoursInterval: this.option(\"hoursInterval\"),\n      currentDate: this.option(\"currentDate\"),\n      startDate: this.option(\"startDate\"),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\")\n    }, this.virtualScrollingDispatcher.getRenderState());\n    return options;\n  }\n  renovatedRenderSupported() {\n    return true;\n  }\n  _updateGroupTableHeight() {\n    if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\n      this._setHorizontalGroupHeaderCellsHeight();\n    }\n  }\n  updateHeaderEmptyCellWidth() {\n    if (hasWindow() && this._isRenderHeaderPanelEmptyCell()) {\n      var timePanelWidth = this.getTimePanelWidth();\n      var groupPanelWidth = this.getGroupTableWidth();\n      this._$headerPanelEmptyCell.css(\"width\", timePanelWidth + groupPanelWidth);\n    }\n  }\n  _isGroupsSpecified(resources) {\n    return this.option(\"groups\").length && resources;\n  }\n  _getGroupIndexByResourceId(id) {\n    var groups = this.option(\"groups\");\n    var resourceTree = createResourcesTree(groups);\n    if (!resourceTree.length) {\n      return 0;\n    }\n    return this._getGroupIndexRecursively(resourceTree, id);\n  }\n  _getGroupIndexRecursively(resourceTree, id) {\n    var currentKey = resourceTree[0].name;\n    var currentValue = id[currentKey];\n    return resourceTree.reduce((prevIndex, _ref2) => {\n      var {\n        leafIndex: leafIndex,\n        value: value,\n        children: children\n      } = _ref2;\n      var areValuesEqual = currentValue === value;\n      if (areValuesEqual && void 0 !== leafIndex) {\n        return leafIndex;\n      }\n      if (areValuesEqual) {\n        return this._getGroupIndexRecursively(children, id);\n      }\n      return prevIndex;\n    }, 0);\n  }\n  _getViewStartByOptions() {\n    return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this._getIntervalDuration(), this.option(\"startDate\") ? this._calculateViewStartDate() : void 0);\n  }\n  _getIntervalDuration() {\n    return this.viewDataProvider.getIntervalDuration(this.option(\"intervalCount\"));\n  }\n  _getHeaderDate() {\n    return this.getStartViewDate();\n  }\n  _calculateViewStartDate() {\n    return calculateViewStartDate(this.option(\"startDate\"));\n  }\n  _firstDayOfWeek() {\n    return this.viewDataProvider.getFirstDayOfWeek(this.option(\"firstDayOfWeek\"));\n  }\n  _attachEvents() {\n    this._createSelectionChangedAction();\n    this._attachClickEvent();\n    this._attachContextMenuEvent();\n  }\n  _attachClickEvent() {\n    var that = this;\n    var pointerDownAction = this._createAction(function (e) {\n      that._pointerDownHandler(e.event);\n    });\n    this._createCellClickAction();\n    var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n    var $element = this.$element();\n    eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\n    eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\n    eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, function (e) {\n      if (isMouseEvent(e) && e.which > 1) {\n        e.preventDefault();\n        return;\n      }\n      pointerDownAction({\n        event: e\n      });\n    });\n    eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, function (e) {\n      var $cell = $(e.target);\n      that._cellClickAction({\n        event: e,\n        cellElement: getPublicElement($cell),\n        cellData: that.getCellData($cell)\n      });\n    });\n  }\n  _createCellClickAction() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\", {\n      afterExecute: e => this._cellClickHandler(e.args[0].event)\n    });\n  }\n  _createSelectionChangedAction() {\n    this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n  }\n  _cellClickHandler() {\n    if (this._showPopup) {\n      delete this._showPopup;\n      this._handleSelectedCellsClick();\n    }\n  }\n  _pointerDownHandler(e) {\n    var $target = $(e.target);\n    if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\n      this._isCellClick = false;\n      return;\n    }\n    this._isCellClick = true;\n    if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\n      this._showPopup = true;\n    } else {\n      var cellCoordinates = this._getCoordinatesByCell($target);\n      var isAllDayCell = this._hasAllDayClass($target);\n      this._setSelectedCellsStateAndUpdateSelection(isAllDayCell, cellCoordinates, false, $target);\n    }\n  }\n  _handleSelectedCellsClick() {\n    var selectedCells = this.cellsSelectionState.getSelectedCells();\n    var firstCellData = selectedCells[0];\n    var lastCellData = selectedCells[selectedCells.length - 1];\n    var result = {\n      startDate: firstCellData.startDate,\n      endDate: lastCellData.endDate\n    };\n    if (void 0 !== lastCellData.allDay) {\n      result.allDay = lastCellData.allDay;\n    }\n    this.option(\"onSelectedCellsClick\")(result, lastCellData.groups);\n  }\n  _attachContextMenuEvent() {\n    this._createContextMenuAction();\n    var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n    var $element = this.$element();\n    var eventName = addNamespace(contextMenuEventName, this.NAME);\n    eventsEngine.off($element, eventName, cellSelector);\n    eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this));\n  }\n  _contextMenuHandler(e) {\n    var $cell = $(e.target);\n    this._contextMenuAction({\n      event: e,\n      cellElement: getPublicElement($cell),\n      cellData: this.getCellData($cell)\n    });\n    this._contextMenuHandled = true;\n  }\n  _createContextMenuAction() {\n    this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\");\n  }\n  _getGroupHeaderContainer() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      return this._$groupTable;\n    }\n    return this._$thead;\n  }\n  _getDateHeaderContainer() {\n    return this._$thead;\n  }\n  _getCalculateHeaderCellRepeatCount() {\n    return this._groupedStrategy.calculateHeaderCellRepeatCount();\n  }\n  _updateScrollable() {\n    var _this$_headerScrollab, _this$_sidebarScrolla;\n    this._dateTableScrollable.update();\n    null === (_this$_headerScrollab = this._headerScrollable) || void 0 === _this$_headerScrollab ? void 0 : _this$_headerScrollab.update();\n    null === (_this$_sidebarScrolla = this._sidebarScrollable) || void 0 === _this$_sidebarScrolla ? void 0 : _this$_sidebarScrolla.update();\n  }\n  _getTimePanelRowCount() {\n    return this._getCellCountInDay();\n  }\n  _getCellCountInDay() {\n    var hoursInterval = this.option(\"hoursInterval\");\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    return this.viewDataProvider.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n  }\n  _getTotalCellCount(groupCount) {\n    return this._groupedStrategy.getTotalCellCount(groupCount);\n  }\n  _getTotalRowCount(groupCount, includeAllDayPanelRows) {\n    var result = this._groupedStrategy.getTotalRowCount(groupCount);\n    if (includeAllDayPanelRows && this.isAllDayPanelVisible) {\n      result += groupCount;\n    }\n    return result;\n  }\n  _getGroupIndex(rowIndex, columnIndex) {\n    return this._groupedStrategy.getGroupIndex(rowIndex, columnIndex);\n  }\n  calculateEndDate(startDate) {\n    var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\n    return viewDataGenerator.calculateEndDate(startDate, viewDataGenerator.getInterval(this.option(\"hoursInterval\")), this.option(\"endDayHour\"));\n  }\n  _getGroupCount() {\n    return getGroupCount(this.option(\"groups\"));\n  }\n  _attachTablesEvents() {\n    var element = this.$element();\n    this._attachDragEvents(element);\n    this._attachPointerEvents(element);\n  }\n  _detachDragEvents(element) {\n    eventsEngine.off(element, DragEventNames.ENTER);\n    eventsEngine.off(element, DragEventNames.LEAVE);\n    eventsEngine.off(element, DragEventNames.DROP);\n  }\n  _attachDragEvents(element) {\n    this._detachDragEvents(element);\n    eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\n      checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\n    }, e => {\n      if (!this.preventDefaultDragging) {\n        this.removeDroppableCellClass();\n        $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n      }\n    });\n    eventsEngine.on(element, DragEventNames.LEAVE, () => {\n      if (!this.preventDefaultDragging) {\n        this.removeDroppableCellClass();\n      }\n    });\n    eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => {\n      var _this$dragBehavior, _this$dragBehavior$dr;\n      if (!this.dragBehavior) {\n        return;\n      }\n      if (!(null !== (_this$dragBehavior = this.dragBehavior) && void 0 !== _this$dragBehavior && _this$dragBehavior.dragBetweenComponentsPromise)) {\n        this.dragBehavior.removeDroppableClasses();\n        return;\n      }\n      null === (_this$dragBehavior$dr = this.dragBehavior.dragBetweenComponentsPromise) || void 0 === _this$dragBehavior$dr ? void 0 : _this$dragBehavior$dr.then(() => {\n        this.dragBehavior.removeDroppableClasses();\n      });\n    });\n  }\n  _attachPointerEvents(element) {\n    var isPointerDown = false;\n    eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\n    eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\n    eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\n      if (isMouseEvent(e) && 1 === e.which) {\n        isPointerDown = true;\n        this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n        eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\n          isPointerDown = false;\n          this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n        });\n      }\n    });\n    eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\n      if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\n        e.preventDefault();\n        e.stopPropagation();\n        this._moveToCell($(e.target), true);\n      }\n    });\n  }\n  _getFormat() {\n    return abstract();\n  }\n  getWorkArea() {\n    return this._$dateTableContainer;\n  }\n  getScrollable() {\n    return this._dateTableScrollable;\n  }\n  getScrollableScrollTop() {\n    return this._dateTableScrollable.scrollTop();\n  }\n  getGroupedScrollableScrollTop(allDay) {\n    return this._groupedStrategy.getScrollableScrollTop(allDay);\n  }\n  getScrollableScrollLeft() {\n    return this._dateTableScrollable.scrollLeft();\n  }\n  getScrollableOuterWidth() {\n    return this._dateTableScrollable.scrollWidth();\n  }\n  getScrollableContainer() {\n    return $(this._dateTableScrollable.container());\n  }\n  getHeaderPanelHeight() {\n    return this._$headerPanel && getOuterHeight(this._$headerPanel, true);\n  }\n  getTimePanelWidth() {\n    return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width;\n  }\n  getGroupTableWidth() {\n    return this._$groupTable ? getOuterWidth(this._$groupTable) : 0;\n  }\n  getWorkSpaceLeftOffset() {\n    return this._groupedStrategy.getLeftOffset();\n  }\n  _getCellCoordinatesByIndex(index) {\n    var columnIndex = Math.floor(index / this._getRowCount());\n    var rowIndex = index - this._getRowCount() * columnIndex;\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  }\n  _getDateGenerationOptions() {\n    var _this$viewDataProvide;\n    return {\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\"),\n      isWorkView: this.viewDataProvider.viewDataGenerator.isWorkView,\n      interval: null === (_this$viewDataProvide = this.viewDataProvider.viewDataGenerator) || void 0 === _this$viewDataProvide ? void 0 : _this$viewDataProvide.getInterval(this.option(\"hoursInterval\")),\n      startViewDate: this.getStartViewDate(),\n      firstDayOfWeek: this._firstDayOfWeek()\n    };\n  }\n  _getIntervalBetween(currentDate, allDay) {\n    var firstViewDate = this.getStartViewDate();\n    var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\n    var days = this._getDaysOfInterval(fullInterval, startDayTime);\n    var weekendsCount = this._getWeekendsCount(days);\n    var result = (days - weekendsCount) * DAY_MS;\n    if (!allDay) {\n      var hiddenInterval = this.viewDataProvider.hiddenInterval;\n      var visibleDayDuration = this.getVisibleDayDuration();\n      result = fullInterval - days * hiddenInterval - weekendsCount * visibleDayDuration;\n    }\n    return result;\n  }\n  _getWeekendsCount() {\n    return 0;\n  }\n  _getDaysOfInterval(fullInterval, startDayTime) {\n    return Math.floor((fullInterval + startDayTime) / DAY_MS);\n  }\n  _updateIndex(index) {\n    return index * this._getRowCount();\n  }\n  _getDroppableCell() {\n    return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS);\n  }\n  _getWorkSpaceWidth() {\n    return this.cache.get(\"workspaceWidth\", () => {\n      if (this._needCreateCrossScrolling()) {\n        return getBoundingRect(this._$dateTable.get(0)).width;\n      }\n      var totalWidth = getBoundingRect(this.$element().get(0)).width;\n      var timePanelWidth = this.getTimePanelWidth();\n      var groupTableWidth = this.getGroupTableWidth();\n      return totalWidth - timePanelWidth - groupTableWidth;\n    });\n  }\n  _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\n    var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\n    return this._dom_getDateCell(indexes);\n  }\n  _dom_getDateCell(position) {\n    return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.columnIndex);\n  }\n  _dom_getAllDayPanelCell(columnIndex) {\n    return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(columnIndex);\n  }\n  _getCells(allDay, direction) {\n    var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n    if (\"vertical\" === direction) {\n      var result = [];\n      for (var i = 1;; i++) {\n        var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\n        if (!cells.length) {\n          break;\n        }\n        result = result.concat(cells.toArray());\n      }\n      return $(result);\n    } else {\n      return this.$element().find(\".\" + cellClass);\n    }\n  }\n  _getFirstAndLastDataTableCell() {\n    var selector = this.isVirtualScrolling() ? \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(VIRTUAL_CELL_CLASS) : \".\".concat(DATE_TABLE_CELL_CLASS);\n    var $cells = this.$element().find(selector);\n    return [$cells[0], $cells[$cells.length - 1]];\n  }\n  _getAllCells(allDay) {\n    if (this._isVerticalGroupedWorkSpace()) {\n      return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"));\n    }\n    var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n    return this.$element().find(\".\".concat(cellClass));\n  }\n  _setHorizontalGroupHeaderCellsHeight() {\n    var height = getBoundingRect(this._$dateTable.get(0)).height;\n    setOuterHeight(this._$groupTable, height);\n  }\n  _getGroupHeaderCells() {\n    return this.$element().find(\".\" + GROUP_HEADER_CLASS);\n  }\n  _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\n    var currentDate = date || new Date(this.option(\"currentDate\"));\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    if (hours < startDayHour) {\n      hours = startDayHour;\n    }\n    if (hours >= endDayHour) {\n      hours = endDayHour - 1;\n    }\n    currentDate.setHours(hours, minutes, 0, 0);\n    var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\n    var {\n      position: position,\n      cellData: cellData\n    } = cell;\n    return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, isDateAndTimeView(this.type), \"vertical\" === this.viewDirection);\n  }\n  _isOutsideScrollable(target, event) {\n    var $dateTableScrollableElement = this._dateTableScrollable.$element();\n    var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\n    var window = getWindow();\n    var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\n    var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\n    var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\n    if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\n      return false;\n    }\n    return isOutsideVerticalScrollable || isOutsideHorizontalScrollable;\n  }\n  setCellDataCache(cellCoordinates, groupIndex, $cell) {\n    var key = JSON.stringify({\n      rowIndex: cellCoordinates.rowIndex,\n      columnIndex: cellCoordinates.columnIndex,\n      groupIndex: groupIndex\n    });\n    this.cache.set(key, this.getCellData($cell));\n  }\n  setCellDataCacheAlias(appointment, geometry) {\n    var key = JSON.stringify({\n      rowIndex: appointment.rowIndex,\n      columnIndex: appointment.columnIndex,\n      groupIndex: appointment.groupIndex\n    });\n    var aliasKey = JSON.stringify({\n      top: geometry.top,\n      left: geometry.left\n    });\n    this.cache.set(aliasKey, this.cache.get(key));\n  }\n  supportAllDayRow() {\n    return true;\n  }\n  keepOriginalHours() {\n    return false;\n  }\n  _filterCellDataFields(cellData) {\n    return extend(true, {}, {\n      startDate: cellData.startDate,\n      endDate: cellData.endDate,\n      groups: cellData.groups,\n      groupIndex: cellData.groupIndex,\n      allDay: cellData.allDay\n    });\n  }\n  getCellData($cell) {\n    var cellData = this._getFullCellData($cell) || {};\n    return this._filterCellDataFields(cellData);\n  }\n  _getFullCellData($cell) {\n    var currentCell = $cell[0];\n    if (currentCell) {\n      return this._getDataByCell($cell);\n    }\n    return;\n  }\n  _getVirtualRowOffset() {\n    return this.virtualScrollingDispatcher.virtualRowOffset;\n  }\n  _getVirtualCellOffset() {\n    return this.virtualScrollingDispatcher.virtualCellOffset;\n  }\n  _getDataByCell($cell) {\n    var rowIndex = $cell.parent().index() - this.virtualScrollingDispatcher.topVirtualRowsCount;\n    var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\n    var {\n      viewDataProvider: viewDataProvider\n    } = this;\n    var isAllDayCell = this._hasAllDayClass($cell);\n    var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\n    return cellData ? cellData : void 0;\n  }\n  isGroupedByDate() {\n    return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0;\n  }\n  getCellIndexByDate(date, inAllDayRow) {\n    var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\n    var timeInterval = inAllDayRow ? 864e5 : viewDataGenerator.getInterval(this.option(\"hoursInterval\"));\n    var startViewDateOffset = getStartViewDateTimeOffset(this.getStartViewDate(), this.option(\"startDayHour\"));\n    var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + startViewDateOffset;\n    var index = Math.floor(dateTimeStamp / timeInterval);\n    if (inAllDayRow) {\n      index = this._updateIndex(index);\n    }\n    if (index < 0) {\n      index = 0;\n    }\n    return index;\n  }\n  getDroppableCellIndex() {\n    var $droppableCell = this._getDroppableCell();\n    var $row = $droppableCell.parent();\n    var rowIndex = $row.index();\n    return rowIndex * $row.find(\"td\").length + $droppableCell.index();\n  }\n  getDataByDroppableCell() {\n    var cellData = this.getCellData($(this._getDroppableCell()));\n    var allDay = cellData.allDay;\n    var startDate = cellData.startDate;\n    var endDate = cellData.endDate;\n    return {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: allDay,\n      groups: cellData.groups\n    };\n  }\n  getDateRange() {\n    return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()];\n  }\n  getCellMinWidth() {\n    return DATE_TABLE_MIN_CELL_WIDTH;\n  }\n  getRoundedCellWidth(groupIndex, startIndex, cellCount) {\n    if (groupIndex < 0 || !hasWindow()) {\n      return 0;\n    }\n    var $row = this.$element().find(\".\".concat(DATE_TABLE_ROW_CLASS)).eq(0);\n    var width = 0;\n    var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\n    var totalCellCount = this._getCellCount() * groupIndex;\n    cellCount = cellCount || this._getCellCount();\n    if (!isDefined(startIndex)) {\n      startIndex = totalCellCount;\n    }\n    for (var i = startIndex; i < totalCellCount + cellCount; i++) {\n      var element = $($cells).eq(i).get(0);\n      var elementWidth = element ? getBoundingRect(element).width : 0;\n      width += elementWidth;\n    }\n    return width / (totalCellCount + cellCount - startIndex);\n  }\n  getCellWidth() {\n    return getCellWidth(this.getDOMElementsMetaData());\n  }\n  getCellHeight() {\n    return getCellHeight(this.getDOMElementsMetaData());\n  }\n  getAllDayHeight() {\n    return getAllDayHeight(this.option(\"showAllDayPanel\"), this._isVerticalGroupedWorkSpace(), this.getDOMElementsMetaData());\n  }\n  getMaxAllowedPosition(groupIndex) {\n    return getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.option(\"rtlEnabled\"), this.getDOMElementsMetaData());\n  }\n  getAllDayOffset() {\n    return this._groupedStrategy.getAllDayOffset();\n  }\n  getCellIndexByCoordinates(coordinates, allDay) {\n    var cellCount = this._getTotalCellCount(this._getGroupCount());\n    var cellWidth = this.getCellWidth();\n    var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\n    var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\n    var leftIndex = coordinates.left / cellWidth;\n    leftIndex = Math.floor(leftIndex + CELL_INDEX_CALCULATION_EPSILON);\n    if (this._isRTL()) {\n      leftIndex = cellCount - leftIndex - 1;\n    }\n    return cellCount * topIndex + leftIndex;\n  }\n  getStartViewDate() {\n    return this.viewDataProvider.getStartViewDate();\n  }\n  getEndViewDate() {\n    return this.viewDataProvider.getLastCellEndDate();\n  }\n  getEndViewDateByEndDayHour() {\n    return this.viewDataProvider.getLastViewDateByEndDayHour(this.option(\"endDayHour\"));\n  }\n  getCellDuration() {\n    return getCellDuration(this.type, this.option(\"startDayHour\"), this.option(\"endDayHour\"), this.option(\"hoursInterval\"));\n  }\n  getIntervalDuration(allDay) {\n    return allDay ? toMs(\"day\") : this.getCellDuration();\n  }\n  getVisibleDayDuration() {\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    var hoursInterval = this.option(\"hoursInterval\");\n    return this.viewDataProvider.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval);\n  }\n  getGroupBounds(coordinates) {\n    var groupBounds = this._groupedStrategy instanceof VerticalGroupedStrategy ? this.getGroupBoundsVertical(coordinates.groupIndex) : this.getGroupBoundsHorizontal(coordinates);\n    return this._isRTL() ? this.getGroupBoundsRtlCorrection(groupBounds) : groupBounds;\n  }\n  getGroupBoundsVertical(groupIndex) {\n    var $firstAndLastCells = this._getFirstAndLastDataTableCell();\n    return this._groupedStrategy.getGroupBoundsOffset(groupIndex, $firstAndLastCells);\n  }\n  getGroupBoundsHorizontal(coordinates) {\n    var cellCount = this._getCellCount();\n    var $cells = this._getCells();\n    var cellWidth = this.getCellWidth();\n    var groupedDataMap = this.viewDataProvider.groupedDataMap;\n    return this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap);\n  }\n  getGroupBoundsRtlCorrection(groupBounds) {\n    var cellWidth = this.getCellWidth();\n    return _extends({}, groupBounds, {\n      left: groupBounds.right - 2 * cellWidth,\n      right: groupBounds.left + 2 * cellWidth\n    });\n  }\n  needRecalculateResizableArea() {\n    return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop();\n  }\n  getCellDataByCoordinates(coordinates, allDay) {\n    var key = JSON.stringify({\n      top: coordinates.top,\n      left: coordinates.left\n    });\n    return this.cache.get(key, () => {\n      var $cells = this._getCells(allDay);\n      var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\n      var $cell = $cells.eq(cellIndex);\n      return this.getCellData($cell);\n    });\n  }\n  getVisibleBounds() {\n    var result = {};\n    var $scrollable = this.getScrollable().$element();\n    var cellHeight = this.getCellHeight();\n    var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\n    var totalCellCount = scrolledCellCount + getHeight($scrollable) / cellHeight;\n    result.top = {\n      hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n      minutes: scrolledCellCount % 2 ? 30 : 0\n    };\n    result.bottom = {\n      hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n      minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\n    };\n    return result;\n  }\n  updateScrollPosition(date, groups) {\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var newDate = this.timeZoneCalculator.createDate(date, {\n      path: \"toGrid\"\n    });\n    var inAllDayRow = allDay && this.isAllDayPanelVisible;\n    if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\n      this.scrollTo(newDate, groups, inAllDayRow, false);\n    }\n  }\n  needUpdateScrollPosition(date, groups, inAllDayRow) {\n    var cells = this._getCellsInViewport(inAllDayRow);\n    var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\n    var time = date.getTime();\n    var trimmedTime = dateUtils.trimTime(date).getTime();\n    return cells.reduce((currentResult, cell) => {\n      var {\n        startDate: cellStartDate,\n        endDate: cellEndDate,\n        groupIndex: cellGroupIndex\n      } = this.getCellData(cell);\n      var cellStartTime = cellStartDate.getTime();\n      var cellEndTime = cellEndDate.getTime();\n      if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\n        return false;\n      }\n      return currentResult;\n    }, true);\n  }\n  _getCellsInViewport(inAllDayRow) {\n    var $scrollable = this.getScrollable().$element();\n    var cellHeight = this.getCellHeight();\n    var cellWidth = this.getCellWidth();\n    var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\n    var scrollableScrollTop = this.getScrollableScrollTop();\n    var scrollableScrollLeft = this.getScrollableScrollLeft();\n    var fullScrolledRowCount = scrollableScrollTop / cellHeight - this.virtualScrollingDispatcher.topVirtualRowsCount;\n    var scrolledRowCount = Math.floor(fullScrolledRowCount);\n    if (scrollableScrollTop % cellHeight !== 0) {\n      scrolledRowCount += 1;\n    }\n    var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\n    var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\n    if (scrollableScrollLeft % cellWidth !== 0) {\n      scrolledColumnCount += 1;\n    }\n    var rowCount = Math.floor(fullScrolledRowCount + getHeight($scrollable) / cellHeight);\n    var columnCount = Math.floor(fullScrolledColumnCount + getWidth($scrollable) / cellWidth);\n    var $cells = this._getAllCells(inAllDayRow);\n    var result = [];\n    $cells.each(function (index) {\n      var $cell = $(this);\n      var columnIndex = index % totalColumnCount;\n      var rowIndex = index / totalColumnCount;\n      if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\n        result.push($cell);\n      }\n    });\n    return result;\n  }\n  scrollToTime(hours, minutes, date) {\n    if (!this._isValidScrollDate(date)) {\n      return;\n    }\n    var coordinates = this._getScrollCoordinates(hours, minutes, date);\n    var scrollable = this.getScrollable();\n    scrollable.scrollBy({\n      top: coordinates.top - scrollable.scrollTop(),\n      left: 0\n    });\n  }\n  scrollTo(date, groups) {\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\n    if (!this._isValidScrollDate(date, throwWarning)) {\n      return;\n    }\n    var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\n    var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\n    var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\n    var scrollable = this.getScrollable();\n    var $scrollable = scrollable.$element();\n    var cellWidth = this.getCellWidth();\n    var offset = this.option(\"rtlEnabled\") ? cellWidth : 0;\n    var scrollableHeight = getHeight($scrollable);\n    var scrollableWidth = getWidth($scrollable);\n    var cellHeight = this.getCellHeight();\n    var xShift = (scrollableWidth - cellWidth) / 2;\n    var yShift = (scrollableHeight - cellHeight) / 2;\n    var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\n    var top = coordinates.top - scrollable.scrollTop() - yShift;\n    if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\n      top = 0;\n    }\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      setTimeout(() => {\n        scrollable.scrollBy({\n          left: left,\n          top: top\n        });\n      });\n    } else {\n      scrollable.scrollBy({\n        left: left,\n        top: top\n      });\n    }\n  }\n  _isValidScrollDate(date) {\n    var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\n    var min = this.getStartViewDate();\n    var max = this.getEndViewDate();\n    if (date < min || date > max) {\n      throwWarning && errors.log(\"W1008\", date);\n      return false;\n    }\n    return true;\n  }\n  needApplyCollectorOffset() {\n    return false;\n  }\n  removeDroppableCellClass($cellElement) {\n    var $cell = $cellElement || this._getDroppableCell();\n    null === $cell || void 0 === $cell ? void 0 : $cell.removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n  }\n  _getCoordinatesByCell($cell) {\n    var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\n    var rowIndex = $cell.parent().index();\n    var isAllDayCell = this._hasAllDayClass($cell);\n    var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\n    if (!(isAllDayCell && !isVerticalGrouping)) {\n      rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n    }\n    return {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    };\n  }\n  _isShowAllDayPanel() {\n    return this.option(\"showAllDayPanel\");\n  }\n  _getTimePanelCells() {\n    return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS));\n  }\n  _getRDateTableProps() {\n    return {\n      viewData: this.viewDataProvider.viewData,\n      dataCellTemplate: this.option(\"dataCellTemplate\"),\n      addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\n      groupOrientation: this.option(\"groupOrientation\"),\n      addVerticalSizesClassToRows: false\n    };\n  }\n  _updateSelectedCellDataOption(selectedCellData) {\n    var correctedSelectedCellData = selectedCellData.map(_ref3 => {\n      var {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groupIndex: groupIndex,\n        groups: groups\n      } = _ref3;\n      return {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groupIndex: groupIndex,\n        groups: groups\n      };\n    });\n    this.option(\"selectedCellData\", correctedSelectedCellData);\n    this._selectionChangedAction({\n      selectedCellData: correctedSelectedCellData\n    });\n  }\n  _getCellByData(cellData) {\n    var {\n      startDate: startDate,\n      groupIndex: groupIndex,\n      allDay: allDay,\n      index: index\n    } = cellData;\n    var position = this.viewDataProvider.findCellPositionInMap({\n      startDate: startDate,\n      groupIndex: groupIndex,\n      isAllDay: allDay,\n      index: index\n    });\n    if (!position) {\n      return;\n    }\n    return allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(position.columnIndex) : this._dom_getDateCell(position);\n  }\n  getDOMElementsMetaData() {\n    return this.cache.get(\"cellElementsMeta\", () => ({\n      dateTableCellsMeta: this._getDateTableDOMElementsInfo(),\n      allDayPanelCellsMeta: this._getAllDayPanelDOMElementsInfo()\n    }));\n  }\n  _getDateTableDOMElementsInfo() {\n    var dateTableCells = this._getAllCells(false);\n    if (!dateTableCells.length || !hasWindow()) {\n      return [[{}]];\n    }\n    var dateTable = this._getDateTable();\n    var dateTableRect = getBoundingRect(dateTable.get(0));\n    var columnsCount = this.viewDataProvider.getColumnsCount();\n    var result = [];\n    dateTableCells.each((index, cell) => {\n      var rowIndex = Math.floor(index / columnsCount);\n      if (result.length === rowIndex) {\n        result.push([]);\n      }\n      this._addCellMetaData(result[rowIndex], cell, dateTableRect);\n    });\n    return result;\n  }\n  _getAllDayPanelDOMElementsInfo() {\n    var result = [];\n    if (this.isAllDayPanelVisible && !this._isVerticalGroupedWorkSpace() && hasWindow()) {\n      var allDayCells = this._getAllCells(true);\n      if (!allDayCells.length) {\n        return [{}];\n      }\n      var allDayAppointmentContainer = this._$allDayPanel;\n      var allDayPanelRect = getBoundingRect(allDayAppointmentContainer.get(0));\n      allDayCells.each((_, cell) => {\n        this._addCellMetaData(result, cell, allDayPanelRect);\n      });\n    }\n    return result;\n  }\n  _addCellMetaData(cellMetaDataArray, cell, parentRect) {\n    var cellRect = getBoundingRect(cell);\n    cellMetaDataArray.push({\n      left: cellRect.left - parentRect.left,\n      top: cellRect.top - parentRect.top,\n      width: cellRect.width,\n      height: cellRect.height\n    });\n  }\n  _oldRender_getAllDayCellData(groupIndex) {\n    return (cell, rowIndex, columnIndex) => {\n      var validColumnIndex = columnIndex % this._getCellCount();\n      var options = this._getDateGenerationOptions(true);\n      var startDate = this.viewDataProvider.viewDataGenerator.getDateByCellIndices(options, rowIndex, validColumnIndex, this._getCellCountInDay());\n      startDate = dateUtils.trimTime(startDate);\n      var validGroupIndex = groupIndex || 0;\n      if (this.isGroupedByDate()) {\n        validGroupIndex = Math.floor(columnIndex % this._getGroupCount());\n      } else if (this._isHorizontalGroupedWorkSpace()) {\n        validGroupIndex = Math.floor(columnIndex / this._getCellCount());\n      }\n      var data = {\n        startDate: startDate,\n        endDate: startDate,\n        allDay: true,\n        groupIndex: validGroupIndex\n      };\n      var groupsArray = getCellGroups(validGroupIndex, this.option(\"groups\"));\n      if (groupsArray.length) {\n        data.groups = getGroupsObjectFromGroupsArray(groupsArray);\n      }\n      return {\n        key: CELL_DATA,\n        value: data\n      };\n    };\n  }\n  renderRWorkSpace(componentsToRender) {\n    var components = null !== componentsToRender && void 0 !== componentsToRender ? componentsToRender : {\n      header: true,\n      timePanel: true,\n      dateTable: true,\n      allDayPanel: true\n    };\n    components.header && this.renderRHeaderPanel();\n    components.timePanel && this.renderRTimeTable();\n    components.dateTable && this.renderRDateTable();\n    components.allDayPanel && this.renderRAllDayPanel();\n  }\n  renderRDateTable() {\n    utils.renovation.renderComponent(this, this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n  }\n  renderRGroupPanel() {\n    var options = {\n      groups: this.option(\"groups\"),\n      groupOrientation: this.option(\"groupOrientation\"),\n      groupByDate: this.isGroupedByDate(),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      className: this.verticalGroupTableClass,\n      groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions())\n    };\n    if (this.option(\"groups\").length) {\n      this._attachGroupCountClass();\n      utils.renovation.renderComponent(this, this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options);\n    } else {\n      this._detachGroupCountClass();\n    }\n  }\n  renderRAllDayPanel() {\n    var visible = this.isAllDayPanelVisible && !this.isGroupedAllDayPanel();\n    if (visible) {\n      var _this$virtualScrollin;\n      this._toggleAllDayVisibility(false);\n      var options = _extends({\n        viewData: this.viewDataProvider.viewData,\n        dataCellTemplate: this.option(\"dataCellTemplate\"),\n        startCellIndex: 0\n      }, (null === (_this$virtualScrollin = this.virtualScrollingDispatcher.horizontalVirtualScrolling) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.getRenderState()) || {});\n      utils.renovation.renderComponent(this, this._$allDayTable, dxrAllDayPanelTable, \"renovatedAllDayPanel\", options);\n      utils.renovation.renderComponent(this, this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {});\n    }\n    this._toggleAllDayVisibility(true);\n  }\n  renderRTimeTable() {\n    utils.renovation.renderComponent(this, this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\n      timePanelData: this.viewDataProvider.timePanelData,\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      groupOrientation: this.option(\"groupOrientation\")\n    });\n  }\n  renderRHeaderPanel() {\n    var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n    if (this.option(\"groups\").length) {\n      this._attachGroupCountClass();\n    } else {\n      this._detachGroupCountClass();\n    }\n    utils.renovation.renderComponent(this, this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\n      dateHeaderData: this.viewDataProvider.dateHeaderData,\n      groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions()),\n      dateCellTemplate: this.option(\"dateCellTemplate\"),\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      groups: this.option(\"groups\"),\n      groupByDate: this.isGroupedByDate(),\n      groupOrientation: this.option(\"groupOrientation\"),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      isRenderDateHeader: isRenderDateHeader\n    });\n  }\n  initDragBehavior(scheduler) {\n    if (!this.dragBehavior && scheduler) {\n      this.dragBehavior = new AppointmentDragBehavior(scheduler);\n      var $rootElement = $(scheduler.element());\n      this._createDragBehavior(this.getWorkArea(), $rootElement);\n      this._createDragBehavior(this.getAllDayContainer(), $rootElement);\n    }\n  }\n  _createDragBehavior($targetElement, $rootElement) {\n    var options = {\n      getItemData: (itemElement, appointments) => appointments._getItemData(itemElement),\n      getItemSettings: $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY)\n    };\n    this._createDragBehaviorBase($targetElement, $rootElement, options);\n  }\n  _createDragBehaviorBase(targetElement, rootElement, options) {\n    var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\n    this.dragBehavior.addTo(targetElement, createDragBehaviorConfig(container, rootElement, this.isDefaultDraggingMode, this.dragBehavior, () => {\n      if (!this.isDefaultDraggingMode) {\n        this.preventDefaultDragging = false;\n      }\n    }, () => {\n      if (!this.isDefaultDraggingMode) {\n        this.preventDefaultDragging = true;\n      }\n    }, () => this._getDroppableCell(), () => this._getDateTables(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), options));\n  }\n  _isRenderHeaderPanelEmptyCell() {\n    return this._isVerticalGroupedWorkSpace();\n  }\n  _dispose() {\n    super._dispose();\n    this.virtualScrollingDispatcher.dispose();\n  }\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      currentDate: new Date(),\n      intervalCount: 1,\n      startDate: null,\n      firstDayOfWeek: void 0,\n      startDayHour: 0,\n      endDayHour: 24,\n      hoursInterval: .5,\n      activeStateEnabled: true,\n      hoverStateEnabled: true,\n      groups: [],\n      showAllDayPanel: true,\n      allDayExpanded: false,\n      onCellClick: null,\n      crossScrollingEnabled: false,\n      dataCellTemplate: null,\n      timeCellTemplate: null,\n      resourceCellTemplate: null,\n      dateCellTemplate: null,\n      allowMultipleCellSelection: true,\n      indicatorTime: new Date(),\n      indicatorUpdateInterval: 5 * toMs(\"minute\"),\n      shadeUntilCurrentTime: true,\n      groupOrientation: \"horizontal\",\n      selectedCellData: [],\n      groupByDate: false,\n      scrolling: {\n        mode: \"standard\"\n      },\n      allDayPanelMode: \"all\",\n      renovateRender: true,\n      height: void 0,\n      draggingMode: \"outlook\",\n      onScrollEnd: () => {},\n      getHeaderHeight: void 0,\n      onRenderAppointments: () => {},\n      onShowAllDayPanel: () => {},\n      onSelectedCellsClick: () => {},\n      timeZoneCalculator: void 0,\n      schedulerHeight: void 0,\n      schedulerWidth: void 0\n    });\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"startDayHour\":\n        validateDayHours(args.value, this.option(\"endDayHour\"));\n        this._cleanWorkSpace();\n        break;\n      case \"endDayHour\":\n        validateDayHours(this.option(\"startDayHour\"), args.value);\n        this._cleanWorkSpace();\n        break;\n      case \"dateCellTemplate\":\n      case \"resourceCellTemplate\":\n      case \"dataCellTemplate\":\n      case \"timeCellTemplate\":\n      case \"hoursInterval\":\n      case \"firstDayOfWeek\":\n      case \"currentDate\":\n      case \"startDate\":\n        this._cleanWorkSpace();\n        break;\n      case \"groups\":\n        this._cleanView();\n        this._removeAllDayElements();\n        this._initGrouping();\n        this.repaint();\n        break;\n      case \"groupOrientation\":\n        this._initGroupedStrategy();\n        this._createAllDayPanelElements();\n        this._removeAllDayElements();\n        this._cleanWorkSpace();\n        this._toggleGroupByDateClass();\n        break;\n      case \"showAllDayPanel\":\n        if (this._isVerticalGroupedWorkSpace()) {\n          this._cleanView();\n          this._removeAllDayElements();\n          this._initGrouping();\n          this.repaint();\n        } else if (!this.isRenovatedRender()) {\n          this._toggleAllDayVisibility(true);\n        } else {\n          this.renderWorkSpace();\n        }\n        break;\n      case \"allDayExpanded\":\n        this._changeAllDayVisibility();\n        this._attachTablesEvents();\n        this._updateScrollable();\n        break;\n      case \"onSelectionChanged\":\n        this._createSelectionChangedAction();\n        break;\n      case \"onCellClick\":\n        this._createCellClickAction();\n        break;\n      case \"onCellContextMenu\":\n        this._attachContextMenuEvent();\n        break;\n      case \"intervalCount\":\n        this._cleanWorkSpace();\n        this._toggleWorkSpaceCountClass();\n        break;\n      case \"groupByDate\":\n        this._cleanWorkSpace();\n        this._toggleGroupByDateClass();\n        break;\n      case \"crossScrollingEnabled\":\n        this._toggleHorizontalScrollClass();\n        this._dateTableScrollable.option(this._dateTableScrollableConfig());\n        break;\n      case \"allDayPanelMode\":\n        this.updateShowAllDayPanel();\n        this.updateAppointments();\n        break;\n      case \"width\":\n        super._optionChanged(args);\n        this._dimensionChanged();\n        break;\n      case \"timeZoneCalculator\":\n      case \"allowMultipleCellSelection\":\n      case \"selectedCellData\":\n        break;\n      case \"renovateRender\":\n      case \"scrolling\":\n        this.repaint();\n        break;\n      case \"schedulerHeight\":\n      case \"schedulerWidth\":\n        this.virtualScrollingDispatcher.updateDimensions(true);\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  updateShowAllDayPanel() {\n    var isHiddenAllDayPanel = \"hidden\" === this.option(\"allDayPanelMode\");\n    this.option(\"onShowAllDayPanel\")(!isHiddenAllDayPanel);\n  }\n  _getVirtualScrollingDispatcherOptions() {\n    return {\n      getCellHeight: this.getCellHeight.bind(this),\n      getCellWidth: this.getCellWidth.bind(this),\n      getCellMinWidth: this.getCellMinWidth.bind(this),\n      isRTL: this._isRTL.bind(this),\n      getSchedulerHeight: () => this.option(\"schedulerHeight\"),\n      getSchedulerWidth: () => this.option(\"schedulerWidth\"),\n      getViewHeight: () => this.$element().height ? this.$element().height() : getHeight(this.$element()),\n      getViewWidth: () => this.$element().width ? this.$element().width() : getWidth(this.$element()),\n      getWindowHeight: () => getWindow().innerHeight,\n      getWindowWidth: () => getWindow().innerWidth,\n      getScrolling: () => this.option(\"scrolling\"),\n      getScrollableOuterWidth: this.getScrollableOuterWidth.bind(this),\n      getScrollable: this.getScrollable.bind(this),\n      createAction: this._createAction.bind(this),\n      updateRender: this.updateRender.bind(this),\n      updateGrid: this.updateGrid.bind(this),\n      getGroupCount: this._getGroupCount.bind(this),\n      isVerticalGrouping: this._isVerticalGroupedWorkSpace.bind(this),\n      getTotalRowCount: this._getTotalRowCount.bind(this),\n      getTotalCellCount: this._getTotalCellCount.bind(this)\n    };\n  }\n  _cleanWorkSpace() {\n    this._cleanView();\n    this._toggleGroupedClass();\n    this._toggleWorkSpaceWithOddCells();\n    this.virtualScrollingDispatcher.updateDimensions(true);\n    this._renderView();\n    this.option(\"crossScrollingEnabled\") && this._setTableSizes();\n    this.cache.clear();\n  }\n  _init() {\n    this._scrollSync = {};\n    this._viewDataProvider = null;\n    this._cellsSelectionState = null;\n    this._activeStateUnit = CELL_SELECTOR;\n    super._init();\n    this._initGrouping();\n    this._toggleHorizontalScrollClass();\n    this._toggleWorkSpaceCountClass();\n    this._toggleGroupByDateClass();\n    this._toggleWorkSpaceWithOddCells();\n    this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass());\n  }\n  _initPositionHelper() {\n    this.positionHelper = new PositionHelper({\n      key: this.option(\"key\"),\n      viewDataProvider: this.viewDataProvider,\n      viewStartDayHour: this.option(\"startDayHour\"),\n      viewEndDayHour: this.option(\"endDayHour\"),\n      cellDuration: this.getCellDuration(),\n      groupedStrategy: this._groupedStrategy,\n      isGroupedByDate: this.isGroupedByDate(),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      startViewDate: this.getStartViewDate(),\n      isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\n      groupCount: this._getGroupCount(),\n      isVirtualScrolling: this.isVirtualScrolling(),\n      getDOMMetaDataCallback: this.getDOMElementsMetaData.bind(this)\n    });\n  }\n  _initGrouping() {\n    this._initGroupedStrategy();\n    this._toggleGroupingDirectionClass();\n    this._toggleGroupByDateClass();\n  }\n  isVerticalOrientation() {\n    var orientation = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n    return \"vertical\" === orientation;\n  }\n  _initGroupedStrategy() {\n    var Strategy = this.isVerticalOrientation() ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\n    this._groupedStrategy = new Strategy(this);\n  }\n  _getDefaultGroupStrategy() {\n    return \"horizontal\";\n  }\n  _toggleHorizontalScrollClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"));\n  }\n  _toggleGroupByDateClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate());\n  }\n  _toggleWorkSpaceCountClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount());\n  }\n  _toggleWorkSpaceWithOddCells() {\n    this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells());\n  }\n  _toggleGroupingDirectionClass() {\n    this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace());\n  }\n  _getDateTableCellClass(rowIndex, columnIndex) {\n    var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, columnIndex + 1, rowIndex, columnIndex);\n  }\n  _getGroupHeaderClass(i) {\n    var cellClass = GROUP_HEADER_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1);\n  }\n  _initWorkSpaceUnits() {\n    this._$headerPanelContainer = $(\"<div>\").addClass(\"dx-scheduler-header-panel-container\");\n    this._$headerTablesContainer = $(\"<div>\").addClass(\"dx-scheduler-header-tables-container\");\n    this._$headerPanel = $(\"<table>\");\n    this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\n    this._$headerPanelEmptyCell = $(\"<div>\").addClass(\"dx-scheduler-header-panel-empty-cell\");\n    this._$allDayTable = $(\"<table>\");\n    this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\n    this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\n    this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\n    this._$sidebarScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-side-bar-scrollable-content\");\n    this._initAllDayPanelElements();\n    if (this.isRenovatedRender()) {\n      this.createRAllDayPanelElements();\n    } else {\n      this._createAllDayPanelElements();\n    }\n    this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\n    this._$dateTable = $(\"<table>\");\n    this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\n    this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS);\n  }\n  _initAllDayPanelElements() {\n    this._allDayTitles = [];\n    this._allDayTables = [];\n    this._allDayPanels = [];\n  }\n  _initDateTableScrollable() {\n    var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\n    this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig());\n    this._scrollSync.dateTable = getMemoizeScrollTo(() => this._dateTableScrollable);\n  }\n  _createWorkSpaceElements() {\n    if (this.option(\"crossScrollingEnabled\")) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      this._createWorkSpaceStaticElements();\n    }\n  }\n  _createWorkSpaceStaticElements() {\n    this._$dateTableContainer.append(this._$dateTable);\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._$dateTableContainer.append(this._$allDayContainer);\n      this._$dateTableScrollableContent.append(this._$groupTable, this._$timePanel, this._$dateTableContainer);\n      this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n      this._$headerTablesContainer.append(this._$headerPanel);\n    } else {\n      var _this$_$allDayPanel;\n      this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\n      this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n      this._$headerTablesContainer.append(this._$headerPanel, this._$allDayPanel);\n      null === (_this$_$allDayPanel = this._$allDayPanel) || void 0 === _this$_$allDayPanel ? void 0 : _this$_$allDayPanel.append(this._$allDayContainer, this._$allDayTable);\n    }\n    this._appendHeaderPanelEmptyCellIfNecessary();\n    this._$headerPanelContainer.append(this._$headerTablesContainer);\n    this.$element().append(this._$fixedContainer, this._$headerPanelContainer, this._dateTableScrollable.$element());\n  }\n  _createWorkSpaceScrollableElements() {\n    this.$element().append(this._$fixedContainer);\n    this._$flexContainer = $(\"<div>\").addClass(\"dx-scheduler-work-space-flex-container\");\n    this._createHeaderScrollable();\n    this._headerScrollable.$content().append(this._$headerPanel);\n    this._appendHeaderPanelEmptyCellIfNecessary();\n    this._$headerPanelContainer.append(this._$headerTablesContainer);\n    this.$element().append(this._$headerPanelContainer);\n    this.$element().append(this._$flexContainer);\n    this._createSidebarScrollable();\n    this._$flexContainer.append(this._dateTableScrollable.$element());\n    this._$dateTableContainer.append(this._$dateTable);\n    this._$dateTableScrollableContent.append(this._$dateTableContainer);\n    this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._$dateTableContainer.append(this._$allDayContainer);\n      this._$sidebarScrollableContent.append(this._$groupTable, this._$timePanel);\n    } else {\n      var _this$_$allDayPanel2;\n      this._headerScrollable.$content().append(this._$allDayPanel);\n      null === (_this$_$allDayPanel2 = this._$allDayPanel) || void 0 === _this$_$allDayPanel2 ? void 0 : _this$_$allDayPanel2.append(this._$allDayContainer, this._$allDayTable);\n      this._$sidebarScrollableContent.append(this._$timePanel);\n    }\n    this._sidebarScrollable.$content().append(this._$sidebarScrollableContent);\n  }\n  _appendHeaderPanelEmptyCellIfNecessary() {\n    this._isRenderHeaderPanelEmptyCell() && this._$headerPanelContainer.append(this._$headerPanelEmptyCell);\n  }\n  _createHeaderScrollable() {\n    var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this._$headerTablesContainer);\n    this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig());\n    this._scrollSync.header = getMemoizeScrollTo(() => this._headerScrollable);\n  }\n  _createSidebarScrollable() {\n    var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this._$flexContainer);\n    this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\n      useKeyboard: false,\n      showScrollbar: \"never\",\n      direction: \"vertical\",\n      useNative: false,\n      updateManually: true,\n      bounceEnabled: false,\n      onScroll: event => {\n        this._scrollSync.dateTable({\n          top: event.scrollOffset.top\n        });\n      }\n    });\n    this._scrollSync.sidebar = getMemoizeScrollTo(() => this._sidebarScrollable);\n  }\n  _attachTableClasses() {\n    this._addTableClass(this._$dateTable, DATE_TABLE_CLASS);\n    if (this._isVerticalGroupedWorkSpace()) {\n      var groupCount = this._getGroupCount();\n      for (var i = 0; i < groupCount; i++) {\n        this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS);\n      }\n    } else if (!this.isRenovatedRender()) {\n      this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS);\n    }\n  }\n  _attachHeaderTableClasses() {\n    this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS);\n  }\n  _addTableClass($el, className) {\n    $el && !$el.hasClass(className) && $el.addClass(className);\n  }\n  _initMarkup() {\n    this.cache.clear();\n    this._initWorkSpaceUnits();\n    this._initVirtualScrolling();\n    this._initDateTableScrollable();\n    this._createWorkSpaceElements();\n    super._initMarkup();\n    if (!this.option(\"crossScrollingEnabled\")) {\n      this._attachTableClasses();\n      this._attachHeaderTableClasses();\n    }\n    this._toggleGroupedClass();\n    this._renderView();\n    this._attachEvents();\n  }\n  _render() {\n    super._render();\n    this._renderDateTimeIndication();\n    this._setIndicationUpdateInterval();\n  }\n  _toggleGroupedClass() {\n    this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0);\n  }\n  _renderView() {\n    if (this.isRenovatedRender()) {\n      if (this._isVerticalGroupedWorkSpace()) {\n        this.renderRGroupPanel();\n      }\n    } else {\n      this._applyCellTemplates(this._renderGroupHeader());\n    }\n    this.renderWorkSpace();\n    if (this.isRenovatedRender()) {\n      this.virtualScrollingDispatcher.updateDimensions();\n    }\n    this._updateGroupTableHeight();\n    this.updateHeaderEmptyCellWidth();\n    this._shader = new VerticalShader(this);\n  }\n  updateCellsSelection() {\n    var renderOptions = this.generateRenderOptions();\n    this.viewDataProvider.updateViewData(renderOptions);\n    this.renderRWorkSpace({\n      timePanel: true,\n      dateTable: true,\n      allDayPanel: true\n    });\n  }\n  _renderDateTimeIndication() {\n    return noop();\n  }\n  _setIndicationUpdateInterval() {\n    return noop();\n  }\n  _refreshDateTimeIndication() {\n    return noop();\n  }\n  _detachGroupCountClass() {\n    [...VERTICAL_GROUP_COUNT_CLASSES].forEach(className => {\n      this.$element().removeClass(className);\n    });\n  }\n  _attachGroupCountClass() {\n    var className = this._groupedStrategy.getGroupCountClass(this.option(\"groups\"));\n    this.$element().addClass(className);\n  }\n  _getDateHeaderTemplate() {\n    return this.option(\"dateCellTemplate\");\n  }\n  _toggleAllDayVisibility(isUpdateScrollable) {\n    var showAllDayPanel = this._isShowAllDayPanel();\n    this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\n    this._changeAllDayVisibility();\n    isUpdateScrollable && this._updateScrollable();\n  }\n  _changeAllDayVisibility() {\n    this.cache.clear();\n    this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel());\n  }\n  _getDateTables() {\n    return this._$dateTable.add(this._$allDayTable);\n  }\n  _getDateTable() {\n    return this._$dateTable;\n  }\n  _removeAllDayElements() {\n    this._$allDayTable && this._$allDayTable.remove();\n    this._$allDayTitle && this._$allDayTitle.remove();\n  }\n  _cleanView() {\n    var _this$_shader;\n    this.cache.clear();\n    this._cleanTableWidths();\n    this.cellsSelectionState.clearSelectedAndFocusedCells();\n    if (!this.isRenovatedRender()) {\n      var _this$_$allDayTable, _this$_$sidebarTable;\n      this._$thead.empty();\n      this._$dateTable.empty();\n      this._$timePanel.empty();\n      this._$groupTable.empty();\n      null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\n      null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty();\n    }\n    null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\n    delete this._interval;\n  }\n  _clean() {\n    eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n    this._disposeRenovatedComponents();\n    super._clean();\n  }\n  _cleanTableWidths() {\n    this._$headerPanel.css(\"width\", \"\");\n    this._$dateTable.css(\"width\", \"\");\n    this._$allDayTable && this._$allDayTable.css(\"width\", \"\");\n  }\n  _disposeRenovatedComponents() {\n    var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\n    null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\n    this.renovatedAllDayPanel = void 0;\n    null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\n    this.renovatedDateTable = void 0;\n    null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\n    this.renovatedTimePanel = void 0;\n    null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\n    this.renovatedGroupPanel = void 0;\n    null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\n    this.renovatedHeaderPanel = void 0;\n  }\n  getGroupedStrategy() {\n    return this._groupedStrategy;\n  }\n  getFixedContainer() {\n    return this._$fixedContainer;\n  }\n  getAllDayContainer() {\n    return this._$allDayContainer;\n  }\n  updateRender() {\n    this.renderer.updateRender();\n  }\n  updateGrid() {\n    this.renderer._renderGrid();\n  }\n  updateAppointments() {\n    var _this$dragBehavior2;\n    this.option(\"onRenderAppointments\")();\n    null === (_this$dragBehavior2 = this.dragBehavior) || void 0 === _this$dragBehavior2 ? void 0 : _this$dragBehavior2.updateDragSource();\n  }\n  _createAllDayPanelElements() {\n    var groupCount = this._getGroupCount();\n    if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\n      for (var i = 0; i < groupCount; i++) {\n        var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\n        this._allDayTitles.push($allDayTitle);\n        this._$allDayTable = $(\"<table>\");\n        this._allDayTables.push(this._$allDayTable);\n        this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n        this._allDayPanels.push(this._$allDayPanel);\n      }\n    } else {\n      this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\n      this._$allDayTable = $(\"<table>\");\n      this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n    }\n  }\n  renderWorkSpace() {\n    var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n    this.cache.clear();\n    this.viewDataProvider.update(this.generateRenderOptions(), isGenerateNewViewData);\n    if (this.isRenovatedRender()) {\n      this.renderRWorkSpace();\n    } else {\n      this._renderDateHeader();\n      this._renderTimePanel();\n      this._renderGroupAllDayPanel();\n      this._renderDateTable();\n      this._renderAllDayPanel();\n    }\n    this._initPositionHelper();\n  }\n  _renderGroupHeader() {\n    var $container = this._getGroupHeaderContainer();\n    var groupCount = this._getGroupCount();\n    var cellTemplates = [];\n    if (groupCount) {\n      var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\n      this._attachGroupCountClass();\n      $container.append(groupRows.elements);\n      cellTemplates = groupRows.cellTemplates;\n    } else {\n      this._detachGroupCountClass();\n    }\n    return cellTemplates;\n  }\n  _applyCellTemplates(templates) {\n    null === templates || void 0 === templates ? void 0 : templates.forEach(function (template) {\n      template();\n    });\n  }\n  _makeGroupRows(groups, groupByDate) {\n    var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n    return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n      groupHeaderRowClass: GROUP_ROW_CLASS,\n      groupRowClass: GROUP_ROW_CLASS,\n      groupHeaderClass: this._getGroupHeaderClass.bind(this),\n      groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\n    }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate);\n  }\n  _renderDateHeader() {\n    var container = this._getDateHeaderContainer();\n    var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\n    var count = this._getCellCount();\n    var cellTemplate = this._getDateHeaderTemplate();\n    var repeatCount = this._getCalculateHeaderCellRepeatCount();\n    var templateCallbacks = [];\n    var groupByDate = this.isGroupedByDate();\n    if (!groupByDate) {\n      for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\n        for (var columnIndex = 0; columnIndex < count; columnIndex++) {\n          var templateIndex = rowIndex * count + columnIndex;\n          this._renderDateHeaderTemplate($headerRow, columnIndex, templateIndex, cellTemplate, templateCallbacks);\n        }\n      }\n      container.append($headerRow);\n    } else {\n      var colSpan = groupByDate ? this._getGroupCount() : 1;\n      for (var _columnIndex = 0; _columnIndex < count; _columnIndex++) {\n        var _templateIndex = _columnIndex * repeatCount;\n        var cellElement = this._renderDateHeaderTemplate($headerRow, _columnIndex, _templateIndex, cellTemplate, templateCallbacks);\n        cellElement.attr(\"colSpan\", colSpan);\n      }\n      container.prepend($headerRow);\n    }\n    this._applyCellTemplates(templateCallbacks);\n    return $headerRow;\n  }\n  _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\n    var validTemplateIndex = this.isGroupedByDate() ? Math.floor(templateIndex / this._getGroupCount()) : templateIndex;\n    var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\n    var {\n      text: text,\n      startDate: date\n    } = completeDateHeaderMap[completeDateHeaderMap.length - 1][validTemplateIndex];\n    var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\n    if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\n      templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\n        model: _extends({\n          text: text,\n          date: date\n        }, this._getGroupsForDateHeaderTemplate(templateIndex)),\n        index: templateIndex,\n        container: getPublicElement($cell)\n      }));\n    } else {\n      $cell.text(text);\n    }\n    container.append($cell);\n    return $cell;\n  }\n  _getGroupsForDateHeaderTemplate(templateIndex) {\n    var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n    var groupIndex;\n    var groups;\n    if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\n      groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\n      var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\n      groups = getGroupsObjectFromGroupsArray(groupsArray);\n    }\n    return {\n      groups: groups,\n      groupIndex: groupIndex\n    };\n  }\n  _getHeaderPanelCellClass(i) {\n    var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate());\n  }\n  _renderAllDayPanel(index) {\n    var cellCount = this._getCellCount();\n    if (!this._isVerticalGroupedWorkSpace()) {\n      cellCount *= this._getGroupCount() || 1;\n    }\n    var cellTemplates = this._renderTableBody({\n      container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\n      rowCount: 1,\n      cellCount: cellCount,\n      cellClass: this._getAllDayPanelCellClass.bind(this),\n      rowClass: ALL_DAY_TABLE_ROW_CLASS,\n      cellTemplate: this.option(\"dataCellTemplate\"),\n      getCellData: this._oldRender_getAllDayCellData(index),\n      groupIndex: index\n    }, true);\n    this._toggleAllDayVisibility(true);\n    this._applyCellTemplates(cellTemplates);\n  }\n  _renderGroupAllDayPanel() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      var groupCount = this._getGroupCount();\n      for (var i = 0; i < groupCount; i++) {\n        this._renderAllDayPanel(i);\n      }\n    }\n  }\n  _getAllDayPanelCellClass(i, j) {\n    var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1);\n  }\n  _renderTimePanel() {\n    var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\n    var getData = (rowIndex, field) => {\n      var allDayPanelsCount = 0;\n      if (this.isAllDayPanelVisible) {\n        allDayPanelsCount = 1;\n      }\n      if (this.isGroupedAllDayPanel()) {\n        allDayPanelsCount = Math.ceil((rowIndex + 1) / this._getRowCount());\n      }\n      var validRowIndex = rowIndex + allDayPanelsCount;\n      return this.viewDataProvider.completeTimePanelMap[validRowIndex][field];\n    };\n    this._renderTableBody({\n      container: getPublicElement(this._$timePanel),\n      rowCount: this._getTimePanelRowCount() * repeatCount,\n      cellCount: 1,\n      cellClass: this._getTimeCellClass.bind(this),\n      rowClass: TIME_PANEL_ROW_CLASS,\n      cellTemplate: this.option(\"timeCellTemplate\"),\n      getCellText: rowIndex => getData(rowIndex, \"text\"),\n      getCellDate: rowIndex => getData(rowIndex, \"startDate\"),\n      groupCount: this._getGroupCount(),\n      allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\n      getTemplateData: (rowIndex => {\n        if (!this._isVerticalGroupedWorkSpace()) {\n          return {};\n        }\n        var groupIndex = this._getGroupIndex(rowIndex, 0);\n        var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\n        var groups = getGroupsObjectFromGroupsArray(groupsArray);\n        return {\n          groupIndex: groupIndex,\n          groups: groups\n        };\n      }).bind(this)\n    });\n  }\n  _getTimeCellClass(i) {\n    var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n    return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass;\n  }\n  _renderDateTable() {\n    var groupCount = this._getGroupCount();\n    this._renderTableBody({\n      container: getPublicElement(this._$dateTable),\n      rowCount: this._getTotalRowCount(groupCount),\n      cellCount: this._getTotalCellCount(groupCount),\n      cellClass: this._getDateTableCellClass.bind(this),\n      rowClass: DATE_TABLE_ROW_CLASS,\n      cellTemplate: this.option(\"dataCellTemplate\"),\n      getCellData: (_, rowIndex, columnIndex) => {\n        var isGroupedAllDayPanel = this.isGroupedAllDayPanel();\n        var validRowIndex = rowIndex;\n        if (isGroupedAllDayPanel) {\n          var rowCount = this._getRowCount();\n          var allDayPanelsCount = Math.ceil(rowIndex / rowCount);\n          validRowIndex += allDayPanelsCount;\n        }\n        var cellData = this.viewDataProvider.viewDataMap.dateTableMap[validRowIndex][columnIndex].cellData;\n        return {\n          value: this._filterCellDataFields(cellData),\n          fullValue: cellData,\n          key: CELL_DATA\n        };\n      },\n      allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\n      groupCount: groupCount,\n      groupByDate: this.option(\"groupByDate\")\n    });\n  }\n  _insertAllDayRowsIntoDateTable() {\n    return this._groupedStrategy.insertAllDayRowsIntoDateTable();\n  }\n  _renderTableBody(options, delayCellTemplateRendering) {\n    var result = [];\n    if (!delayCellTemplateRendering) {\n      this._applyCellTemplates(tableCreator.makeTable(options));\n    } else {\n      result = tableCreator.makeTable(options);\n    }\n    return result;\n  }\n}\nvar createDragBehaviorConfig = (container, rootElement, isDefaultDraggingMode, dragBehavior, enableDefaultDragging, disableDefaultDragging, getDroppableCell, getDateTables, removeDroppableCellClass, getCellWidth, options) => {\n  var state = {\n    dragElement: void 0,\n    itemData: void 0\n  };\n  var isItemDisabled = () => {\n    var {\n      itemData: itemData\n    } = state;\n    if (itemData) {\n      var getter = compileGetter(\"disabled\");\n      return getter(itemData);\n    }\n    return true;\n  };\n  var cursorOffset = options.isSetCursorOffset ? () => {\n    var $dragElement = $(state.dragElement);\n    return {\n      x: getWidth($dragElement) / 2,\n      y: getHeight($dragElement) / 2\n    };\n  } : void 0;\n  return {\n    container: container,\n    dragTemplate: () => state.dragElement,\n    onDragStart: e => {\n      if (!isDefaultDraggingMode) {\n        disableDefaultDragging();\n      }\n      var canceled = e.cancel;\n      var event = e.event;\n      var $itemElement = $(e.itemElement);\n      var appointments = e.component._appointments;\n      state.itemData = options.getItemData(e.itemElement, appointments);\n      var settings = options.getItemSettings($itemElement, e);\n      var initialPosition = options.initialPosition;\n      if (!isItemDisabled()) {\n        event.data = event.data || {};\n        if (!canceled) {\n          if (!settings.isCompact) {\n            dragBehavior.updateDragSource(state.itemData, settings);\n          }\n          state.dragElement = ((itemData, settings, appointments) => {\n            var appointmentIndex = appointments.option(\"items\").length;\n            settings.isCompact = false;\n            settings.virtual = false;\n            var items = appointments._renderItem(appointmentIndex, {\n              itemData: itemData,\n              settings: [settings]\n            });\n            return items[0];\n          })(state.itemData, settings, appointments);\n          event.data.itemElement = state.dragElement;\n          event.data.initialPosition = null !== initialPosition && void 0 !== initialPosition ? initialPosition : locate($(state.dragElement));\n          event.data.itemData = state.itemData;\n          event.data.itemSettings = settings;\n          dragBehavior.onDragStart(event.data);\n          resetPosition($(state.dragElement));\n        }\n      }\n    },\n    onDragMove: () => {\n      if (isDefaultDraggingMode) {\n        return;\n      }\n      var elements = (() => {\n        var appointmentWidth = getWidth(state.dragElement);\n        var cellWidth = getCellWidth();\n        var isWideAppointment = appointmentWidth > cellWidth;\n        var isNarrowAppointment = appointmentWidth <= DRAGGING_MOUSE_FAULT;\n        var dragElementContainer = $(state.dragElement).parent();\n        var boundingRect = getBoundingRect(dragElementContainer.get(0));\n        var newX = boundingRect.left;\n        var newY = boundingRect.top;\n        if (isWideAppointment) {\n          return domAdapter.elementsFromPoint(newX + DRAGGING_MOUSE_FAULT, newY + DRAGGING_MOUSE_FAULT);\n        } else if (isNarrowAppointment) {\n          return domAdapter.elementsFromPoint(newX, newY);\n        }\n        return domAdapter.elementsFromPoint(newX + appointmentWidth / 2, newY + DRAGGING_MOUSE_FAULT);\n      })();\n      var isMoveUnderControl = !!elements.find(el => el === rootElement.get(0));\n      var dateTables = getDateTables();\n      var droppableCell = elements.find(el => {\n        var classList = el.classList;\n        var isCurrentSchedulerElement = 1 === dateTables.find(el).length;\n        return isCurrentSchedulerElement && (classList.contains(DATE_TABLE_CELL_CLASS) || classList.contains(ALL_DAY_TABLE_CELL_CLASS));\n      });\n      if (droppableCell) {\n        if (!getDroppableCell().is(droppableCell)) {\n          removeDroppableCellClass();\n        }\n        $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n      } else if (!isMoveUnderControl) {\n        removeDroppableCellClass();\n      }\n    },\n    onDragEnd: e => {\n      var _state$dragElement;\n      if (!isDefaultDraggingMode) {\n        enableDefaultDragging();\n      }\n      if (!isItemDisabled()) {\n        dragBehavior.onDragEnd(e);\n      }\n      null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\n      removeDroppableCellClass();\n    },\n    cursorOffset: cursorOffset,\n    filter: options.filter\n  };\n};\nexport default SchedulerWorkSpace;","map":{"version":3,"names":["_extends","setWidth","getOuterHeight","getOuterWidth","setOuterHeight","getHeight","getWidth","$","domAdapter","eventsEngine","dateUtils","getWindow","hasWindow","getPublicElement","extend","getBoundingRect","messageLocalization","noop","isDefined","addNamespace","isMouseEvent","pointerEvents","errors","name","clickEventName","contextMenuEventName","enter","dragEventEnter","leave","dragEventLeave","drop","dragEventDrop","Scrollable","HorizontalGroupedStrategy","VerticalGroupedStrategy","tableCreatorModule","tableCreator","VerticalShader","AppointmentDragBehavior","APPOINTMENT_SETTINGS_KEY","FIXED_CONTAINER_CLASS","VIRTUAL_CELL_CLASS","TIME_PANEL_CLASS","DATE_TABLE_CLASS","DATE_TABLE_ROW_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CONTENT_CLASS","VERTICAL_GROUP_COUNT_CLASSES","WidgetObserver","resetPosition","locate","VirtualScrollingDispatcher","VirtualScrollingRenderer","ViewDataProvider","dxrDateTableLayout","dxrAllDayPanelTable","dxrAllDayPanelTitle","dxrTimePanelTableLayout","dxrGroupPanel","dxrDateHeader","CellsSelectionState","Cache","CellsSelectionController","calculateViewStartDate","getViewStartByOptions","validateDayHours","getStartViewDateTimeOffset","isDateAndTimeView","calculateIsGroupedAllDayPanel","getCellDuration","createResourcesTree","getCellGroups","getGroupsObjectFromGroupsArray","getGroupCount","getCellWidth","getCellHeight","getAllDayHeight","getMaxAllowedPosition","PositionHelper","utils","compileGetter","getMemoizeScrollTo","DRAGGING_MOUSE_FAULT","abstract","toMs","dateToMilliseconds","COMPONENT_CLASS","GROUPED_WORKSPACE_CLASS","VERTICAL_GROUPED_WORKSPACE_CLASS","WORKSPACE_VERTICAL_GROUP_TABLE_CLASS","WORKSPACE_WITH_BOTH_SCROLLS_CLASS","WORKSPACE_WITH_COUNT_CLASS","WORKSPACE_WITH_GROUP_BY_DATE_CLASS","WORKSPACE_WITH_ODD_CELLS_CLASS","TIME_PANEL_CELL_CLASS","TIME_PANEL_ROW_CLASS","ALL_DAY_PANEL_CLASS","ALL_DAY_TABLE_CLASS","ALL_DAY_CONTAINER_CLASS","ALL_DAY_TITLE_CLASS","ALL_DAY_TABLE_CELL_CLASS","ALL_DAY_TABLE_ROW_CLASS","WORKSPACE_WITH_ALL_DAY_CLASS","WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS","WORKSPACE_WITH_MOUSE_SELECTION_CLASS","HORIZONTAL_SIZES_CLASS","VERTICAL_SIZES_CLASS","HEADER_PANEL_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_ROW_CLASS","GROUP_HEADER_CLASS","DATE_TABLE_CELL_CLASS","DATE_TABLE_FOCUSED_CELL_CLASS","VIRTUAL_ROW_CLASS","DATE_TABLE_DROPPABLE_CELL_CLASS","SCHEDULER_HEADER_SCROLLABLE_CLASS","SCHEDULER_SIDEBAR_SCROLLABLE_CLASS","SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS","SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME","down","DragEventNames","ENTER","DROP","LEAVE","SCHEDULER_CELL_DXCLICK_EVENT_NAME","SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME","SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME","up","SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME","move","CELL_DATA","DATE_TABLE_MIN_CELL_WIDTH","DAY_MS","HOUR_MS","DRAG_AND_DROP_SELECTOR","concat","CELL_SELECTOR","CELL_INDEX_CALCULATION_EPSILON","SchedulerWorkSpace","viewDataProvider","_viewDataProvider","type","cache","_cache","cellsSelectionState","_cellsSelectionState","selectedCellsOption","option","length","validSelectedCells","map","selectedCell","groups","_getGroupCount","groupIndex","_getGroupIndexByResourceId","setSelectedCellsByData","cellsSelectionController","_cellsSelectionController","isAllDayPanelVisible","_isShowAllDayPanel","supportAllDayRow","verticalGroupTableClass","viewDirection","renovatedHeaderPanelComponent","timeZoneCalculator","isDefaultDraggingMode","_supportedKeys","clickHandler","e","preventDefault","stopPropagation","selectedCells","getSelectedCells","selectedCellsElement","cellData","_getCellByData","filter","cell","target","_showPopup","_cellClickAction","event","cellElement","onArrowPressed","key","_this$cellsSelectionS","focusedCellData","focusedCell","isAllDayPanelCell","allDay","_isVerticalGroupedWorkSpace","isMultiSelection","shiftKey","isMultiSelectionAllowed","isRTL","_isRTL","groupCount","isGroupedByDate","isHorizontalGrouping","_isHorizontalGroupedWorkSpace","focusedCellPosition","findCellPositionInMap","isAllDay","edgeIndices","getGroupEdgeIndices","getViewEdgeIndices","nextCellData","handleArrowClick","viewType","getCellDataByPosition","getCellData","bind","_processNextSelectedCell","space","downArrow","upArrow","rightArrow","leftArrow","_moveToCell","$cell","currentCellData","_getFullCellData","nextFocusedCellData","moveToCell","isVirtualCell","hasClass","nextCellPosition","startDate","index","isSameCell","_dom_getAllDayPanelCell","columnIndex","_dom_getDateCell","isNextCellAllDay","_setSelectedCellsStateAndUpdateSelection","_dateTableScrollable","scrollToElement","cellPosition","$nextFocusedCell","nextCellCoordinates","rowIndex","setFocusedCell","setSelectedCells","updateCellsSelection","_updateSelectedCellDataOption","_hasAllDayClass","_focusInHandler","is","_focusTarget","_isCellClick","_contextMenuHandled","apply","arguments","restoreSelectedAndFocusedCells","cellCoordinates","_focusOutHandler","_disposed","releaseSelectedAndFocusedCells","updateViewData","generateRenderOptions","$element","_isWorkSpaceWithCount","_isWorkspaceWithOddCells","isVirtualScrolling","_getRealGroupOrientation","createRAllDayPanelElements","_$allDayPanel","addClass","_$allDayTitle","appendTo","_$headerPanelEmptyCell","_dateTableScrollableConfig","config","useKeyboard","bounceEnabled","updateManually","onScroll","_this$_groupedStrateg","_groupedStrategy","clear","_needCreateCrossScrolling","_createCrossScrollingConfig","virtualScrollingDispatcher","horizontalScrollingAllowed","height","currentOnScroll","handleOnScrollEvent","scrollOffset","_ref","_onScroll","direction","_scrollSync","sidebar","top","header","left","onEnd","_headerScrollableConfig","showScrollbar","useNative","dateTable","_visibilityChanged","visible","_updateGroupTableHeight","_setTableSizes","_attachTableClasses","cellWidth","getCellMinWidth","minWidth","getWorkSpaceMinWidth","totalCellCount","_getTotalCellCount","width","_$headerPanel","_$dateTable","_$allDayTable","_attachHeaderTableClasses","_updateScrollable","_dimensionChanged","_isVisible","updateHeaderEmptyCellWidth","_getElementClass","_getRowCount","getRowCount","intervalCount","currentDate","hoursInterval","startDayHour","endDayHour","_getCellCount","getCellCount","isRenovatedRender","renovatedRenderSupported","_isVirtualModeOn","_initVirtualScrolling","dispose","_getVirtualScrollingDispatcherOptions","attachScrollableEvents","renderer","onDataSourceChanged","isGroupedAllDayPanel","isProvideVirtualCellsWidth","_this$_getToday","groupOrientation","_getDefaultGroupStrategy","options","groupByDate","startRowIndex","startCellIndex","today","_getToday","call","headerCellTextFormat","_getFormat","getDateForHeaderText","_","date","cellDuration","firstDayOfWeek","getRenderState","_setHorizontalGroupHeaderCellsHeight","_isRenderHeaderPanelEmptyCell","timePanelWidth","getTimePanelWidth","groupPanelWidth","getGroupTableWidth","css","_isGroupsSpecified","resources","id","resourceTree","_getGroupIndexRecursively","currentKey","currentValue","reduce","prevIndex","_ref2","leafIndex","value","children","areValuesEqual","_getViewStartByOptions","_getIntervalDuration","_calculateViewStartDate","getIntervalDuration","_getHeaderDate","getStartViewDate","_firstDayOfWeek","getFirstDayOfWeek","_attachEvents","_createSelectionChangedAction","_attachClickEvent","_attachContextMenuEvent","that","pointerDownAction","_createAction","_pointerDownHandler","_createCellClickAction","cellSelector","off","on","which","_createActionByOption","afterExecute","_cellClickHandler","args","_selectionChangedAction","_handleSelectedCellsClick","$target","_getCoordinatesByCell","isAllDayCell","firstCellData","lastCellData","result","endDate","_createContextMenuAction","eventName","NAME","_contextMenuHandler","_contextMenuAction","_getGroupHeaderContainer","_$groupTable","_$thead","_getDateHeaderContainer","_getCalculateHeaderCellRepeatCount","calculateHeaderCellRepeatCount","_this$_headerScrollab","_this$_sidebarScrolla","update","_headerScrollable","_sidebarScrollable","_getTimePanelRowCount","_getCellCountInDay","getCellCountInDay","getTotalCellCount","_getTotalRowCount","includeAllDayPanelRows","getTotalRowCount","_getGroupIndex","getGroupIndex","calculateEndDate","viewDataGenerator","getInterval","_attachTablesEvents","element","_attachDragEvents","_attachPointerEvents","_detachDragEvents","checkDropTarget","_isOutsideScrollable","preventDefaultDragging","removeDroppableCellClass","_this$dragBehavior","_this$dragBehavior$dr","dragBehavior","dragBetweenComponentsPromise","removeDroppableClasses","then","isPointerDown","getDocument","removeClass","getWorkArea","_$dateTableContainer","getScrollable","getScrollableScrollTop","scrollTop","getGroupedScrollableScrollTop","getScrollableScrollLeft","scrollLeft","getScrollableOuterWidth","scrollWidth","getScrollableContainer","container","getHeaderPanelHeight","_$timePanel","get","getWorkSpaceLeftOffset","getLeftOffset","_getCellCoordinatesByIndex","Math","floor","_getDateGenerationOptions","_this$viewDataProvide","isWorkView","interval","startViewDate","_getIntervalBetween","firstViewDate","startDayTime","timeZoneOffset","getTimezonesDifference","fullInterval","getTime","days","_getDaysOfInterval","weekendsCount","_getWeekendsCount","hiddenInterval","visibleDayDuration","getVisibleDayDuration","_updateIndex","_getDroppableCell","_getDateTables","find","_getWorkSpaceWidth","totalWidth","groupTableWidth","_getCellByCoordinates","inAllDayRow","indexes","prepareCellIndexes","position","eq","_getCells","cellClass","i","cells","toArray","_getFirstAndLastDataTableCell","selector","$cells","_getAllCells","_getGroupHeaderCells","_getScrollCoordinates","hours","minutes","Date","setHours","findGlobalCellPosition","calculateCoordinatesByDataAndPosition","$dateTableScrollableElement","scrollableSize","window","isTargetInAllDayPanel","closest","isOutsideHorizontalScrollable","pageX","scrollX","isOutsideVerticalScrollable","pageY","scrollY","setCellDataCache","JSON","stringify","set","setCellDataCacheAlias","appointment","geometry","aliasKey","keepOriginalHours","_filterCellDataFields","currentCell","_getDataByCell","_getVirtualRowOffset","virtualRowOffset","_getVirtualCellOffset","virtualCellOffset","parent","topVirtualRowsCount","leftVirtualCellsCount","getCellIndexByDate","timeInterval","startViewDateOffset","dateTimeStamp","getDroppableCellIndex","$droppableCell","$row","getDataByDroppableCell","getDateRange","getEndViewDateByEndDayHour","getRoundedCellWidth","startIndex","cellCount","elementWidth","getDOMElementsMetaData","getAllDayOffset","getCellIndexByCoordinates","coordinates","cellHeight","topIndex","leftIndex","getEndViewDate","getLastCellEndDate","getLastViewDateByEndDayHour","getGroupBounds","groupBounds","getGroupBoundsVertical","getGroupBoundsHorizontal","getGroupBoundsRtlCorrection","$firstAndLastCells","getGroupBoundsOffset","groupedDataMap","right","needRecalculateResizableArea","getCellDataByCoordinates","cellIndex","getVisibleBounds","$scrollable","scrolledCellCount","bottom","updateScrollPosition","newDate","createDate","path","needUpdateScrollPosition","scrollTo","_getCellsInViewport","time","trimmedTime","trimTime","currentResult","cellStartDate","cellEndDate","cellGroupIndex","cellStartTime","cellEndTime","totalColumnCount","scrollableScrollTop","scrollableScrollLeft","fullScrolledRowCount","scrolledRowCount","fullScrolledColumnCount","scrolledColumnCount","rowCount","columnCount","each","push","scrollToTime","_isValidScrollDate","scrollable","scrollBy","throwWarning","isScrollToAllDay","getHours","getMinutes","offset","scrollableHeight","scrollableWidth","xShift","yShift","setTimeout","min","max","log","needApplyCollectorOffset","$cellElement","isVerticalGrouping","_getTimePanelCells","_getRDateTableProps","viewData","dataCellTemplate","addDateTableClass","addVerticalSizesClassToRows","selectedCellData","correctedSelectedCellData","_ref3","dateTableCellsMeta","_getDateTableDOMElementsInfo","allDayPanelCellsMeta","_getAllDayPanelDOMElementsInfo","dateTableCells","_getDateTable","dateTableRect","columnsCount","getColumnsCount","_addCellMetaData","allDayCells","allDayAppointmentContainer","allDayPanelRect","cellMetaDataArray","parentRect","cellRect","_oldRender_getAllDayCellData","validColumnIndex","getDateByCellIndices","validGroupIndex","data","groupsArray","renderRWorkSpace","componentsToRender","components","timePanel","allDayPanel","renderRHeaderPanel","renderRTimeTable","renderRDateTable","renderRAllDayPanel","renovation","renderComponent","renderRGroupPanel","resourceCellTemplate","className","groupPanelData","getGroupPanelData","_attachGroupCountClass","_detachGroupCountClass","_this$virtualScrollin","_toggleAllDayVisibility","horizontalVirtualScrolling","timePanelData","timeCellTemplate","isRenderDateHeader","dateHeaderData","dateCellTemplate","initDragBehavior","scheduler","$rootElement","_createDragBehavior","getAllDayContainer","$targetElement","getItemData","itemElement","appointments","_getItemData","getItemSettings","$itemElement","_createDragBehaviorBase","targetElement","rootElement","addTo","createDragBehaviorConfig","_dispose","_getDefaultOptions","activeStateEnabled","hoverStateEnabled","showAllDayPanel","allDayExpanded","onCellClick","crossScrollingEnabled","allowMultipleCellSelection","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","scrolling","mode","allDayPanelMode","renovateRender","draggingMode","onScrollEnd","getHeaderHeight","onRenderAppointments","onShowAllDayPanel","onSelectedCellsClick","schedulerHeight","schedulerWidth","_optionChanged","_cleanWorkSpace","_cleanView","_removeAllDayElements","_initGrouping","repaint","_initGroupedStrategy","_createAllDayPanelElements","_toggleGroupByDateClass","renderWorkSpace","_changeAllDayVisibility","_toggleWorkSpaceCountClass","_toggleHorizontalScrollClass","updateShowAllDayPanel","updateAppointments","updateDimensions","isHiddenAllDayPanel","getSchedulerHeight","getSchedulerWidth","getViewHeight","getViewWidth","getWindowHeight","innerHeight","getWindowWidth","innerWidth","getScrolling","createAction","updateRender","updateGrid","_toggleGroupedClass","_toggleWorkSpaceWithOddCells","_renderView","_init","_activeStateUnit","_initPositionHelper","positionHelper","viewStartDayHour","viewEndDayHour","groupedStrategy","rtlEnabled","getDOMMetaDataCallback","_toggleGroupingDirectionClass","isVerticalOrientation","orientation","Strategy","toggleClass","_getDateTableCellClass","addAdditionalGroupCellClasses","_getGroupHeaderClass","_initWorkSpaceUnits","_$headerPanelContainer","_$headerTablesContainer","_$fixedContainer","_$allDayContainer","_$dateTableScrollableContent","_$sidebarScrollableContent","_initAllDayPanelElements","_allDayTitles","_allDayTables","_allDayPanels","_initDateTableScrollable","$dateTableScrollable","_createComponent","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_createWorkSpaceStaticElements","append","$content","_this$_$allDayPanel","_appendHeaderPanelEmptyCellIfNecessary","_$flexContainer","_createHeaderScrollable","_createSidebarScrollable","_this$_$allDayPanel2","$headerScrollable","$timePanelScrollable","_addTableClass","$el","_initMarkup","_render","_renderDateTimeIndication","_setIndicationUpdateInterval","_applyCellTemplates","_renderGroupHeader","_shader","renderOptions","_refreshDateTimeIndication","forEach","getGroupCountClass","_getDateHeaderTemplate","isUpdateScrollable","add","remove","_this$_shader","_cleanTableWidths","clearSelectedAndFocusedCells","_this$_$allDayTable","_this$_$sidebarTable","empty","_$sidebarTable","clean","_interval","_clean","_disposeRenovatedComponents","_this$renovatedAllDay","_this$renovatedDateTa","_this$renovatedTimePa","_this$renovatedGroupP","_this$renovatedHeader","renovatedAllDayPanel","renovatedDateTable","renovatedTimePanel","renovatedGroupPanel","renovatedHeaderPanel","getGroupedStrategy","getFixedContainer","_renderGrid","_this$dragBehavior2","updateDragSource","$allDayTitle","text","format","isGenerateNewViewData","_renderDateHeader","_renderTimePanel","_renderGroupAllDayPanel","_renderDateTable","_renderAllDayPanel","$container","cellTemplates","groupRows","_makeGroupRows","elements","templates","template","tableCreatorStrategy","VERTICAL","HORIZONTAL","makeGroupedTable","groupHeaderRowClass","groupRowClass","groupHeaderClass","groupHeaderContentClass","$headerRow","count","cellTemplate","repeatCount","templateCallbacks","templateIndex","_renderDateHeaderTemplate","colSpan","_columnIndex","_templateIndex","attr","prepend","panelCellIndex","validTemplateIndex","completeDateHeaderMap","_getHeaderPanelCellClass","render","model","_getGroupsForDateHeaderTemplate","indexMultiplier","_renderTableBody","_getAllDayPanelCellClass","rowClass","j","calculateTimeCellRepeatCount","getData","field","allDayPanelsCount","ceil","validRowIndex","completeTimePanelMap","_getTimeCellClass","getCellText","getCellDate","allDayElements","_insertAllDayRowsIntoDateTable","getTemplateData","viewDataMap","dateTableMap","fullValue","insertAllDayRowsIntoDateTable","delayCellTemplateRendering","makeTable","enableDefaultDragging","disableDefaultDragging","getDroppableCell","getDateTables","state","dragElement","itemData","isItemDisabled","getter","cursorOffset","isSetCursorOffset","$dragElement","x","y","dragTemplate","onDragStart","canceled","cancel","component","_appointments","settings","initialPosition","isCompact","appointmentIndex","virtual","items","_renderItem","itemSettings","onDragMove","appointmentWidth","isWideAppointment","isNarrowAppointment","dragElementContainer","boundingRect","newX","newY","elementsFromPoint","isMoveUnderControl","el","dateTables","droppableCell","classList","isCurrentSchedulerElement","contains","onDragEnd","_state$dragElement"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    setWidth,\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    setOuterHeight,\r\n    getHeight,\r\n    getWidth\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport messageLocalization from \"../../../localization/message\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    addNamespace,\r\n    isMouseEvent\r\n} from \"../../../events/utils/index\";\r\nimport pointerEvents from \"../../../events/pointer\";\r\nimport errors from \"../../widget/ui.errors\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../events/click\";\r\nimport {\r\n    name as contextMenuEventName\r\n} from \"../../../events/contextmenu\";\r\nimport {\r\n    enter as dragEventEnter,\r\n    leave as dragEventLeave,\r\n    drop as dragEventDrop\r\n} from \"../../../events/drag\";\r\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\r\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\r\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\r\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\r\nimport {\r\n    APPOINTMENT_SETTINGS_KEY\r\n} from \"../constants\";\r\nimport {\r\n    FIXED_CONTAINER_CLASS,\r\n    VIRTUAL_CELL_CLASS,\r\n    TIME_PANEL_CLASS,\r\n    DATE_TABLE_CLASS,\r\n    DATE_TABLE_ROW_CLASS,\r\n    GROUP_ROW_CLASS,\r\n    GROUP_HEADER_CONTENT_CLASS,\r\n    VERTICAL_GROUP_COUNT_CLASSES\r\n} from \"../classes\";\r\nimport WidgetObserver from \"../../../__internal/scheduler/base/m_widget_observer\";\r\nimport {\r\n    resetPosition,\r\n    locate\r\n} from \"../../../animation/translator\";\r\nimport {\r\n    VirtualScrollingDispatcher,\r\n    VirtualScrollingRenderer\r\n} from \"./ui.scheduler.virtual_scrolling\";\r\nimport ViewDataProvider from \"./view_model/view_data_provider\";\r\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\r\nimport dxrAllDayPanelTable from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/table.j\";\r\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\r\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\r\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\r\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\r\nimport CellsSelectionState from \"./cells_selection_state\";\r\nimport {\r\n    Cache\r\n} from \"./cache\";\r\nimport {\r\n    CellsSelectionController\r\n} from \"./cells_selection_controller\";\r\nimport {\r\n    calculateViewStartDate,\r\n    getViewStartByOptions,\r\n    validateDayHours,\r\n    getStartViewDateTimeOffset,\r\n    isDateAndTimeView,\r\n    calculateIsGroupedAllDayPanel,\r\n    getCellDuration\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    createResourcesTree,\r\n    getCellGroups,\r\n    getGroupsObjectFromGroupsArray,\r\n    getGroupCount\r\n} from \"../../../__internal/scheduler/resources/m_utils\";\r\nimport {\r\n    getCellWidth,\r\n    getCellHeight,\r\n    getAllDayHeight,\r\n    getMaxAllowedPosition,\r\n    PositionHelper\r\n} from \"./helpers/positionHelper\";\r\nimport {\r\n    utils\r\n} from \"../utils\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../core/utils/data\";\r\nimport {\r\n    getMemoizeScrollTo\r\n} from \"../../../renovation/ui/common/utils/scroll/getMemoizeScrollTo\";\r\nvar DRAGGING_MOUSE_FAULT = 10;\r\nvar abstract = WidgetObserver.abstract;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\r\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\r\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\r\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\r\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\r\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\r\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\r\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\r\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\r\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\r\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\r\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\r\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\r\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\r\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\r\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\r\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\r\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\r\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\r\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\r\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\r\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\r\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\r\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\r\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\r\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\r\nvar DragEventNames = {\r\n    ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\r\n    DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\r\n    LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\r\n};\r\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\r\nvar CELL_DATA = \"dxCellData\";\r\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\r\nvar DAY_MS = toMs(\"day\");\r\nvar HOUR_MS = toMs(\"hour\");\r\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\r\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\r\nvar CELL_INDEX_CALCULATION_EPSILON = .05;\r\nclass SchedulerWorkSpace extends WidgetObserver {\r\n    get viewDataProvider() {\r\n        if (!this._viewDataProvider) {\r\n            this._viewDataProvider = new ViewDataProvider(this.type)\r\n        }\r\n        return this._viewDataProvider\r\n    }\r\n    get cache() {\r\n        if (!this._cache) {\r\n            this._cache = new Cache\r\n        }\r\n        return this._cache\r\n    }\r\n    get cellsSelectionState() {\r\n        if (!this._cellsSelectionState) {\r\n            this._cellsSelectionState = new CellsSelectionState(this.viewDataProvider);\r\n            var selectedCellsOption = this.option(\"selectedCellData\");\r\n            if ((null === selectedCellsOption || void 0 === selectedCellsOption ? void 0 : selectedCellsOption.length) > 0) {\r\n                var validSelectedCells = selectedCellsOption.map(selectedCell => {\r\n                    var groups = selectedCell.groups;\r\n                    if (!groups || 0 === this._getGroupCount()) {\r\n                        return _extends({}, selectedCell, {\r\n                            groupIndex: 0\r\n                        })\r\n                    }\r\n                    var groupIndex = this._getGroupIndexByResourceId(groups);\r\n                    return _extends({}, selectedCell, {\r\n                        groupIndex: groupIndex\r\n                    })\r\n                });\r\n                this._cellsSelectionState.setSelectedCellsByData(validSelectedCells)\r\n            }\r\n        }\r\n        return this._cellsSelectionState\r\n    }\r\n    get cellsSelectionController() {\r\n        if (!this._cellsSelectionController) {\r\n            this._cellsSelectionController = new CellsSelectionController\r\n        }\r\n        return this._cellsSelectionController\r\n    }\r\n    get isAllDayPanelVisible() {\r\n        return this._isShowAllDayPanel() && this.supportAllDayRow()\r\n    }\r\n    get verticalGroupTableClass() {\r\n        return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"vertical\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrDateHeader\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.option(\"timeZoneCalculator\")\r\n    }\r\n    get isDefaultDraggingMode() {\r\n        return \"default\" === this.option(\"draggingMode\")\r\n    }\r\n    _supportedKeys() {\r\n        var clickHandler = function(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var selectedCells = this.cellsSelectionState.getSelectedCells();\r\n            if (null !== selectedCells && void 0 !== selectedCells && selectedCells.length) {\r\n                var selectedCellsElement = selectedCells.map(cellData => this._getCellByData(cellData)).filter(cell => !!cell);\r\n                e.target = selectedCellsElement;\r\n                this._showPopup = true;\r\n                this._cellClickAction({\r\n                    event: e,\r\n                    cellElement: $(selectedCellsElement),\r\n                    cellData: selectedCells[0]\r\n                })\r\n            }\r\n        };\r\n        var onArrowPressed = (e, key) => {\r\n            var _this$cellsSelectionS;\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var focusedCellData = null === (_this$cellsSelectionS = this.cellsSelectionState.focusedCell) || void 0 === _this$cellsSelectionS ? void 0 : _this$cellsSelectionS.cellData;\r\n            if (focusedCellData) {\r\n                var isAllDayPanelCell = focusedCellData.allDay && !this._isVerticalGroupedWorkSpace();\r\n                var isMultiSelection = e.shiftKey;\r\n                var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\r\n                var isRTL = this._isRTL();\r\n                var groupCount = this._getGroupCount();\r\n                var isGroupedByDate = this.isGroupedByDate();\r\n                var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\r\n                var focusedCellPosition = this.viewDataProvider.findCellPositionInMap(_extends({}, focusedCellData, {\r\n                    isAllDay: focusedCellData.allDay\r\n                }));\r\n                var edgeIndices = isHorizontalGrouping && isMultiSelection && !isGroupedByDate ? this.viewDataProvider.getGroupEdgeIndices(focusedCellData.groupIndex, isAllDayPanelCell) : this.viewDataProvider.getViewEdgeIndices(isAllDayPanelCell);\r\n                var nextCellData = this.cellsSelectionController.handleArrowClick({\r\n                    focusedCellPosition: focusedCellPosition,\r\n                    edgeIndices: edgeIndices,\r\n                    isRTL: isRTL,\r\n                    isGroupedByDate: isGroupedByDate,\r\n                    groupCount: groupCount,\r\n                    isMultiSelection: isMultiSelection,\r\n                    isMultiSelectionAllowed: isMultiSelectionAllowed,\r\n                    viewType: this.type,\r\n                    key: key,\r\n                    getCellDataByPosition: this.viewDataProvider.getCellData.bind(this.viewDataProvider),\r\n                    isAllDayPanelCell: isAllDayPanelCell,\r\n                    focusedCellData: focusedCellData\r\n                });\r\n                this._processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection && isMultiSelectionAllowed)\r\n            }\r\n        };\r\n        return extend(super._supportedKeys(), {\r\n            enter: clickHandler,\r\n            space: clickHandler,\r\n            downArrow: e => {\r\n                onArrowPressed(e, \"down\")\r\n            },\r\n            upArrow: e => {\r\n                onArrowPressed(e, \"up\")\r\n            },\r\n            rightArrow: e => {\r\n                onArrowPressed(e, \"right\")\r\n            },\r\n            leftArrow: e => {\r\n                onArrowPressed(e, \"left\")\r\n            }\r\n        })\r\n    }\r\n    _isRTL() {\r\n        return this.option(\"rtlEnabled\")\r\n    }\r\n    _moveToCell($cell, isMultiSelection) {\r\n        if (!isDefined($cell) || !$cell.length) {\r\n            return\r\n        }\r\n        var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\r\n        var currentCellData = this._getFullCellData($cell);\r\n        var focusedCellData = this.cellsSelectionState.focusedCell.cellData;\r\n        var nextFocusedCellData = this.cellsSelectionController.moveToCell({\r\n            isMultiSelection: isMultiSelection,\r\n            isMultiSelectionAllowed: isMultiSelectionAllowed,\r\n            currentCellData: currentCellData,\r\n            focusedCellData: focusedCellData,\r\n            isVirtualCell: $cell.hasClass(VIRTUAL_CELL_CLASS)\r\n        });\r\n        this._processNextSelectedCell(nextFocusedCellData, focusedCellData, isMultiSelectionAllowed && isMultiSelection)\r\n    }\r\n    _processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection) {\r\n        var nextCellPosition = this.viewDataProvider.findCellPositionInMap({\r\n            startDate: nextCellData.startDate,\r\n            groupIndex: nextCellData.groupIndex,\r\n            isAllDay: nextCellData.allDay,\r\n            index: nextCellData.index\r\n        });\r\n        if (!this.viewDataProvider.isSameCell(focusedCellData, nextCellData)) {\r\n            var $cell = nextCellData.allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(nextCellPosition.columnIndex) : this._dom_getDateCell(nextCellPosition);\r\n            var isNextCellAllDay = nextCellData.allDay;\r\n            this._setSelectedCellsStateAndUpdateSelection(isNextCellAllDay, nextCellPosition, isMultiSelection, $cell);\r\n            this._dateTableScrollable.scrollToElement($cell)\r\n        }\r\n    }\r\n    _setSelectedCellsStateAndUpdateSelection(isAllDay, cellPosition, isMultiSelection, $nextFocusedCell) {\r\n        var nextCellCoordinates = {\r\n            rowIndex: cellPosition.rowIndex,\r\n            columnIndex: cellPosition.columnIndex,\r\n            allDay: isAllDay\r\n        };\r\n        this.cellsSelectionState.setFocusedCell(nextCellCoordinates.rowIndex, nextCellCoordinates.columnIndex, isAllDay);\r\n        if (isMultiSelection) {\r\n            this.cellsSelectionState.setSelectedCells(nextCellCoordinates)\r\n        } else {\r\n            this.cellsSelectionState.setSelectedCells(nextCellCoordinates, nextCellCoordinates)\r\n        }\r\n        this.updateCellsSelection();\r\n        this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells(), $nextFocusedCell)\r\n    }\r\n    _hasAllDayClass($cell) {\r\n        return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS)\r\n    }\r\n    _focusInHandler(e) {\r\n        if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\r\n            delete this._isCellClick;\r\n            delete this._contextMenuHandled;\r\n            super._focusInHandler.apply(this, arguments);\r\n            this.cellsSelectionState.restoreSelectedAndFocusedCells();\r\n            if (!this.cellsSelectionState.focusedCell) {\r\n                var cellCoordinates = {\r\n                    columnIndex: 0,\r\n                    rowIndex: 0,\r\n                    allDay: this._isVerticalGroupedWorkSpace() && this.isAllDayPanelVisible\r\n                };\r\n                this.cellsSelectionState.setFocusedCell(cellCoordinates.rowIndex, cellCoordinates.columnIndex, cellCoordinates.allDay);\r\n                this.cellsSelectionState.setSelectedCells(cellCoordinates, cellCoordinates)\r\n            }\r\n            this.updateCellsSelection();\r\n            this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells())\r\n        }\r\n    }\r\n    _focusOutHandler() {\r\n        super._focusOutHandler.apply(this, arguments);\r\n        if (!this._contextMenuHandled && !this._disposed) {\r\n            this.cellsSelectionState.releaseSelectedAndFocusedCells();\r\n            this.viewDataProvider.updateViewData(this.generateRenderOptions());\r\n            this.updateCellsSelection()\r\n        }\r\n    }\r\n    _focusTarget() {\r\n        return this.$element()\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\")\r\n    }\r\n    _isHorizontalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\")\r\n    }\r\n    _isWorkSpaceWithCount() {\r\n        return this.option(\"intervalCount\") > 1\r\n    }\r\n    _isWorkspaceWithOddCells() {\r\n        return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling()\r\n    }\r\n    _getRealGroupOrientation() {\r\n        return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\"\r\n    }\r\n    createRAllDayPanelElements() {\r\n        this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS);\r\n        this._$allDayTitle = $(\"<div>\").appendTo(this._$headerPanelEmptyCell)\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            bounceEnabled: false,\r\n            updateManually: true,\r\n            onScroll: () => {\r\n                var _this$_groupedStrateg;\r\n                null === (_this$_groupedStrateg = this._groupedStrategy.cache) || void 0 === _this$_groupedStrateg ? void 0 : _this$_groupedStrateg.clear()\r\n            }\r\n        };\r\n        if (this._needCreateCrossScrolling()) {\r\n            config = extend(config, this._createCrossScrollingConfig(config))\r\n        }\r\n        if (this.isVirtualScrolling() && (this.virtualScrollingDispatcher.horizontalScrollingAllowed || this.virtualScrollingDispatcher.height)) {\r\n            var currentOnScroll = config.onScroll;\r\n            config = _extends({}, config, {\r\n                onScroll: e => {\r\n                    null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll(e);\r\n                    this.virtualScrollingDispatcher.handleOnScrollEvent(null === e || void 0 === e ? void 0 : e.scrollOffset)\r\n                }\r\n            })\r\n        }\r\n        return config\r\n    }\r\n    _createCrossScrollingConfig(_ref) {\r\n        var {\r\n            onScroll: _onScroll\r\n        } = _ref;\r\n        return {\r\n            direction: \"both\",\r\n            onScroll: event => {\r\n                null === _onScroll || void 0 === _onScroll ? void 0 : _onScroll();\r\n                this._scrollSync.sidebar({\r\n                    top: event.scrollOffset.top\r\n                });\r\n                this._scrollSync.header({\r\n                    left: event.scrollOffset.left\r\n                })\r\n            },\r\n            onEnd: () => {\r\n                this.option(\"onScrollEnd\")()\r\n            }\r\n        }\r\n    }\r\n    _headerScrollableConfig() {\r\n        return {\r\n            useKeyboard: false,\r\n            showScrollbar: \"never\",\r\n            direction: \"horizontal\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: event => {\r\n                this._scrollSync.dateTable({\r\n                    left: event.scrollOffset.left\r\n                })\r\n            }\r\n        }\r\n    }\r\n    _visibilityChanged(visible) {\r\n        this.cache.clear();\r\n        if (visible) {\r\n            this._updateGroupTableHeight()\r\n        }\r\n        if (visible && this._needCreateCrossScrolling()) {\r\n            this._setTableSizes()\r\n        }\r\n    }\r\n    _setTableSizes() {\r\n        this.cache.clear();\r\n        this._attachTableClasses();\r\n        var cellWidth = this.getCellWidth();\r\n        if (cellWidth < this.getCellMinWidth()) {\r\n            cellWidth = this.getCellMinWidth()\r\n        }\r\n        var minWidth = this.getWorkSpaceMinWidth();\r\n        var groupCount = this._getGroupCount();\r\n        var totalCellCount = this._getTotalCellCount(groupCount);\r\n        var width = cellWidth * totalCellCount;\r\n        if (width < minWidth) {\r\n            width = minWidth\r\n        }\r\n        setWidth(this._$headerPanel, width);\r\n        setWidth(this._$dateTable, width);\r\n        if (this._$allDayTable) {\r\n            setWidth(this._$allDayTable, width)\r\n        }\r\n        this._attachHeaderTableClasses();\r\n        this._updateGroupTableHeight();\r\n        this._updateScrollable()\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        return this._groupedStrategy.getWorkSpaceMinWidth()\r\n    }\r\n    _dimensionChanged() {\r\n        if (!this._isVisible()) {\r\n            return\r\n        }\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._setTableSizes()\r\n        }\r\n        this.updateHeaderEmptyCellWidth();\r\n        this._updateScrollable();\r\n        this.cache.clear()\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return this.option(\"crossScrollingEnabled\")\r\n    }\r\n    _getElementClass() {\r\n        return noop()\r\n    }\r\n    _getRowCount() {\r\n        return this.viewDataProvider.getRowCount({\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            viewType: this.type,\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\")\r\n        })\r\n    }\r\n    _getCellCount() {\r\n        return this.viewDataProvider.getCellCount({\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            viewType: this.type,\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\")\r\n        })\r\n    }\r\n    isRenovatedRender() {\r\n        return this.renovatedRenderSupported() && this.option(\"renovateRender\")\r\n    }\r\n    _isVirtualModeOn() {\r\n        return \"virtual\" === this.option(\"scrolling.mode\")\r\n    }\r\n    isVirtualScrolling() {\r\n        return this.isRenovatedRender() && this._isVirtualModeOn()\r\n    }\r\n    _initVirtualScrolling() {\r\n        if (this.virtualScrollingDispatcher) {\r\n            this.virtualScrollingDispatcher.dispose();\r\n            this.virtualScrollingDispatcher = null\r\n        }\r\n        this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this._getVirtualScrollingDispatcherOptions());\r\n        this.virtualScrollingDispatcher.attachScrollableEvents();\r\n        this.renderer = new VirtualScrollingRenderer(this)\r\n    }\r\n    onDataSourceChanged() {}\r\n    isGroupedAllDayPanel() {\r\n        return calculateIsGroupedAllDayPanel(this.option(\"groups\"), this.option(\"groupOrientation\"), this.isAllDayPanelVisible)\r\n    }\r\n    generateRenderOptions(isProvideVirtualCellsWidth) {\r\n        var _this$_getToday;\r\n        var groupCount = this._getGroupCount();\r\n        var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        var options = _extends({\r\n            groupByDate: this.option(\"groupByDate\"),\r\n            startRowIndex: 0,\r\n            startCellIndex: 0,\r\n            groupOrientation: groupOrientation,\r\n            today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\r\n            groups: this.option(\"groups\"),\r\n            isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\r\n            isAllDayPanelVisible: this.isAllDayPanelVisible,\r\n            selectedCells: this.cellsSelectionState.getSelectedCells(),\r\n            focusedCell: this.cellsSelectionState.focusedCell,\r\n            headerCellTextFormat: this._getFormat(),\r\n            getDateForHeaderText: (_, date) => date,\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\"),\r\n            cellDuration: this.getCellDuration(),\r\n            viewType: this.type,\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            startDate: this.option(\"startDate\"),\r\n            firstDayOfWeek: this.option(\"firstDayOfWeek\")\r\n        }, this.virtualScrollingDispatcher.getRenderState());\r\n        return options\r\n    }\r\n    renovatedRenderSupported() {\r\n        return true\r\n    }\r\n    _updateGroupTableHeight() {\r\n        if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\r\n            this._setHorizontalGroupHeaderCellsHeight()\r\n        }\r\n    }\r\n    updateHeaderEmptyCellWidth() {\r\n        if (hasWindow() && this._isRenderHeaderPanelEmptyCell()) {\r\n            var timePanelWidth = this.getTimePanelWidth();\r\n            var groupPanelWidth = this.getGroupTableWidth();\r\n            this._$headerPanelEmptyCell.css(\"width\", timePanelWidth + groupPanelWidth)\r\n        }\r\n    }\r\n    _isGroupsSpecified(resources) {\r\n        return this.option(\"groups\").length && resources\r\n    }\r\n    _getGroupIndexByResourceId(id) {\r\n        var groups = this.option(\"groups\");\r\n        var resourceTree = createResourcesTree(groups);\r\n        if (!resourceTree.length) {\r\n            return 0\r\n        }\r\n        return this._getGroupIndexRecursively(resourceTree, id)\r\n    }\r\n    _getGroupIndexRecursively(resourceTree, id) {\r\n        var currentKey = resourceTree[0].name;\r\n        var currentValue = id[currentKey];\r\n        return resourceTree.reduce((prevIndex, _ref2) => {\r\n            var {\r\n                leafIndex: leafIndex,\r\n                value: value,\r\n                children: children\r\n            } = _ref2;\r\n            var areValuesEqual = currentValue === value;\r\n            if (areValuesEqual && void 0 !== leafIndex) {\r\n                return leafIndex\r\n            }\r\n            if (areValuesEqual) {\r\n                return this._getGroupIndexRecursively(children, id)\r\n            }\r\n            return prevIndex\r\n        }, 0)\r\n    }\r\n    _getViewStartByOptions() {\r\n        return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this._getIntervalDuration(), this.option(\"startDate\") ? this._calculateViewStartDate() : void 0)\r\n    }\r\n    _getIntervalDuration() {\r\n        return this.viewDataProvider.getIntervalDuration(this.option(\"intervalCount\"))\r\n    }\r\n    _getHeaderDate() {\r\n        return this.getStartViewDate()\r\n    }\r\n    _calculateViewStartDate() {\r\n        return calculateViewStartDate(this.option(\"startDate\"))\r\n    }\r\n    _firstDayOfWeek() {\r\n        return this.viewDataProvider.getFirstDayOfWeek(this.option(\"firstDayOfWeek\"))\r\n    }\r\n    _attachEvents() {\r\n        this._createSelectionChangedAction();\r\n        this._attachClickEvent();\r\n        this._attachContextMenuEvent()\r\n    }\r\n    _attachClickEvent() {\r\n        var that = this;\r\n        var pointerDownAction = this._createAction((function(e) {\r\n            that._pointerDownHandler(e.event)\r\n        }));\r\n        this._createCellClickAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\r\n        eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, (function(e) {\r\n            if (isMouseEvent(e) && e.which > 1) {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        }));\r\n        eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, (function(e) {\r\n            var $cell = $(e.target);\r\n            that._cellClickAction({\r\n                event: e,\r\n                cellElement: getPublicElement($cell),\r\n                cellData: that.getCellData($cell)\r\n            })\r\n        }))\r\n    }\r\n    _createCellClickAction() {\r\n        this._cellClickAction = this._createActionByOption(\"onCellClick\", {\r\n            afterExecute: e => this._cellClickHandler(e.args[0].event)\r\n        })\r\n    }\r\n    _createSelectionChangedAction() {\r\n        this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\")\r\n    }\r\n    _cellClickHandler() {\r\n        if (this._showPopup) {\r\n            delete this._showPopup;\r\n            this._handleSelectedCellsClick()\r\n        }\r\n    }\r\n    _pointerDownHandler(e) {\r\n        var $target = $(e.target);\r\n        if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\r\n            this._isCellClick = false;\r\n            return\r\n        }\r\n        this._isCellClick = true;\r\n        if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\r\n            this._showPopup = true\r\n        } else {\r\n            var cellCoordinates = this._getCoordinatesByCell($target);\r\n            var isAllDayCell = this._hasAllDayClass($target);\r\n            this._setSelectedCellsStateAndUpdateSelection(isAllDayCell, cellCoordinates, false, $target)\r\n        }\r\n    }\r\n    _handleSelectedCellsClick() {\r\n        var selectedCells = this.cellsSelectionState.getSelectedCells();\r\n        var firstCellData = selectedCells[0];\r\n        var lastCellData = selectedCells[selectedCells.length - 1];\r\n        var result = {\r\n            startDate: firstCellData.startDate,\r\n            endDate: lastCellData.endDate\r\n        };\r\n        if (void 0 !== lastCellData.allDay) {\r\n            result.allDay = lastCellData.allDay\r\n        }\r\n        this.option(\"onSelectedCellsClick\")(result, lastCellData.groups)\r\n    }\r\n    _attachContextMenuEvent() {\r\n        this._createContextMenuAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        var eventName = addNamespace(contextMenuEventName, this.NAME);\r\n        eventsEngine.off($element, eventName, cellSelector);\r\n        eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this))\r\n    }\r\n    _contextMenuHandler(e) {\r\n        var $cell = $(e.target);\r\n        this._contextMenuAction({\r\n            event: e,\r\n            cellElement: getPublicElement($cell),\r\n            cellData: this.getCellData($cell)\r\n        });\r\n        this._contextMenuHandled = true\r\n    }\r\n    _createContextMenuAction() {\r\n        this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\")\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$groupTable\r\n        }\r\n        return this._$thead\r\n    }\r\n    _getDateHeaderContainer() {\r\n        return this._$thead\r\n    }\r\n    _getCalculateHeaderCellRepeatCount() {\r\n        return this._groupedStrategy.calculateHeaderCellRepeatCount()\r\n    }\r\n    _updateScrollable() {\r\n        var _this$_headerScrollab, _this$_sidebarScrolla;\r\n        this._dateTableScrollable.update();\r\n        null === (_this$_headerScrollab = this._headerScrollable) || void 0 === _this$_headerScrollab ? void 0 : _this$_headerScrollab.update();\r\n        null === (_this$_sidebarScrolla = this._sidebarScrollable) || void 0 === _this$_sidebarScrolla ? void 0 : _this$_sidebarScrolla.update()\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this._getCellCountInDay()\r\n    }\r\n    _getCellCountInDay() {\r\n        var hoursInterval = this.option(\"hoursInterval\");\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        return this.viewDataProvider.getCellCountInDay(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    _getTotalCellCount(groupCount) {\r\n        return this._groupedStrategy.getTotalCellCount(groupCount)\r\n    }\r\n    _getTotalRowCount(groupCount, includeAllDayPanelRows) {\r\n        var result = this._groupedStrategy.getTotalRowCount(groupCount);\r\n        if (includeAllDayPanelRows && this.isAllDayPanelVisible) {\r\n            result += groupCount\r\n        }\r\n        return result\r\n    }\r\n    _getGroupIndex(rowIndex, columnIndex) {\r\n        return this._groupedStrategy.getGroupIndex(rowIndex, columnIndex)\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\r\n        return viewDataGenerator.calculateEndDate(startDate, viewDataGenerator.getInterval(this.option(\"hoursInterval\")), this.option(\"endDayHour\"))\r\n    }\r\n    _getGroupCount() {\r\n        return getGroupCount(this.option(\"groups\"))\r\n    }\r\n    _attachTablesEvents() {\r\n        var element = this.$element();\r\n        this._attachDragEvents(element);\r\n        this._attachPointerEvents(element)\r\n    }\r\n    _detachDragEvents(element) {\r\n        eventsEngine.off(element, DragEventNames.ENTER);\r\n        eventsEngine.off(element, DragEventNames.LEAVE);\r\n        eventsEngine.off(element, DragEventNames.DROP)\r\n    }\r\n    _attachDragEvents(element) {\r\n        this._detachDragEvents(element);\r\n        eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\r\n            checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\r\n        }, e => {\r\n            if (!this.preventDefaultDragging) {\r\n                this.removeDroppableCellClass();\r\n                $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n            }\r\n        });\r\n        eventsEngine.on(element, DragEventNames.LEAVE, () => {\r\n            if (!this.preventDefaultDragging) {\r\n                this.removeDroppableCellClass()\r\n            }\r\n        });\r\n        eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => {\r\n            var _this$dragBehavior, _this$dragBehavior$dr;\r\n            if (!this.dragBehavior) {\r\n                return\r\n            }\r\n            if (!(null !== (_this$dragBehavior = this.dragBehavior) && void 0 !== _this$dragBehavior && _this$dragBehavior.dragBetweenComponentsPromise)) {\r\n                this.dragBehavior.removeDroppableClasses();\r\n                return\r\n            }\r\n            null === (_this$dragBehavior$dr = this.dragBehavior.dragBetweenComponentsPromise) || void 0 === _this$dragBehavior$dr ? void 0 : _this$dragBehavior$dr.then(() => {\r\n                this.dragBehavior.removeDroppableClasses()\r\n            })\r\n        })\r\n    }\r\n    _attachPointerEvents(element) {\r\n        var isPointerDown = false;\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isMouseEvent(e) && 1 === e.which) {\r\n                isPointerDown = true;\r\n                this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\r\n                eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n                eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\r\n                    isPointerDown = false;\r\n                    this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS)\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._moveToCell($(e.target), true)\r\n            }\r\n        })\r\n    }\r\n    _getFormat() {\r\n        return abstract()\r\n    }\r\n    getWorkArea() {\r\n        return this._$dateTableContainer\r\n    }\r\n    getScrollable() {\r\n        return this._dateTableScrollable\r\n    }\r\n    getScrollableScrollTop() {\r\n        return this._dateTableScrollable.scrollTop()\r\n    }\r\n    getGroupedScrollableScrollTop(allDay) {\r\n        return this._groupedStrategy.getScrollableScrollTop(allDay)\r\n    }\r\n    getScrollableScrollLeft() {\r\n        return this._dateTableScrollable.scrollLeft()\r\n    }\r\n    getScrollableOuterWidth() {\r\n        return this._dateTableScrollable.scrollWidth()\r\n    }\r\n    getScrollableContainer() {\r\n        return $(this._dateTableScrollable.container())\r\n    }\r\n    getHeaderPanelHeight() {\r\n        return this._$headerPanel && getOuterHeight(this._$headerPanel, true)\r\n    }\r\n    getTimePanelWidth() {\r\n        return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$groupTable ? getOuterWidth(this._$groupTable) : 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return this._groupedStrategy.getLeftOffset()\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        var columnIndex = Math.floor(index / this._getRowCount());\r\n        var rowIndex = index - this._getRowCount() * columnIndex;\r\n        return {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    }\r\n    _getDateGenerationOptions() {\r\n        var _this$viewDataProvide;\r\n        return {\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\"),\r\n            isWorkView: this.viewDataProvider.viewDataGenerator.isWorkView,\r\n            interval: null === (_this$viewDataProvide = this.viewDataProvider.viewDataGenerator) || void 0 === _this$viewDataProvide ? void 0 : _this$viewDataProvide.getInterval(this.option(\"hoursInterval\")),\r\n            startViewDate: this.getStartViewDate(),\r\n            firstDayOfWeek: this._firstDayOfWeek()\r\n        }\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\r\n        var days = this._getDaysOfInterval(fullInterval, startDayTime);\r\n        var weekendsCount = this._getWeekendsCount(days);\r\n        var result = (days - weekendsCount) * DAY_MS;\r\n        if (!allDay) {\r\n            var hiddenInterval = this.viewDataProvider.hiddenInterval;\r\n            var visibleDayDuration = this.getVisibleDayDuration();\r\n            result = fullInterval - days * hiddenInterval - weekendsCount * visibleDayDuration\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    _getDaysOfInterval(fullInterval, startDayTime) {\r\n        return Math.floor((fullInterval + startDayTime) / DAY_MS)\r\n    }\r\n    _updateIndex(index) {\r\n        return index * this._getRowCount()\r\n    }\r\n    _getDroppableCell() {\r\n        return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return this.cache.get(\"workspaceWidth\", () => {\r\n            if (this._needCreateCrossScrolling()) {\r\n                return getBoundingRect(this._$dateTable.get(0)).width\r\n            }\r\n            var totalWidth = getBoundingRect(this.$element().get(0)).width;\r\n            var timePanelWidth = this.getTimePanelWidth();\r\n            var groupTableWidth = this.getGroupTableWidth();\r\n            return totalWidth - timePanelWidth - groupTableWidth\r\n        })\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\r\n        return this._dom_getDateCell(indexes)\r\n    }\r\n    _dom_getDateCell(position) {\r\n        return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.columnIndex)\r\n    }\r\n    _dom_getAllDayPanelCell(columnIndex) {\r\n        return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(columnIndex)\r\n    }\r\n    _getCells(allDay, direction) {\r\n        var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        if (\"vertical\" === direction) {\r\n            var result = [];\r\n            for (var i = 1;; i++) {\r\n                var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\r\n                if (!cells.length) {\r\n                    break\r\n                }\r\n                result = result.concat(cells.toArray())\r\n            }\r\n            return $(result)\r\n        } else {\r\n            return this.$element().find(\".\" + cellClass)\r\n        }\r\n    }\r\n    _getFirstAndLastDataTableCell() {\r\n        var selector = this.isVirtualScrolling() ? \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(VIRTUAL_CELL_CLASS) : \".\".concat(DATE_TABLE_CELL_CLASS);\r\n        var $cells = this.$element().find(selector);\r\n        return [$cells[0], $cells[$cells.length - 1]]\r\n    }\r\n    _getAllCells(allDay) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"))\r\n        }\r\n        var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        return this.$element().find(\".\".concat(cellClass))\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        var height = getBoundingRect(this._$dateTable.get(0)).height;\r\n        setOuterHeight(this._$groupTable, height)\r\n    }\r\n    _getGroupHeaderCells() {\r\n        return this.$element().find(\".\" + GROUP_HEADER_CLASS)\r\n    }\r\n    _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\r\n        var currentDate = date || new Date(this.option(\"currentDate\"));\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        if (hours < startDayHour) {\r\n            hours = startDayHour\r\n        }\r\n        if (hours >= endDayHour) {\r\n            hours = endDayHour - 1\r\n        }\r\n        currentDate.setHours(hours, minutes, 0, 0);\r\n        var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\r\n        var {\r\n            position: position,\r\n            cellData: cellData\r\n        } = cell;\r\n        return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, isDateAndTimeView(this.type), \"vertical\" === this.viewDirection)\r\n    }\r\n    _isOutsideScrollable(target, event) {\r\n        var $dateTableScrollableElement = this._dateTableScrollable.$element();\r\n        var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\r\n        var window = getWindow();\r\n        var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\r\n        var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\r\n        var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\r\n        if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\r\n            return false\r\n        }\r\n        return isOutsideVerticalScrollable || isOutsideHorizontalScrollable\r\n    }\r\n    setCellDataCache(cellCoordinates, groupIndex, $cell) {\r\n        var key = JSON.stringify({\r\n            rowIndex: cellCoordinates.rowIndex,\r\n            columnIndex: cellCoordinates.columnIndex,\r\n            groupIndex: groupIndex\r\n        });\r\n        this.cache.set(key, this.getCellData($cell))\r\n    }\r\n    setCellDataCacheAlias(appointment, geometry) {\r\n        var key = JSON.stringify({\r\n            rowIndex: appointment.rowIndex,\r\n            columnIndex: appointment.columnIndex,\r\n            groupIndex: appointment.groupIndex\r\n        });\r\n        var aliasKey = JSON.stringify({\r\n            top: geometry.top,\r\n            left: geometry.left\r\n        });\r\n        this.cache.set(aliasKey, this.cache.get(key))\r\n    }\r\n    supportAllDayRow() {\r\n        return true\r\n    }\r\n    keepOriginalHours() {\r\n        return false\r\n    }\r\n    _filterCellDataFields(cellData) {\r\n        return extend(true, {}, {\r\n            startDate: cellData.startDate,\r\n            endDate: cellData.endDate,\r\n            groups: cellData.groups,\r\n            groupIndex: cellData.groupIndex,\r\n            allDay: cellData.allDay\r\n        })\r\n    }\r\n    getCellData($cell) {\r\n        var cellData = this._getFullCellData($cell) || {};\r\n        return this._filterCellDataFields(cellData)\r\n    }\r\n    _getFullCellData($cell) {\r\n        var currentCell = $cell[0];\r\n        if (currentCell) {\r\n            return this._getDataByCell($cell)\r\n        }\r\n        return\r\n    }\r\n    _getVirtualRowOffset() {\r\n        return this.virtualScrollingDispatcher.virtualRowOffset\r\n    }\r\n    _getVirtualCellOffset() {\r\n        return this.virtualScrollingDispatcher.virtualCellOffset\r\n    }\r\n    _getDataByCell($cell) {\r\n        var rowIndex = $cell.parent().index() - this.virtualScrollingDispatcher.topVirtualRowsCount;\r\n        var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\r\n        var {\r\n            viewDataProvider: viewDataProvider\r\n        } = this;\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\r\n        return cellData ? cellData : void 0\r\n    }\r\n    isGroupedByDate() {\r\n        return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0\r\n    }\r\n    getCellIndexByDate(date, inAllDayRow) {\r\n        var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\r\n        var timeInterval = inAllDayRow ? 864e5 : viewDataGenerator.getInterval(this.option(\"hoursInterval\"));\r\n        var startViewDateOffset = getStartViewDateTimeOffset(this.getStartViewDate(), this.option(\"startDayHour\"));\r\n        var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + startViewDateOffset;\r\n        var index = Math.floor(dateTimeStamp / timeInterval);\r\n        if (inAllDayRow) {\r\n            index = this._updateIndex(index)\r\n        }\r\n        if (index < 0) {\r\n            index = 0\r\n        }\r\n        return index\r\n    }\r\n    getDroppableCellIndex() {\r\n        var $droppableCell = this._getDroppableCell();\r\n        var $row = $droppableCell.parent();\r\n        var rowIndex = $row.index();\r\n        return rowIndex * $row.find(\"td\").length + $droppableCell.index()\r\n    }\r\n    getDataByDroppableCell() {\r\n        var cellData = this.getCellData($(this._getDroppableCell()));\r\n        var allDay = cellData.allDay;\r\n        var startDate = cellData.startDate;\r\n        var endDate = cellData.endDate;\r\n        return {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay,\r\n            groups: cellData.groups\r\n        }\r\n    }\r\n    getDateRange() {\r\n        return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()]\r\n    }\r\n    getCellMinWidth() {\r\n        return DATE_TABLE_MIN_CELL_WIDTH\r\n    }\r\n    getRoundedCellWidth(groupIndex, startIndex, cellCount) {\r\n        if (groupIndex < 0 || !hasWindow()) {\r\n            return 0\r\n        }\r\n        var $row = this.$element().find(\".\".concat(DATE_TABLE_ROW_CLASS)).eq(0);\r\n        var width = 0;\r\n        var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\r\n        var totalCellCount = this._getCellCount() * groupIndex;\r\n        cellCount = cellCount || this._getCellCount();\r\n        if (!isDefined(startIndex)) {\r\n            startIndex = totalCellCount\r\n        }\r\n        for (var i = startIndex; i < totalCellCount + cellCount; i++) {\r\n            var element = $($cells).eq(i).get(0);\r\n            var elementWidth = element ? getBoundingRect(element).width : 0;\r\n            width += elementWidth\r\n        }\r\n        return width / (totalCellCount + cellCount - startIndex)\r\n    }\r\n    getCellWidth() {\r\n        return getCellWidth(this.getDOMElementsMetaData())\r\n    }\r\n    getCellHeight() {\r\n        return getCellHeight(this.getDOMElementsMetaData())\r\n    }\r\n    getAllDayHeight() {\r\n        return getAllDayHeight(this.option(\"showAllDayPanel\"), this._isVerticalGroupedWorkSpace(), this.getDOMElementsMetaData())\r\n    }\r\n    getMaxAllowedPosition(groupIndex) {\r\n        return getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.option(\"rtlEnabled\"), this.getDOMElementsMetaData())\r\n    }\r\n    getAllDayOffset() {\r\n        return this._groupedStrategy.getAllDayOffset()\r\n    }\r\n    getCellIndexByCoordinates(coordinates, allDay) {\r\n        var cellCount = this._getTotalCellCount(this._getGroupCount());\r\n        var cellWidth = this.getCellWidth();\r\n        var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\r\n        var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\r\n        var leftIndex = coordinates.left / cellWidth;\r\n        leftIndex = Math.floor(leftIndex + CELL_INDEX_CALCULATION_EPSILON);\r\n        if (this._isRTL()) {\r\n            leftIndex = cellCount - leftIndex - 1\r\n        }\r\n        return cellCount * topIndex + leftIndex\r\n    }\r\n    getStartViewDate() {\r\n        return this.viewDataProvider.getStartViewDate()\r\n    }\r\n    getEndViewDate() {\r\n        return this.viewDataProvider.getLastCellEndDate()\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        return this.viewDataProvider.getLastViewDateByEndDayHour(this.option(\"endDayHour\"))\r\n    }\r\n    getCellDuration() {\r\n        return getCellDuration(this.type, this.option(\"startDayHour\"), this.option(\"endDayHour\"), this.option(\"hoursInterval\"))\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return allDay ? toMs(\"day\") : this.getCellDuration()\r\n    }\r\n    getVisibleDayDuration() {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        var hoursInterval = this.option(\"hoursInterval\");\r\n        return this.viewDataProvider.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    getGroupBounds(coordinates) {\r\n        var groupBounds = this._groupedStrategy instanceof VerticalGroupedStrategy ? this.getGroupBoundsVertical(coordinates.groupIndex) : this.getGroupBoundsHorizontal(coordinates);\r\n        return this._isRTL() ? this.getGroupBoundsRtlCorrection(groupBounds) : groupBounds\r\n    }\r\n    getGroupBoundsVertical(groupIndex) {\r\n        var $firstAndLastCells = this._getFirstAndLastDataTableCell();\r\n        return this._groupedStrategy.getGroupBoundsOffset(groupIndex, $firstAndLastCells)\r\n    }\r\n    getGroupBoundsHorizontal(coordinates) {\r\n        var cellCount = this._getCellCount();\r\n        var $cells = this._getCells();\r\n        var cellWidth = this.getCellWidth();\r\n        var groupedDataMap = this.viewDataProvider.groupedDataMap;\r\n        return this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap)\r\n    }\r\n    getGroupBoundsRtlCorrection(groupBounds) {\r\n        var cellWidth = this.getCellWidth();\r\n        return _extends({}, groupBounds, {\r\n            left: groupBounds.right - 2 * cellWidth,\r\n            right: groupBounds.left + 2 * cellWidth\r\n        })\r\n    }\r\n    needRecalculateResizableArea() {\r\n        return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop()\r\n    }\r\n    getCellDataByCoordinates(coordinates, allDay) {\r\n        var key = JSON.stringify({\r\n            top: coordinates.top,\r\n            left: coordinates.left\r\n        });\r\n        return this.cache.get(key, () => {\r\n            var $cells = this._getCells(allDay);\r\n            var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\r\n            var $cell = $cells.eq(cellIndex);\r\n            return this.getCellData($cell)\r\n        })\r\n    }\r\n    getVisibleBounds() {\r\n        var result = {};\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\r\n        var totalCellCount = scrolledCellCount + getHeight($scrollable) / cellHeight;\r\n        result.top = {\r\n            hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: scrolledCellCount % 2 ? 30 : 0\r\n        };\r\n        result.bottom = {\r\n            hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\r\n        };\r\n        return result\r\n    }\r\n    updateScrollPosition(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var newDate = this.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var inAllDayRow = allDay && this.isAllDayPanelVisible;\r\n        if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\r\n            this.scrollTo(newDate, groups, inAllDayRow, false)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(date, groups, inAllDayRow) {\r\n        var cells = this._getCellsInViewport(inAllDayRow);\r\n        var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var time = date.getTime();\r\n        var trimmedTime = dateUtils.trimTime(date).getTime();\r\n        return cells.reduce((currentResult, cell) => {\r\n            var {\r\n                startDate: cellStartDate,\r\n                endDate: cellEndDate,\r\n                groupIndex: cellGroupIndex\r\n            } = this.getCellData(cell);\r\n            var cellStartTime = cellStartDate.getTime();\r\n            var cellEndTime = cellEndDate.getTime();\r\n            if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\r\n                return false\r\n            }\r\n            return currentResult\r\n        }, true)\r\n    }\r\n    _getCellsInViewport(inAllDayRow) {\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var cellWidth = this.getCellWidth();\r\n        var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\r\n        var scrollableScrollTop = this.getScrollableScrollTop();\r\n        var scrollableScrollLeft = this.getScrollableScrollLeft();\r\n        var fullScrolledRowCount = scrollableScrollTop / cellHeight - this.virtualScrollingDispatcher.topVirtualRowsCount;\r\n        var scrolledRowCount = Math.floor(fullScrolledRowCount);\r\n        if (scrollableScrollTop % cellHeight !== 0) {\r\n            scrolledRowCount += 1\r\n        }\r\n        var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\r\n        var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\r\n        if (scrollableScrollLeft % cellWidth !== 0) {\r\n            scrolledColumnCount += 1\r\n        }\r\n        var rowCount = Math.floor(fullScrolledRowCount + getHeight($scrollable) / cellHeight);\r\n        var columnCount = Math.floor(fullScrolledColumnCount + getWidth($scrollable) / cellWidth);\r\n        var $cells = this._getAllCells(inAllDayRow);\r\n        var result = [];\r\n        $cells.each((function(index) {\r\n            var $cell = $(this);\r\n            var columnIndex = index % totalColumnCount;\r\n            var rowIndex = index / totalColumnCount;\r\n            if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\r\n                result.push($cell)\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        if (!this._isValidScrollDate(date)) {\r\n            return\r\n        }\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        scrollable.scrollBy({\r\n            top: coordinates.top - scrollable.scrollTop(),\r\n            left: 0\r\n        })\r\n    }\r\n    scrollTo(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\r\n        if (!this._isValidScrollDate(date, throwWarning)) {\r\n            return\r\n        }\r\n        var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\r\n        var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\r\n        var scrollable = this.getScrollable();\r\n        var $scrollable = scrollable.$element();\r\n        var cellWidth = this.getCellWidth();\r\n        var offset = this.option(\"rtlEnabled\") ? cellWidth : 0;\r\n        var scrollableHeight = getHeight($scrollable);\r\n        var scrollableWidth = getWidth($scrollable);\r\n        var cellHeight = this.getCellHeight();\r\n        var xShift = (scrollableWidth - cellWidth) / 2;\r\n        var yShift = (scrollableHeight - cellHeight) / 2;\r\n        var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\r\n        var top = coordinates.top - scrollable.scrollTop() - yShift;\r\n        if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\r\n            top = 0\r\n        }\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout(() => {\r\n                scrollable.scrollBy({\r\n                    left: left,\r\n                    top: top\r\n                })\r\n            })\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: left,\r\n                top: top\r\n            })\r\n        }\r\n    }\r\n    _isValidScrollDate(date) {\r\n        var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\r\n        var min = this.getStartViewDate();\r\n        var max = this.getEndViewDate();\r\n        if (date < min || date > max) {\r\n            throwWarning && errors.log(\"W1008\", date);\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    needApplyCollectorOffset() {\r\n        return false\r\n    }\r\n    removeDroppableCellClass($cellElement) {\r\n        var $cell = $cellElement || this._getDroppableCell();\r\n        null === $cell || void 0 === $cell ? void 0 : $cell.removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getCoordinatesByCell($cell) {\r\n        var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\r\n        var rowIndex = $cell.parent().index();\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\r\n        if (!(isAllDayCell && !isVerticalGrouping)) {\r\n            rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        }\r\n    }\r\n    _isShowAllDayPanel() {\r\n        return this.option(\"showAllDayPanel\")\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS))\r\n    }\r\n    _getRDateTableProps() {\r\n        return {\r\n            viewData: this.viewDataProvider.viewData,\r\n            dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n            addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            addVerticalSizesClassToRows: false\r\n        }\r\n    }\r\n    _updateSelectedCellDataOption(selectedCellData) {\r\n        var correctedSelectedCellData = selectedCellData.map(_ref3 => {\r\n            var {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groupIndex: groupIndex,\r\n                groups: groups\r\n            } = _ref3;\r\n            return {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groupIndex: groupIndex,\r\n                groups: groups\r\n            }\r\n        });\r\n        this.option(\"selectedCellData\", correctedSelectedCellData);\r\n        this._selectionChangedAction({\r\n            selectedCellData: correctedSelectedCellData\r\n        })\r\n    }\r\n    _getCellByData(cellData) {\r\n        var {\r\n            startDate: startDate,\r\n            groupIndex: groupIndex,\r\n            allDay: allDay,\r\n            index: index\r\n        } = cellData;\r\n        var position = this.viewDataProvider.findCellPositionInMap({\r\n            startDate: startDate,\r\n            groupIndex: groupIndex,\r\n            isAllDay: allDay,\r\n            index: index\r\n        });\r\n        if (!position) {\r\n            return\r\n        }\r\n        return allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(position.columnIndex) : this._dom_getDateCell(position)\r\n    }\r\n    getDOMElementsMetaData() {\r\n        return this.cache.get(\"cellElementsMeta\", () => ({\r\n            dateTableCellsMeta: this._getDateTableDOMElementsInfo(),\r\n            allDayPanelCellsMeta: this._getAllDayPanelDOMElementsInfo()\r\n        }))\r\n    }\r\n    _getDateTableDOMElementsInfo() {\r\n        var dateTableCells = this._getAllCells(false);\r\n        if (!dateTableCells.length || !hasWindow()) {\r\n            return [\r\n                [{}]\r\n            ]\r\n        }\r\n        var dateTable = this._getDateTable();\r\n        var dateTableRect = getBoundingRect(dateTable.get(0));\r\n        var columnsCount = this.viewDataProvider.getColumnsCount();\r\n        var result = [];\r\n        dateTableCells.each((index, cell) => {\r\n            var rowIndex = Math.floor(index / columnsCount);\r\n            if (result.length === rowIndex) {\r\n                result.push([])\r\n            }\r\n            this._addCellMetaData(result[rowIndex], cell, dateTableRect)\r\n        });\r\n        return result\r\n    }\r\n    _getAllDayPanelDOMElementsInfo() {\r\n        var result = [];\r\n        if (this.isAllDayPanelVisible && !this._isVerticalGroupedWorkSpace() && hasWindow()) {\r\n            var allDayCells = this._getAllCells(true);\r\n            if (!allDayCells.length) {\r\n                return [{}]\r\n            }\r\n            var allDayAppointmentContainer = this._$allDayPanel;\r\n            var allDayPanelRect = getBoundingRect(allDayAppointmentContainer.get(0));\r\n            allDayCells.each((_, cell) => {\r\n                this._addCellMetaData(result, cell, allDayPanelRect)\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _addCellMetaData(cellMetaDataArray, cell, parentRect) {\r\n        var cellRect = getBoundingRect(cell);\r\n        cellMetaDataArray.push({\r\n            left: cellRect.left - parentRect.left,\r\n            top: cellRect.top - parentRect.top,\r\n            width: cellRect.width,\r\n            height: cellRect.height\r\n        })\r\n    }\r\n    _oldRender_getAllDayCellData(groupIndex) {\r\n        return (cell, rowIndex, columnIndex) => {\r\n            var validColumnIndex = columnIndex % this._getCellCount();\r\n            var options = this._getDateGenerationOptions(true);\r\n            var startDate = this.viewDataProvider.viewDataGenerator.getDateByCellIndices(options, rowIndex, validColumnIndex, this._getCellCountInDay());\r\n            startDate = dateUtils.trimTime(startDate);\r\n            var validGroupIndex = groupIndex || 0;\r\n            if (this.isGroupedByDate()) {\r\n                validGroupIndex = Math.floor(columnIndex % this._getGroupCount())\r\n            } else if (this._isHorizontalGroupedWorkSpace()) {\r\n                validGroupIndex = Math.floor(columnIndex / this._getCellCount())\r\n            }\r\n            var data = {\r\n                startDate: startDate,\r\n                endDate: startDate,\r\n                allDay: true,\r\n                groupIndex: validGroupIndex\r\n            };\r\n            var groupsArray = getCellGroups(validGroupIndex, this.option(\"groups\"));\r\n            if (groupsArray.length) {\r\n                data.groups = getGroupsObjectFromGroupsArray(groupsArray)\r\n            }\r\n            return {\r\n                key: CELL_DATA,\r\n                value: data\r\n            }\r\n        }\r\n    }\r\n    renderRWorkSpace(componentsToRender) {\r\n        var components = null !== componentsToRender && void 0 !== componentsToRender ? componentsToRender : {\r\n            header: true,\r\n            timePanel: true,\r\n            dateTable: true,\r\n            allDayPanel: true\r\n        };\r\n        components.header && this.renderRHeaderPanel();\r\n        components.timePanel && this.renderRTimeTable();\r\n        components.dateTable && this.renderRDateTable();\r\n        components.allDayPanel && this.renderRAllDayPanel()\r\n    }\r\n    renderRDateTable() {\r\n        utils.renovation.renderComponent(this, this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps())\r\n    }\r\n    renderRGroupPanel() {\r\n        var options = {\r\n            groups: this.option(\"groups\"),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            className: this.verticalGroupTableClass,\r\n            groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions())\r\n        };\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountClass();\r\n            utils.renovation.renderComponent(this, this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options)\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n    }\r\n    renderRAllDayPanel() {\r\n        var visible = this.isAllDayPanelVisible && !this.isGroupedAllDayPanel();\r\n        if (visible) {\r\n            var _this$virtualScrollin;\r\n            this._toggleAllDayVisibility(false);\r\n            var options = _extends({\r\n                viewData: this.viewDataProvider.viewData,\r\n                dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n                startCellIndex: 0\r\n            }, (null === (_this$virtualScrollin = this.virtualScrollingDispatcher.horizontalVirtualScrolling) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.getRenderState()) || {});\r\n            utils.renovation.renderComponent(this, this._$allDayTable, dxrAllDayPanelTable, \"renovatedAllDayPanel\", options);\r\n            utils.renovation.renderComponent(this, this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {})\r\n        }\r\n        this._toggleAllDayVisibility(true)\r\n    }\r\n    renderRTimeTable() {\r\n        utils.renovation.renderComponent(this, this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\r\n            timePanelData: this.viewDataProvider.timePanelData,\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groupOrientation: this.option(\"groupOrientation\")\r\n        })\r\n    }\r\n    renderRHeaderPanel() {\r\n        var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountClass()\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n        utils.renovation.renderComponent(this, this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\r\n            dateHeaderData: this.viewDataProvider.dateHeaderData,\r\n            groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions()),\r\n            dateCellTemplate: this.option(\"dateCellTemplate\"),\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groups: this.option(\"groups\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            isRenderDateHeader: isRenderDateHeader\r\n        })\r\n    }\r\n    initDragBehavior(scheduler) {\r\n        if (!this.dragBehavior && scheduler) {\r\n            this.dragBehavior = new AppointmentDragBehavior(scheduler);\r\n            var $rootElement = $(scheduler.element());\r\n            this._createDragBehavior(this.getWorkArea(), $rootElement);\r\n            this._createDragBehavior(this.getAllDayContainer(), $rootElement)\r\n        }\r\n    }\r\n    _createDragBehavior($targetElement, $rootElement) {\r\n        var options = {\r\n            getItemData: (itemElement, appointments) => appointments._getItemData(itemElement),\r\n            getItemSettings: $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY)\r\n        };\r\n        this._createDragBehaviorBase($targetElement, $rootElement, options)\r\n    }\r\n    _createDragBehaviorBase(targetElement, rootElement, options) {\r\n        var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\r\n        this.dragBehavior.addTo(targetElement, createDragBehaviorConfig(container, rootElement, this.isDefaultDraggingMode, this.dragBehavior, () => {\r\n            if (!this.isDefaultDraggingMode) {\r\n                this.preventDefaultDragging = false\r\n            }\r\n        }, () => {\r\n            if (!this.isDefaultDraggingMode) {\r\n                this.preventDefaultDragging = true\r\n            }\r\n        }, () => this._getDroppableCell(), () => this._getDateTables(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), options))\r\n    }\r\n    _isRenderHeaderPanelEmptyCell() {\r\n        return this._isVerticalGroupedWorkSpace()\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        this.virtualScrollingDispatcher.dispose()\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            currentDate: new Date,\r\n            intervalCount: 1,\r\n            startDate: null,\r\n            firstDayOfWeek: void 0,\r\n            startDayHour: 0,\r\n            endDayHour: 24,\r\n            hoursInterval: .5,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            groups: [],\r\n            showAllDayPanel: true,\r\n            allDayExpanded: false,\r\n            onCellClick: null,\r\n            crossScrollingEnabled: false,\r\n            dataCellTemplate: null,\r\n            timeCellTemplate: null,\r\n            resourceCellTemplate: null,\r\n            dateCellTemplate: null,\r\n            allowMultipleCellSelection: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true,\r\n            groupOrientation: \"horizontal\",\r\n            selectedCellData: [],\r\n            groupByDate: false,\r\n            scrolling: {\r\n                mode: \"standard\"\r\n            },\r\n            allDayPanelMode: \"all\",\r\n            renovateRender: true,\r\n            height: void 0,\r\n            draggingMode: \"outlook\",\r\n            onScrollEnd: () => {},\r\n            getHeaderHeight: void 0,\r\n            onRenderAppointments: () => {},\r\n            onShowAllDayPanel: () => {},\r\n            onSelectedCellsClick: () => {},\r\n            timeZoneCalculator: void 0,\r\n            schedulerHeight: void 0,\r\n            schedulerWidth: void 0\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"startDayHour\":\r\n                validateDayHours(args.value, this.option(\"endDayHour\"));\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"endDayHour\":\r\n                validateDayHours(this.option(\"startDayHour\"), args.value);\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"dateCellTemplate\":\r\n            case \"resourceCellTemplate\":\r\n            case \"dataCellTemplate\":\r\n            case \"timeCellTemplate\":\r\n            case \"hoursInterval\":\r\n            case \"firstDayOfWeek\":\r\n            case \"currentDate\":\r\n            case \"startDate\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"groups\":\r\n                this._cleanView();\r\n                this._removeAllDayElements();\r\n                this._initGrouping();\r\n                this.repaint();\r\n                break;\r\n            case \"groupOrientation\":\r\n                this._initGroupedStrategy();\r\n                this._createAllDayPanelElements();\r\n                this._removeAllDayElements();\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n                if (this._isVerticalGroupedWorkSpace()) {\r\n                    this._cleanView();\r\n                    this._removeAllDayElements();\r\n                    this._initGrouping();\r\n                    this.repaint()\r\n                } else if (!this.isRenovatedRender()) {\r\n                    this._toggleAllDayVisibility(true)\r\n                } else {\r\n                    this.renderWorkSpace()\r\n                }\r\n                break;\r\n            case \"allDayExpanded\":\r\n                this._changeAllDayVisibility();\r\n                this._attachTablesEvents();\r\n                this._updateScrollable();\r\n                break;\r\n            case \"onSelectionChanged\":\r\n                this._createSelectionChangedAction();\r\n                break;\r\n            case \"onCellClick\":\r\n                this._createCellClickAction();\r\n                break;\r\n            case \"onCellContextMenu\":\r\n                this._attachContextMenuEvent();\r\n                break;\r\n            case \"intervalCount\":\r\n                this._cleanWorkSpace();\r\n                this._toggleWorkSpaceCountClass();\r\n                break;\r\n            case \"groupByDate\":\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"crossScrollingEnabled\":\r\n                this._toggleHorizontalScrollClass();\r\n                this._dateTableScrollable.option(this._dateTableScrollableConfig());\r\n                break;\r\n            case \"allDayPanelMode\":\r\n                this.updateShowAllDayPanel();\r\n                this.updateAppointments();\r\n                break;\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._dimensionChanged();\r\n                break;\r\n            case \"timeZoneCalculator\":\r\n            case \"allowMultipleCellSelection\":\r\n            case \"selectedCellData\":\r\n                break;\r\n            case \"renovateRender\":\r\n            case \"scrolling\":\r\n                this.repaint();\r\n                break;\r\n            case \"schedulerHeight\":\r\n            case \"schedulerWidth\":\r\n                this.virtualScrollingDispatcher.updateDimensions(true);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    updateShowAllDayPanel() {\r\n        var isHiddenAllDayPanel = \"hidden\" === this.option(\"allDayPanelMode\");\r\n        this.option(\"onShowAllDayPanel\")(!isHiddenAllDayPanel)\r\n    }\r\n    _getVirtualScrollingDispatcherOptions() {\r\n        return {\r\n            getCellHeight: this.getCellHeight.bind(this),\r\n            getCellWidth: this.getCellWidth.bind(this),\r\n            getCellMinWidth: this.getCellMinWidth.bind(this),\r\n            isRTL: this._isRTL.bind(this),\r\n            getSchedulerHeight: () => this.option(\"schedulerHeight\"),\r\n            getSchedulerWidth: () => this.option(\"schedulerWidth\"),\r\n            getViewHeight: () => this.$element().height ? this.$element().height() : getHeight(this.$element()),\r\n            getViewWidth: () => this.$element().width ? this.$element().width() : getWidth(this.$element()),\r\n            getWindowHeight: () => getWindow().innerHeight,\r\n            getWindowWidth: () => getWindow().innerWidth,\r\n            getScrolling: () => this.option(\"scrolling\"),\r\n            getScrollableOuterWidth: this.getScrollableOuterWidth.bind(this),\r\n            getScrollable: this.getScrollable.bind(this),\r\n            createAction: this._createAction.bind(this),\r\n            updateRender: this.updateRender.bind(this),\r\n            updateGrid: this.updateGrid.bind(this),\r\n            getGroupCount: this._getGroupCount.bind(this),\r\n            isVerticalGrouping: this._isVerticalGroupedWorkSpace.bind(this),\r\n            getTotalRowCount: this._getTotalRowCount.bind(this),\r\n            getTotalCellCount: this._getTotalCellCount.bind(this)\r\n        }\r\n    }\r\n    _cleanWorkSpace() {\r\n        this._cleanView();\r\n        this._toggleGroupedClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        this.virtualScrollingDispatcher.updateDimensions(true);\r\n        this._renderView();\r\n        this.option(\"crossScrollingEnabled\") && this._setTableSizes();\r\n        this.cache.clear()\r\n    }\r\n    _init() {\r\n        this._scrollSync = {};\r\n        this._viewDataProvider = null;\r\n        this._cellsSelectionState = null;\r\n        this._activeStateUnit = CELL_SELECTOR;\r\n        super._init();\r\n        this._initGrouping();\r\n        this._toggleHorizontalScrollClass();\r\n        this._toggleWorkSpaceCountClass();\r\n        this._toggleGroupByDateClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass())\r\n    }\r\n    _initPositionHelper() {\r\n        this.positionHelper = new PositionHelper({\r\n            key: this.option(\"key\"),\r\n            viewDataProvider: this.viewDataProvider,\r\n            viewStartDayHour: this.option(\"startDayHour\"),\r\n            viewEndDayHour: this.option(\"endDayHour\"),\r\n            cellDuration: this.getCellDuration(),\r\n            groupedStrategy: this._groupedStrategy,\r\n            isGroupedByDate: this.isGroupedByDate(),\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            startViewDate: this.getStartViewDate(),\r\n            isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\r\n            groupCount: this._getGroupCount(),\r\n            isVirtualScrolling: this.isVirtualScrolling(),\r\n            getDOMMetaDataCallback: this.getDOMElementsMetaData.bind(this)\r\n        })\r\n    }\r\n    _initGrouping() {\r\n        this._initGroupedStrategy();\r\n        this._toggleGroupingDirectionClass();\r\n        this._toggleGroupByDateClass()\r\n    }\r\n    isVerticalOrientation() {\r\n        var orientation = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        return \"vertical\" === orientation\r\n    }\r\n    _initGroupedStrategy() {\r\n        var Strategy = this.isVerticalOrientation() ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\r\n        this._groupedStrategy = new Strategy(this)\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"horizontal\"\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"))\r\n    }\r\n    _toggleGroupByDateClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate())\r\n    }\r\n    _toggleWorkSpaceCountClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount())\r\n    }\r\n    _toggleWorkSpaceWithOddCells() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells())\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace())\r\n    }\r\n    _getDateTableCellClass(rowIndex, columnIndex) {\r\n        var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, columnIndex + 1, rowIndex, columnIndex)\r\n    }\r\n    _getGroupHeaderClass(i) {\r\n        var cellClass = GROUP_HEADER_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1)\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._$headerPanelContainer = $(\"<div>\").addClass(\"dx-scheduler-header-panel-container\");\r\n        this._$headerTablesContainer = $(\"<div>\").addClass(\"dx-scheduler-header-tables-container\");\r\n        this._$headerPanel = $(\"<table>\");\r\n        this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\r\n        this._$headerPanelEmptyCell = $(\"<div>\").addClass(\"dx-scheduler-header-panel-empty-cell\");\r\n        this._$allDayTable = $(\"<table>\");\r\n        this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\r\n        this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\r\n        this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\r\n        this._$sidebarScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-side-bar-scrollable-content\");\r\n        this._initAllDayPanelElements();\r\n        if (this.isRenovatedRender()) {\r\n            this.createRAllDayPanelElements()\r\n        } else {\r\n            this._createAllDayPanelElements()\r\n        }\r\n        this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\r\n        this._$dateTable = $(\"<table>\");\r\n        this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\r\n        this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS)\r\n    }\r\n    _initAllDayPanelElements() {\r\n        this._allDayTitles = [];\r\n        this._allDayTables = [];\r\n        this._allDayPanels = []\r\n    }\r\n    _initDateTableScrollable() {\r\n        var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\r\n        this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig());\r\n        this._scrollSync.dateTable = getMemoizeScrollTo(() => this._dateTableScrollable)\r\n    }\r\n    _createWorkSpaceElements() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            this._createWorkSpaceStaticElements()\r\n        }\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        this._$dateTableContainer.append(this._$dateTable);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._$dateTableContainer.append(this._$allDayContainer);\r\n            this._$dateTableScrollableContent.append(this._$groupTable, this._$timePanel, this._$dateTableContainer);\r\n            this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n            this._$headerTablesContainer.append(this._$headerPanel)\r\n        } else {\r\n            var _this$_$allDayPanel;\r\n            this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\r\n            this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n            this._$headerTablesContainer.append(this._$headerPanel, this._$allDayPanel);\r\n            null === (_this$_$allDayPanel = this._$allDayPanel) || void 0 === _this$_$allDayPanel ? void 0 : _this$_$allDayPanel.append(this._$allDayContainer, this._$allDayTable)\r\n        }\r\n        this._appendHeaderPanelEmptyCellIfNecessary();\r\n        this._$headerPanelContainer.append(this._$headerTablesContainer);\r\n        this.$element().append(this._$fixedContainer, this._$headerPanelContainer, this._dateTableScrollable.$element())\r\n    }\r\n    _createWorkSpaceScrollableElements() {\r\n        this.$element().append(this._$fixedContainer);\r\n        this._$flexContainer = $(\"<div>\").addClass(\"dx-scheduler-work-space-flex-container\");\r\n        this._createHeaderScrollable();\r\n        this._headerScrollable.$content().append(this._$headerPanel);\r\n        this._appendHeaderPanelEmptyCellIfNecessary();\r\n        this._$headerPanelContainer.append(this._$headerTablesContainer);\r\n        this.$element().append(this._$headerPanelContainer);\r\n        this.$element().append(this._$flexContainer);\r\n        this._createSidebarScrollable();\r\n        this._$flexContainer.append(this._dateTableScrollable.$element());\r\n        this._$dateTableContainer.append(this._$dateTable);\r\n        this._$dateTableScrollableContent.append(this._$dateTableContainer);\r\n        this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._$dateTableContainer.append(this._$allDayContainer);\r\n            this._$sidebarScrollableContent.append(this._$groupTable, this._$timePanel)\r\n        } else {\r\n            var _this$_$allDayPanel2;\r\n            this._headerScrollable.$content().append(this._$allDayPanel);\r\n            null === (_this$_$allDayPanel2 = this._$allDayPanel) || void 0 === _this$_$allDayPanel2 ? void 0 : _this$_$allDayPanel2.append(this._$allDayContainer, this._$allDayTable);\r\n            this._$sidebarScrollableContent.append(this._$timePanel)\r\n        }\r\n        this._sidebarScrollable.$content().append(this._$sidebarScrollableContent)\r\n    }\r\n    _appendHeaderPanelEmptyCellIfNecessary() {\r\n        this._isRenderHeaderPanelEmptyCell() && this._$headerPanelContainer.append(this._$headerPanelEmptyCell)\r\n    }\r\n    _createHeaderScrollable() {\r\n        var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this._$headerTablesContainer);\r\n        this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig());\r\n        this._scrollSync.header = getMemoizeScrollTo(() => this._headerScrollable)\r\n    }\r\n    _createSidebarScrollable() {\r\n        var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this._$flexContainer);\r\n        this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\r\n            useKeyboard: false,\r\n            showScrollbar: \"never\",\r\n            direction: \"vertical\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: event => {\r\n                this._scrollSync.dateTable({\r\n                    top: event.scrollOffset.top\r\n                })\r\n            }\r\n        });\r\n        this._scrollSync.sidebar = getMemoizeScrollTo(() => this._sidebarScrollable)\r\n    }\r\n    _attachTableClasses() {\r\n        this._addTableClass(this._$dateTable, DATE_TABLE_CLASS);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS)\r\n            }\r\n        } else if (!this.isRenovatedRender()) {\r\n            this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS)\r\n        }\r\n    }\r\n    _attachHeaderTableClasses() {\r\n        this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS)\r\n    }\r\n    _addTableClass($el, className) {\r\n        $el && !$el.hasClass(className) && $el.addClass(className)\r\n    }\r\n    _initMarkup() {\r\n        this.cache.clear();\r\n        this._initWorkSpaceUnits();\r\n        this._initVirtualScrolling();\r\n        this._initDateTableScrollable();\r\n        this._createWorkSpaceElements();\r\n        super._initMarkup();\r\n        if (!this.option(\"crossScrollingEnabled\")) {\r\n            this._attachTableClasses();\r\n            this._attachHeaderTableClasses()\r\n        }\r\n        this._toggleGroupedClass();\r\n        this._renderView();\r\n        this._attachEvents()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    }\r\n    _toggleGroupedClass() {\r\n        this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0)\r\n    }\r\n    _renderView() {\r\n        if (this.isRenovatedRender()) {\r\n            if (this._isVerticalGroupedWorkSpace()) {\r\n                this.renderRGroupPanel()\r\n            }\r\n        } else {\r\n            this._applyCellTemplates(this._renderGroupHeader())\r\n        }\r\n        this.renderWorkSpace();\r\n        if (this.isRenovatedRender()) {\r\n            this.virtualScrollingDispatcher.updateDimensions()\r\n        }\r\n        this._updateGroupTableHeight();\r\n        this.updateHeaderEmptyCellWidth();\r\n        this._shader = new VerticalShader(this)\r\n    }\r\n    updateCellsSelection() {\r\n        var renderOptions = this.generateRenderOptions();\r\n        this.viewDataProvider.updateViewData(renderOptions);\r\n        this.renderRWorkSpace({\r\n            timePanel: true,\r\n            dateTable: true,\r\n            allDayPanel: true\r\n        })\r\n    }\r\n    _renderDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _setIndicationUpdateInterval() {\r\n        return noop()\r\n    }\r\n    _refreshDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _detachGroupCountClass() {\r\n        [...VERTICAL_GROUP_COUNT_CLASSES].forEach(className => {\r\n            this.$element().removeClass(className)\r\n        })\r\n    }\r\n    _attachGroupCountClass() {\r\n        var className = this._groupedStrategy.getGroupCountClass(this.option(\"groups\"));\r\n        this.$element().addClass(className)\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"dateCellTemplate\")\r\n    }\r\n    _toggleAllDayVisibility(isUpdateScrollable) {\r\n        var showAllDayPanel = this._isShowAllDayPanel();\r\n        this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\r\n        this._changeAllDayVisibility();\r\n        isUpdateScrollable && this._updateScrollable()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        this.cache.clear();\r\n        this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel())\r\n    }\r\n    _getDateTables() {\r\n        return this._$dateTable.add(this._$allDayTable)\r\n    }\r\n    _getDateTable() {\r\n        return this._$dateTable\r\n    }\r\n    _removeAllDayElements() {\r\n        this._$allDayTable && this._$allDayTable.remove();\r\n        this._$allDayTitle && this._$allDayTitle.remove()\r\n    }\r\n    _cleanView() {\r\n        var _this$_shader;\r\n        this.cache.clear();\r\n        this._cleanTableWidths();\r\n        this.cellsSelectionState.clearSelectedAndFocusedCells();\r\n        if (!this.isRenovatedRender()) {\r\n            var _this$_$allDayTable, _this$_$sidebarTable;\r\n            this._$thead.empty();\r\n            this._$dateTable.empty();\r\n            this._$timePanel.empty();\r\n            this._$groupTable.empty();\r\n            null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\r\n            null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty()\r\n        }\r\n        null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\r\n        delete this._interval\r\n    }\r\n    _clean() {\r\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n        this._disposeRenovatedComponents();\r\n        super._clean()\r\n    }\r\n    _cleanTableWidths() {\r\n        this._$headerPanel.css(\"width\", \"\");\r\n        this._$dateTable.css(\"width\", \"\");\r\n        this._$allDayTable && this._$allDayTable.css(\"width\", \"\")\r\n    }\r\n    _disposeRenovatedComponents() {\r\n        var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\r\n        null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\r\n        this.renovatedAllDayPanel = void 0;\r\n        null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\r\n        this.renovatedDateTable = void 0;\r\n        null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\r\n        this.renovatedTimePanel = void 0;\r\n        null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\r\n        this.renovatedGroupPanel = void 0;\r\n        null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\r\n        this.renovatedHeaderPanel = void 0\r\n    }\r\n    getGroupedStrategy() {\r\n        return this._groupedStrategy\r\n    }\r\n    getFixedContainer() {\r\n        return this._$fixedContainer\r\n    }\r\n    getAllDayContainer() {\r\n        return this._$allDayContainer\r\n    }\r\n    updateRender() {\r\n        this.renderer.updateRender()\r\n    }\r\n    updateGrid() {\r\n        this.renderer._renderGrid()\r\n    }\r\n    updateAppointments() {\r\n        var _this$dragBehavior2;\r\n        this.option(\"onRenderAppointments\")();\r\n        null === (_this$dragBehavior2 = this.dragBehavior) || void 0 === _this$dragBehavior2 ? void 0 : _this$dragBehavior2.updateDragSource()\r\n    }\r\n    _createAllDayPanelElements() {\r\n        var groupCount = this._getGroupCount();\r\n        if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\r\n                this._allDayTitles.push($allDayTitle);\r\n                this._$allDayTable = $(\"<table>\");\r\n                this._allDayTables.push(this._$allDayTable);\r\n                this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\r\n                this._allDayPanels.push(this._$allDayPanel)\r\n            }\r\n        } else {\r\n            this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\r\n            this._$allDayTable = $(\"<table>\");\r\n            this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable)\r\n        }\r\n    }\r\n    renderWorkSpace() {\r\n        var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        this.cache.clear();\r\n        this.viewDataProvider.update(this.generateRenderOptions(), isGenerateNewViewData);\r\n        if (this.isRenovatedRender()) {\r\n            this.renderRWorkSpace()\r\n        } else {\r\n            this._renderDateHeader();\r\n            this._renderTimePanel();\r\n            this._renderGroupAllDayPanel();\r\n            this._renderDateTable();\r\n            this._renderAllDayPanel()\r\n        }\r\n        this._initPositionHelper()\r\n    }\r\n    _renderGroupHeader() {\r\n        var $container = this._getGroupHeaderContainer();\r\n        var groupCount = this._getGroupCount();\r\n        var cellTemplates = [];\r\n        if (groupCount) {\r\n            var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\r\n            this._attachGroupCountClass();\r\n            $container.append(groupRows.elements);\r\n            cellTemplates = groupRows.cellTemplates\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n        return cellTemplates\r\n    }\r\n    _applyCellTemplates(templates) {\r\n        null === templates || void 0 === templates ? void 0 : templates.forEach((function(template) {\r\n            template()\r\n        }))\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupHeaderRowClass: GROUP_ROW_CLASS,\r\n            groupRowClass: GROUP_ROW_CLASS,\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate)\r\n    }\r\n    _renderDateHeader() {\r\n        var container = this._getDateHeaderContainer();\r\n        var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\r\n        var count = this._getCellCount();\r\n        var cellTemplate = this._getDateHeaderTemplate();\r\n        var repeatCount = this._getCalculateHeaderCellRepeatCount();\r\n        var templateCallbacks = [];\r\n        var groupByDate = this.isGroupedByDate();\r\n        if (!groupByDate) {\r\n            for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\r\n                for (var columnIndex = 0; columnIndex < count; columnIndex++) {\r\n                    var templateIndex = rowIndex * count + columnIndex;\r\n                    this._renderDateHeaderTemplate($headerRow, columnIndex, templateIndex, cellTemplate, templateCallbacks)\r\n                }\r\n            }\r\n            container.append($headerRow)\r\n        } else {\r\n            var colSpan = groupByDate ? this._getGroupCount() : 1;\r\n            for (var _columnIndex = 0; _columnIndex < count; _columnIndex++) {\r\n                var _templateIndex = _columnIndex * repeatCount;\r\n                var cellElement = this._renderDateHeaderTemplate($headerRow, _columnIndex, _templateIndex, cellTemplate, templateCallbacks);\r\n                cellElement.attr(\"colSpan\", colSpan)\r\n            }\r\n            container.prepend($headerRow)\r\n        }\r\n        this._applyCellTemplates(templateCallbacks);\r\n        return $headerRow\r\n    }\r\n    _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\r\n        var validTemplateIndex = this.isGroupedByDate() ? Math.floor(templateIndex / this._getGroupCount()) : templateIndex;\r\n        var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\r\n        var {\r\n            text: text,\r\n            startDate: date\r\n        } = completeDateHeaderMap[completeDateHeaderMap.length - 1][validTemplateIndex];\r\n        var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\r\n        if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\r\n            templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\r\n                model: _extends({\r\n                    text: text,\r\n                    date: date\r\n                }, this._getGroupsForDateHeaderTemplate(templateIndex)),\r\n                index: templateIndex,\r\n                container: getPublicElement($cell)\r\n            }))\r\n        } else {\r\n            $cell.text(text)\r\n        }\r\n        container.append($cell);\r\n        return $cell\r\n    }\r\n    _getGroupsForDateHeaderTemplate(templateIndex) {\r\n        var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\r\n        var groupIndex;\r\n        var groups;\r\n        if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\r\n            groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\r\n            var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\r\n            groups = getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return {\r\n            groups: groups,\r\n            groupIndex: groupIndex\r\n        }\r\n    }\r\n    _getHeaderPanelCellClass(i) {\r\n        var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate())\r\n    }\r\n    _renderAllDayPanel(index) {\r\n        var cellCount = this._getCellCount();\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            cellCount *= this._getGroupCount() || 1\r\n        }\r\n        var cellTemplates = this._renderTableBody({\r\n            container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\r\n            rowCount: 1,\r\n            cellCount: cellCount,\r\n            cellClass: this._getAllDayPanelCellClass.bind(this),\r\n            rowClass: ALL_DAY_TABLE_ROW_CLASS,\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: this._oldRender_getAllDayCellData(index),\r\n            groupIndex: index\r\n        }, true);\r\n        this._toggleAllDayVisibility(true);\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _renderGroupAllDayPanel() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._renderAllDayPanel(i)\r\n            }\r\n        }\r\n    }\r\n    _getAllDayPanelCellClass(i, j) {\r\n        var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1)\r\n    }\r\n    _renderTimePanel() {\r\n        var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\r\n        var getData = (rowIndex, field) => {\r\n            var allDayPanelsCount = 0;\r\n            if (this.isAllDayPanelVisible) {\r\n                allDayPanelsCount = 1\r\n            }\r\n            if (this.isGroupedAllDayPanel()) {\r\n                allDayPanelsCount = Math.ceil((rowIndex + 1) / this._getRowCount())\r\n            }\r\n            var validRowIndex = rowIndex + allDayPanelsCount;\r\n            return this.viewDataProvider.completeTimePanelMap[validRowIndex][field]\r\n        };\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount() * repeatCount,\r\n            cellCount: 1,\r\n            cellClass: this._getTimeCellClass.bind(this),\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellTemplate: this.option(\"timeCellTemplate\"),\r\n            getCellText: rowIndex => getData(rowIndex, \"text\"),\r\n            getCellDate: rowIndex => getData(rowIndex, \"startDate\"),\r\n            groupCount: this._getGroupCount(),\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\r\n            getTemplateData: (rowIndex => {\r\n                if (!this._isVerticalGroupedWorkSpace()) {\r\n                    return {}\r\n                }\r\n                var groupIndex = this._getGroupIndex(rowIndex, 0);\r\n                var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\r\n                var groups = getGroupsObjectFromGroupsArray(groupsArray);\r\n                return {\r\n                    groupIndex: groupIndex,\r\n                    groups: groups\r\n                }\r\n            }).bind(this)\r\n        })\r\n    }\r\n    _getTimeCellClass(i) {\r\n        var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass\r\n    }\r\n    _renderDateTable() {\r\n        var groupCount = this._getGroupCount();\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowCount: this._getTotalRowCount(groupCount),\r\n            cellCount: this._getTotalCellCount(groupCount),\r\n            cellClass: this._getDateTableCellClass.bind(this),\r\n            rowClass: DATE_TABLE_ROW_CLASS,\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: (_, rowIndex, columnIndex) => {\r\n                var isGroupedAllDayPanel = this.isGroupedAllDayPanel();\r\n                var validRowIndex = rowIndex;\r\n                if (isGroupedAllDayPanel) {\r\n                    var rowCount = this._getRowCount();\r\n                    var allDayPanelsCount = Math.ceil(rowIndex / rowCount);\r\n                    validRowIndex += allDayPanelsCount\r\n                }\r\n                var cellData = this.viewDataProvider.viewDataMap.dateTableMap[validRowIndex][columnIndex].cellData;\r\n                return {\r\n                    value: this._filterCellDataFields(cellData),\r\n                    fullValue: cellData,\r\n                    key: CELL_DATA\r\n                }\r\n            },\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\r\n            groupCount: groupCount,\r\n            groupByDate: this.option(\"groupByDate\")\r\n        })\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return this._groupedStrategy.insertAllDayRowsIntoDateTable()\r\n    }\r\n    _renderTableBody(options, delayCellTemplateRendering) {\r\n        var result = [];\r\n        if (!delayCellTemplateRendering) {\r\n            this._applyCellTemplates(tableCreator.makeTable(options))\r\n        } else {\r\n            result = tableCreator.makeTable(options)\r\n        }\r\n        return result\r\n    }\r\n}\r\nvar createDragBehaviorConfig = (container, rootElement, isDefaultDraggingMode, dragBehavior, enableDefaultDragging, disableDefaultDragging, getDroppableCell, getDateTables, removeDroppableCellClass, getCellWidth, options) => {\r\n    var state = {\r\n        dragElement: void 0,\r\n        itemData: void 0\r\n    };\r\n    var isItemDisabled = () => {\r\n        var {\r\n            itemData: itemData\r\n        } = state;\r\n        if (itemData) {\r\n            var getter = compileGetter(\"disabled\");\r\n            return getter(itemData)\r\n        }\r\n        return true\r\n    };\r\n    var cursorOffset = options.isSetCursorOffset ? () => {\r\n        var $dragElement = $(state.dragElement);\r\n        return {\r\n            x: getWidth($dragElement) / 2,\r\n            y: getHeight($dragElement) / 2\r\n        }\r\n    } : void 0;\r\n    return {\r\n        container: container,\r\n        dragTemplate: () => state.dragElement,\r\n        onDragStart: e => {\r\n            if (!isDefaultDraggingMode) {\r\n                disableDefaultDragging()\r\n            }\r\n            var canceled = e.cancel;\r\n            var event = e.event;\r\n            var $itemElement = $(e.itemElement);\r\n            var appointments = e.component._appointments;\r\n            state.itemData = options.getItemData(e.itemElement, appointments);\r\n            var settings = options.getItemSettings($itemElement, e);\r\n            var initialPosition = options.initialPosition;\r\n            if (!isItemDisabled()) {\r\n                event.data = event.data || {};\r\n                if (!canceled) {\r\n                    if (!settings.isCompact) {\r\n                        dragBehavior.updateDragSource(state.itemData, settings)\r\n                    }\r\n                    state.dragElement = ((itemData, settings, appointments) => {\r\n                        var appointmentIndex = appointments.option(\"items\").length;\r\n                        settings.isCompact = false;\r\n                        settings.virtual = false;\r\n                        var items = appointments._renderItem(appointmentIndex, {\r\n                            itemData: itemData,\r\n                            settings: [settings]\r\n                        });\r\n                        return items[0]\r\n                    })(state.itemData, settings, appointments);\r\n                    event.data.itemElement = state.dragElement;\r\n                    event.data.initialPosition = null !== initialPosition && void 0 !== initialPosition ? initialPosition : locate($(state.dragElement));\r\n                    event.data.itemData = state.itemData;\r\n                    event.data.itemSettings = settings;\r\n                    dragBehavior.onDragStart(event.data);\r\n                    resetPosition($(state.dragElement))\r\n                }\r\n            }\r\n        },\r\n        onDragMove: () => {\r\n            if (isDefaultDraggingMode) {\r\n                return\r\n            }\r\n            var elements = (() => {\r\n                var appointmentWidth = getWidth(state.dragElement);\r\n                var cellWidth = getCellWidth();\r\n                var isWideAppointment = appointmentWidth > cellWidth;\r\n                var isNarrowAppointment = appointmentWidth <= DRAGGING_MOUSE_FAULT;\r\n                var dragElementContainer = $(state.dragElement).parent();\r\n                var boundingRect = getBoundingRect(dragElementContainer.get(0));\r\n                var newX = boundingRect.left;\r\n                var newY = boundingRect.top;\r\n                if (isWideAppointment) {\r\n                    return domAdapter.elementsFromPoint(newX + DRAGGING_MOUSE_FAULT, newY + DRAGGING_MOUSE_FAULT)\r\n                } else if (isNarrowAppointment) {\r\n                    return domAdapter.elementsFromPoint(newX, newY)\r\n                }\r\n                return domAdapter.elementsFromPoint(newX + appointmentWidth / 2, newY + DRAGGING_MOUSE_FAULT)\r\n            })();\r\n            var isMoveUnderControl = !!elements.find(el => el === rootElement.get(0));\r\n            var dateTables = getDateTables();\r\n            var droppableCell = elements.find(el => {\r\n                var classList = el.classList;\r\n                var isCurrentSchedulerElement = 1 === dateTables.find(el).length;\r\n                return isCurrentSchedulerElement && (classList.contains(DATE_TABLE_CELL_CLASS) || classList.contains(ALL_DAY_TABLE_CELL_CLASS))\r\n            });\r\n            if (droppableCell) {\r\n                if (!getDroppableCell().is(droppableCell)) {\r\n                    removeDroppableCellClass()\r\n                }\r\n                $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n            } else if (!isMoveUnderControl) {\r\n                removeDroppableCellClass()\r\n            }\r\n        },\r\n        onDragEnd: e => {\r\n            var _state$dragElement;\r\n            if (!isDefaultDraggingMode) {\r\n                enableDefaultDragging()\r\n            }\r\n            if (!isItemDisabled()) {\r\n                dragBehavior.onDragEnd(e)\r\n            }\r\n            null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\r\n            removeDroppableCellClass()\r\n        },\r\n        cursorOffset: cursorOffset,\r\n        filter: options.filter\r\n    }\r\n};\r\nexport default SchedulerWorkSpace;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}