{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../../../core/utils/type\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { PathTimeZoneConversion } from \"./types\";\nvar MS_IN_MINUTE = 6e4;\nvar MS_IN_HOUR = 60 * MS_IN_MINUTE;\nexport class TimeZoneCalculator {\n  constructor(options) {\n    this.options = options;\n  }\n  createDate(sourceDate, info) {\n    var date = new Date(sourceDate);\n    switch (info.path) {\n      case PathTimeZoneConversion.fromSourceToAppointment:\n        return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\n      case PathTimeZoneConversion.fromAppointmentToSource:\n        return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\n      case PathTimeZoneConversion.fromSourceToGrid:\n        return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\n      case PathTimeZoneConversion.fromGridToSource:\n        return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\n      default:\n        throw new Error(\"not specified pathTimeZoneConversion\");\n    }\n  }\n  getOffsets(date, appointmentTimezone) {\n    var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\n    var commonOffset = this.getCommonOffset(date);\n    var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\n    return {\n      client: clientOffset,\n      common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n      appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n    };\n  }\n  getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n    var direction = isBack ? -1 : 1;\n    var resultDate = new Date(date);\n    resultDate.setMinutes(resultDate.getMinutes() - direction * (60 * clientOffset));\n    resultDate.setMinutes(resultDate.getMinutes() + direction * (60 * targetOffset));\n    return new Date(resultDate);\n  }\n  getOriginStartDateOffsetInMs(date, timezone, isUTCDate) {\n    var offsetInHours = this.getOffsetInHours(date, timezone, isUTCDate);\n    return offsetInHours * MS_IN_HOUR;\n  }\n  getOffsetInHours(date, timezone, isUTCDate) {\n    var {\n      appointment: appointment,\n      client: client,\n      common: common\n    } = this.getOffsets(date, timezone);\n    if (!!timezone && isUTCDate) {\n      return appointment - client;\n    }\n    if (!!timezone && !isUTCDate) {\n      return appointment - common;\n    }\n    if (!timezone && isUTCDate) {\n      return common - client;\n    }\n    return 0;\n  }\n  getClientOffset(date) {\n    return this.options.getClientOffset(date);\n  }\n  getCommonOffset(date) {\n    return this.options.tryGetCommonOffset(date);\n  }\n  getAppointmentOffset(date, appointmentTimezone) {\n    return this.options.tryGetAppointmentOffset(date, appointmentTimezone);\n  }\n  getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n    var newDate = new Date(date.getTime());\n    var offsets = this.getOffsets(newDate, appointmentTimezone);\n    if (useAppointmentTimeZone && !!appointmentTimezone) {\n      return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n    }\n    return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n  }\n}","map":{"version":3,"names":["isDefined","dateUtils","PathTimeZoneConversion","MS_IN_MINUTE","MS_IN_HOUR","TimeZoneCalculator","constructor","options","createDate","sourceDate","info","date","Date","path","fromSourceToAppointment","getConvertedDate","appointmentTimeZone","fromAppointmentToSource","fromSourceToGrid","fromGridToSource","Error","getOffsets","appointmentTimezone","clientOffset","getClientOffset","dateToMilliseconds","commonOffset","getCommonOffset","appointmentOffset","getAppointmentOffset","client","common","appointment","getConvertedDateByOffsets","targetOffset","isBack","direction","resultDate","setMinutes","getMinutes","getOriginStartDateOffsetInMs","timezone","isUTCDate","offsetInHours","getOffsetInHours","tryGetCommonOffset","tryGetAppointmentOffset","useAppointmentTimeZone","newDate","getTime","offsets"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/devextreme/esm/renovation/ui/scheduler/timeZoneCalculator/utils.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    PathTimeZoneConversion\r\n} from \"./types\";\r\nvar MS_IN_MINUTE = 6e4;\r\nvar MS_IN_HOUR = 60 * MS_IN_MINUTE;\r\nexport class TimeZoneCalculator {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    createDate(sourceDate, info) {\r\n        var date = new Date(sourceDate);\r\n        switch (info.path) {\r\n            case PathTimeZoneConversion.fromSourceToAppointment:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\r\n            case PathTimeZoneConversion.fromAppointmentToSource:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\r\n            case PathTimeZoneConversion.fromSourceToGrid:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\r\n            case PathTimeZoneConversion.fromGridToSource:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\r\n            default:\r\n                throw new Error(\"not specified pathTimeZoneConversion\")\r\n        }\r\n    }\r\n    getOffsets(date, appointmentTimezone) {\r\n        var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\r\n        var commonOffset = this.getCommonOffset(date);\r\n        var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\r\n        return {\r\n            client: clientOffset,\r\n            common: !isDefined(commonOffset) ? clientOffset : commonOffset,\r\n            appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\r\n        }\r\n    }\r\n    getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\r\n        var direction = isBack ? -1 : 1;\r\n        var resultDate = new Date(date);\r\n        resultDate.setMinutes(resultDate.getMinutes() - direction * (60 * clientOffset));\r\n        resultDate.setMinutes(resultDate.getMinutes() + direction * (60 * targetOffset));\r\n        return new Date(resultDate)\r\n    }\r\n    getOriginStartDateOffsetInMs(date, timezone, isUTCDate) {\r\n        var offsetInHours = this.getOffsetInHours(date, timezone, isUTCDate);\r\n        return offsetInHours * MS_IN_HOUR\r\n    }\r\n    getOffsetInHours(date, timezone, isUTCDate) {\r\n        var {\r\n            appointment: appointment,\r\n            client: client,\r\n            common: common\r\n        } = this.getOffsets(date, timezone);\r\n        if (!!timezone && isUTCDate) {\r\n            return appointment - client\r\n        }\r\n        if (!!timezone && !isUTCDate) {\r\n            return appointment - common\r\n        }\r\n        if (!timezone && isUTCDate) {\r\n            return common - client\r\n        }\r\n        return 0\r\n    }\r\n    getClientOffset(date) {\r\n        return this.options.getClientOffset(date)\r\n    }\r\n    getCommonOffset(date) {\r\n        return this.options.tryGetCommonOffset(date)\r\n    }\r\n    getAppointmentOffset(date, appointmentTimezone) {\r\n        return this.options.tryGetAppointmentOffset(date, appointmentTimezone)\r\n    }\r\n    getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\r\n        var newDate = new Date(date.getTime());\r\n        var offsets = this.getOffsets(newDate, appointmentTimezone);\r\n        if (useAppointmentTimeZone && !!appointmentTimezone) {\r\n            return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack)\r\n        }\r\n        return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack)\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}