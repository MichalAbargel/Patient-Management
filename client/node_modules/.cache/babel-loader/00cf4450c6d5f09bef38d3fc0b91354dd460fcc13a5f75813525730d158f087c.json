{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_vertical.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { roundFloatPart } from \"../../../../core/utils/math\";\nimport { isNumeric } from \"../../../../core/utils/type\";\nimport { getAppointmentTakesAllDay } from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\nimport { createAppointmentAdapter } from \"../../../../ui/scheduler/appointmentAdapter\";\nimport { ExpressionUtils } from \"../../../../ui/scheduler/expressionUtils\";\nimport timeZoneUtils from \"../../../../ui/scheduler/utils.timeZone\";\nimport BaseAppointmentsStrategy from \"./m_strategy_base\";\nvar ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET = 5;\nvar ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET = 20;\nvar toMs = dateUtils.dateToMilliseconds;\nclass VerticalRenderingStrategy extends BaseAppointmentsStrategy {\n  getDeltaTime(args, initialSize, appointment) {\n    var deltaTime = 0;\n    if (this.isAllDay(appointment)) {\n      deltaTime = this._getDeltaWidth(args, initialSize) * toMs(\"day\");\n    } else {\n      var deltaHeight = args.height - initialSize.height;\n      deltaTime = toMs(\"minute\") * Math.round(deltaHeight / this.cellHeight * this.cellDurationInMinutes);\n    }\n    return deltaTime;\n  }\n  _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\n    if (isAllDay) {\n      super._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\n    } else if (0 === this._getMaxAppointmentCountPerCellByType()) {\n      var {\n        cellHeight: cellHeight\n      } = this;\n      var {\n        cellWidth: cellWidth\n      } = this;\n      coordinates.top += (cellHeight - this.getDropDownButtonAdaptiveSize()) / 2;\n      coordinates.left += (cellWidth - this.getDropDownButtonAdaptiveSize()) / 2;\n    }\n  }\n  getAppointmentGeometry(coordinates) {\n    var geometry = null;\n    if (coordinates.allDay) {\n      geometry = this._getAllDayAppointmentGeometry(coordinates);\n    } else {\n      geometry = this.isAdaptive && coordinates.isCompact ? this._getAdaptiveGeometry(coordinates) : this._getVerticalAppointmentGeometry(coordinates);\n    }\n    return super.getAppointmentGeometry(geometry);\n  }\n  _getAdaptiveGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n  }\n  _getItemPosition(appointment) {\n    var allDay = this.isAllDay(appointment);\n    if (allDay) {\n      return super._getItemPosition(appointment);\n    }\n    var adapter = createAppointmentAdapter(appointment, this.dataAccessors, this.timeZoneCalculator);\n    var isRecurring = !!adapter.recurrenceRule;\n    var appointmentStartDate = adapter.calculateStartDate(\"toGrid\");\n    var appointmentEndDate = adapter.calculateEndDate(\"toGrid\");\n    var appointmentDuration = appointmentEndDate - appointmentStartDate;\n    var appointmentBeginInCurrentView = this.options.startViewDate < appointmentStartDate;\n    var isAppointmentTakesSeveralDays = !timeZoneUtils.isSameAppointmentDates(appointmentStartDate, appointmentEndDate);\n    var settings = this.generateAppointmentSettings(appointment);\n    var result = [];\n    for (var j = 0; j < settings.length; j++) {\n      var currentSetting = settings[j];\n      var height = this.calculateAppointmentHeight(appointment, currentSetting);\n      var width = this.calculateAppointmentWidth(appointment, currentSetting);\n      var resultHeight = height;\n      var appointmentReduced = null;\n      var multiDaysAppointmentParts = [];\n      var currentMaxAllowedPosition = currentSetting.vMax;\n      if (this._isMultiViewAppointment(currentSetting, height) || isAppointmentTakesSeveralDays && !isRecurring) {\n        var trimmedStartDate = dateUtils.trimTime(appointmentStartDate);\n        var trimmedSettingStartDate = dateUtils.trimTime(currentSetting.info.appointment.startDate);\n        var reduceHead = trimmedStartDate <= trimmedSettingStartDate || isRecurring;\n        if (reduceHead) {\n          resultHeight = this._reduceMultiDayAppointment(height, {\n            top: currentSetting.top,\n            bottom: currentMaxAllowedPosition\n          });\n          multiDaysAppointmentParts = this._getAppointmentParts({\n            sourceAppointmentHeight: height,\n            reducedHeight: resultHeight,\n            width: width\n          }, currentSetting);\n        }\n        var {\n          startDate: currentSettingStartDate,\n          normalizedEndDate: currentSettingNormalizedEndDate\n        } = currentSetting.info.appointment;\n        var currentSettingDuration = currentSettingNormalizedEndDate - currentSettingStartDate;\n        var hasNextParts = currentSettingDuration < appointmentDuration;\n        appointmentReduced = hasNextParts ? appointmentBeginInCurrentView ? \"head\" : \"body\" : appointmentBeginInCurrentView ? \"head\" : \"tail\";\n      }\n      extend(currentSetting, {\n        height: resultHeight,\n        width: width,\n        allDay: allDay,\n        appointmentReduced: appointmentReduced\n      });\n      result = this._getAppointmentPartsPosition(multiDaysAppointmentParts, currentSetting, result);\n    }\n    return result;\n  }\n  _isMultiViewAppointment(_ref, height) {\n    var {\n      vMax: vMax,\n      top: top\n    } = _ref;\n    var fullAppointmentHeight = roundFloatPart(height, 2);\n    var remainingHeight = roundFloatPart(vMax - top, 2);\n    return fullAppointmentHeight > remainingHeight;\n  }\n  _reduceMultiDayAppointment(sourceAppointmentHeight, bound) {\n    return Math.min(sourceAppointmentHeight, bound.bottom - Math.floor(bound.top));\n  }\n  _getGroupHeight() {\n    return this.cellHeight * this.rowCount;\n  }\n  _getGroupTopOffset(appointmentSettings) {\n    var {\n      groupIndex: groupIndex\n    } = appointmentSettings;\n    var groupTop = Math.max(0, this.positionHelper.getGroupTop({\n      groupIndex: groupIndex,\n      showAllDayPanel: this.showAllDayPanel,\n      isGroupedAllDayPanel: this.isGroupedAllDayPanel\n    }));\n    var allDayPanelOffset = this.positionHelper.getOffsetByAllDayPanel({\n      groupIndex: groupIndex,\n      supportAllDayRow: this.allDaySupported(),\n      showAllDayPanel: this.showAllDayPanel\n    });\n    var appointmentGroupTopOffset = appointmentSettings.top - groupTop - allDayPanelOffset;\n    return appointmentGroupTopOffset;\n  }\n  _getTailHeight(appointmentGeometry, appointmentSettings) {\n    if (!this.isVirtualScrolling) {\n      return appointmentGeometry.sourceAppointmentHeight - appointmentGeometry.reducedHeight;\n    }\n    var appointmentGroupTopOffset = this._getGroupTopOffset(appointmentSettings);\n    var {\n      sourceAppointmentHeight: sourceAppointmentHeight\n    } = appointmentGeometry;\n    var groupHeight = this._getGroupHeight();\n    var tailHeight = appointmentGroupTopOffset + sourceAppointmentHeight - groupHeight;\n    return tailHeight;\n  }\n  _getAppointmentParts(appointmentGeometry, appointmentSettings) {\n    var {\n      width: width\n    } = appointmentGeometry;\n    var result = [];\n    var currentPartTop = Math.max(0, this.positionHelper.getGroupTop({\n      groupIndex: appointmentSettings.groupIndex,\n      showAllDayPanel: this.showAllDayPanel,\n      isGroupedAllDayPanel: this.isGroupedAllDayPanel\n    }));\n    var cellsDiff = this.isGroupedByDate ? this.groupCount : 1;\n    var offset = this.cellWidth * cellsDiff;\n    var allDayPanelOffset = this.positionHelper.getOffsetByAllDayPanel({\n      groupIndex: appointmentSettings.groupIndex,\n      supportAllDayRow: this.allDaySupported(),\n      showAllDayPanel: this.showAllDayPanel\n    });\n    currentPartTop += allDayPanelOffset;\n    var minHeight = this.getAppointmentMinSize();\n    var {\n      vMax: vMax,\n      hMax: hMax\n    } = appointmentSettings;\n    var hasTailPart = this.options.endViewDate > appointmentSettings.info.appointment.endDate;\n    var left = Math.round(appointmentSettings.left + offset);\n    var tailHeight = this._getTailHeight(appointmentGeometry, appointmentSettings);\n    while (tailHeight > 0 && left < hMax) {\n      tailHeight = Math.max(minHeight, tailHeight);\n      var columnIndex = appointmentSettings.columnIndex + cellsDiff;\n      var height = Math.min(tailHeight, vMax);\n      result.push(_extends(_extends({}, appointmentSettings), {\n        top: currentPartTop,\n        left: left,\n        height: height,\n        width: width,\n        appointmentReduced: \"body\",\n        rowIndex: 0,\n        columnIndex: columnIndex\n      }));\n      left += offset;\n      tailHeight -= vMax;\n    }\n    if (hasTailPart && result.length > 0) {\n      result[result.length - 1].appointmentReduced = \"tail\";\n    }\n    return result;\n  }\n  _getMinuteHeight() {\n    return this.cellHeight / this.cellDurationInMinutes;\n  }\n  _getCompactLeftCoordinate(itemLeft, index) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    return itemLeft + (1 + cellWidth) * index;\n  }\n  _getVerticalAppointmentGeometry(coordinates) {\n    var config = this._calculateVerticalGeometryConfig(coordinates);\n    return this._customizeVerticalCoordinates(coordinates, config.width, config.appointmentCountPerCell, config.offset);\n  }\n  _customizeVerticalCoordinates(coordinates, width, appointmentCountPerCell, topOffset, isAllDay) {\n    var appointmentWidth = Math.max(width / appointmentCountPerCell, width / coordinates.count);\n    var {\n      height: height\n    } = coordinates;\n    var appointmentLeft = coordinates.left + coordinates.index * appointmentWidth;\n    var {\n      top: top\n    } = coordinates;\n    if (coordinates.isCompact) {\n      this._markAppointmentAsVirtual(coordinates, isAllDay);\n    }\n    return {\n      height: height,\n      width: appointmentWidth,\n      top: top,\n      left: appointmentLeft,\n      empty: this._isAppointmentEmpty(height, width)\n    };\n  }\n  _calculateVerticalGeometryConfig(coordinates) {\n    var overlappingMode = this.maxAppointmentsPerCell;\n    var offsets = this._getOffsets();\n    var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\n    var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\n    var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\n    var maxWidth = this._getMaxWidth();\n    if (!appointmentCountPerCell) {\n      appointmentCountPerCell = coordinates.count;\n      ratio = (maxWidth - offsets.unlimited) / maxWidth;\n    }\n    var topOffset = (1 - ratio) * maxWidth;\n    if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\n      ratio = 1;\n      maxWidth -= appointmentDefaultOffset;\n      topOffset = 0;\n    }\n    return {\n      width: ratio * maxWidth,\n      appointmentCountPerCell: appointmentCountPerCell,\n      offset: topOffset\n    };\n  }\n  _getMaxWidth() {\n    return this.cellWidth;\n  }\n  isAllDay(appointmentData) {\n    return getAppointmentTakesAllDay(createAppointmentAdapter(appointmentData, this.dataAccessors, this.timeZoneCalculator), this.startDayHour, this.endDayHour, this.allDayPanelMode);\n  }\n  _getAppointmentMaxWidth() {\n    return this.cellWidth - this._getAppointmentDefaultOffset();\n  }\n  calculateAppointmentWidth(appointment, position) {\n    if (!this.isAllDay(appointment)) {\n      return 0;\n    }\n    var startDate = dateUtils.trimTime(position.info.appointment.startDate);\n    var {\n      normalizedEndDate: normalizedEndDate\n    } = position.info.appointment;\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    var durationInHours = (normalizedEndDate.getTime() - startDate.getTime()) / toMs(\"hour\");\n    var skippedHours = getSkippedHoursInRange(position.info.appointment.startDate, position.info.appointment.endDate, this.viewDataProvider);\n    var width = Math.ceil((durationInHours - skippedHours) / 24) * cellWidth;\n    width = this.cropAppointmentWidth(width, cellWidth);\n    return width;\n  }\n  calculateAppointmentHeight(appointment, position) {\n    if (this.isAllDay(appointment)) {\n      return 0;\n    }\n    var {\n      startDate: startDate\n    } = position.info.appointment;\n    var {\n      normalizedEndDate: normalizedEndDate\n    } = position.info.appointment;\n    var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\n    var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\n    var durationInMinutes = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate) / toMs(\"minute\");\n    var height = durationInMinutes * this._getMinuteHeight();\n    return height;\n  }\n  getDirection() {\n    return \"vertical\";\n  }\n  _sortCondition(a, b) {\n    if (!!a.allDay !== !!b.allDay) {\n      return a.allDay ? 1 : -1;\n    }\n    var isAllDay = a.allDay && b.allDay;\n    return \"vertical\" === this.groupOrientation && isAllDay ? this._columnCondition(a, b) : this._rowCondition(a, b);\n  }\n  allDaySupported() {\n    return true;\n  }\n  _getAllDayAppointmentGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset, true);\n  }\n  _calculateGeometryConfig(coordinates) {\n    if (!this.allowResizing || !this.allowAllDayResizing) {\n      coordinates.skipResizing = true;\n    }\n    var config = super._calculateGeometryConfig(coordinates);\n    var minAppointmentCountPerCell = Math.min(config.appointmentCountPerCell, this._getDynamicAppointmentCountPerCell().allDay);\n    if (coordinates.allDay && coordinates.count <= minAppointmentCountPerCell) {\n      config.offset = 0;\n    }\n    return config;\n  }\n  _getAppointmentCount(overlappingMode, coordinates) {\n    return \"auto\" !== overlappingMode && 1 === coordinates.count && !isNumeric(overlappingMode) ? coordinates.count : this._getMaxAppointmentCountPerCellByType(coordinates.allDay);\n  }\n  _getDefaultRatio(coordinates, appointmentCountPerCell) {\n    return coordinates.count > this.appointmentCountPerCell ? .65 : 1;\n  }\n  _getOffsets() {\n    return {\n      unlimited: ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET,\n      auto: ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET\n    };\n  }\n  _getMaxHeight() {\n    return this.allDayHeight || this.getAppointmentMinSize();\n  }\n  _needVerticalGroupBounds(allDay) {\n    return !allDay;\n  }\n  _needHorizontalGroupBounds() {\n    return false;\n  }\n  getPositionShift(timeShift, isAllDay) {\n    if (!isAllDay && this.isAdaptive && 0 === this._getMaxAppointmentCountPerCellByType(isAllDay)) {\n      return {\n        top: 0,\n        left: 0,\n        cellPosition: 0\n      };\n    }\n    return super.getPositionShift(timeShift, isAllDay);\n  }\n}\nexport default VerticalRenderingStrategy;","map":{"version":3,"names":["_extends","dateUtils","extend","roundFloatPart","isNumeric","getAppointmentTakesAllDay","getSkippedHoursInRange","createAppointmentAdapter","ExpressionUtils","timeZoneUtils","BaseAppointmentsStrategy","ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET","ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET","toMs","dateToMilliseconds","VerticalRenderingStrategy","getDeltaTime","args","initialSize","appointment","deltaTime","isAllDay","_getDeltaWidth","deltaHeight","height","Math","round","cellHeight","cellDurationInMinutes","_correctCollectorCoordinatesInAdaptive","coordinates","_getMaxAppointmentCountPerCellByType","cellWidth","top","getDropDownButtonAdaptiveSize","left","getAppointmentGeometry","geometry","allDay","_getAllDayAppointmentGeometry","isAdaptive","isCompact","_getAdaptiveGeometry","_getVerticalAppointmentGeometry","config","_calculateGeometryConfig","_customizeCoordinates","appointmentCountPerCell","offset","_getItemPosition","adapter","dataAccessors","timeZoneCalculator","isRecurring","recurrenceRule","appointmentStartDate","calculateStartDate","appointmentEndDate","calculateEndDate","appointmentDuration","appointmentBeginInCurrentView","options","startViewDate","isAppointmentTakesSeveralDays","isSameAppointmentDates","settings","generateAppointmentSettings","result","j","length","currentSetting","calculateAppointmentHeight","width","calculateAppointmentWidth","resultHeight","appointmentReduced","multiDaysAppointmentParts","currentMaxAllowedPosition","vMax","_isMultiViewAppointment","trimmedStartDate","trimTime","trimmedSettingStartDate","info","startDate","reduceHead","_reduceMultiDayAppointment","bottom","_getAppointmentParts","sourceAppointmentHeight","reducedHeight","currentSettingStartDate","normalizedEndDate","currentSettingNormalizedEndDate","currentSettingDuration","hasNextParts","_getAppointmentPartsPosition","_ref","fullAppointmentHeight","remainingHeight","bound","min","floor","_getGroupHeight","rowCount","_getGroupTopOffset","appointmentSettings","groupIndex","groupTop","max","positionHelper","getGroupTop","showAllDayPanel","isGroupedAllDayPanel","allDayPanelOffset","getOffsetByAllDayPanel","supportAllDayRow","allDaySupported","appointmentGroupTopOffset","_getTailHeight","appointmentGeometry","isVirtualScrolling","groupHeight","tailHeight","currentPartTop","cellsDiff","isGroupedByDate","groupCount","minHeight","getAppointmentMinSize","hMax","hasTailPart","endViewDate","endDate","columnIndex","push","rowIndex","_getMinuteHeight","_getCompactLeftCoordinate","itemLeft","index","_calculateVerticalGeometryConfig","_customizeVerticalCoordinates","topOffset","appointmentWidth","count","appointmentLeft","_markAppointmentAsVirtual","empty","_isAppointmentEmpty","overlappingMode","maxAppointmentsPerCell","offsets","_getOffsets","appointmentDefaultOffset","_getAppointmentDefaultOffset","_getAppointmentCount","ratio","_getDefaultRatio","maxWidth","_getMaxWidth","unlimited","appointmentData","startDayHour","endDayHour","allDayPanelMode","_getAppointmentMaxWidth","position","durationInHours","getTime","skippedHours","viewDataProvider","ceil","cropAppointmentWidth","getField","duration","getAppointmentDurationInMs","durationInMinutes","_adjustDurationByDaylightDiff","getDirection","_sortCondition","a","b","groupOrientation","_columnCondition","_rowCondition","allowResizing","allowAllDayResizing","skipResizing","minAppointmentCountPerCell","_getDynamicAppointmentCountPerCell","auto","_getMaxHeight","allDayHeight","_needVerticalGroupBounds","_needHorizontalGroupBounds","getPositionShift","timeShift","cellPosition"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_vertical.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/rendering_strategies/m_strategy_vertical.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    roundFloatPart\r\n} from \"../../../../core/utils/math\";\r\nimport {\r\n    isNumeric\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    getAppointmentTakesAllDay\r\n} from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\r\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../../../ui/scheduler/appointmentAdapter\";\r\nimport {\r\n    ExpressionUtils\r\n} from \"../../../../ui/scheduler/expressionUtils\";\r\nimport timeZoneUtils from \"../../../../ui/scheduler/utils.timeZone\";\r\nimport BaseAppointmentsStrategy from \"./m_strategy_base\";\r\nvar ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET = 5;\r\nvar ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET = 20;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass VerticalRenderingStrategy extends BaseAppointmentsStrategy {\r\n    getDeltaTime(args, initialSize, appointment) {\r\n        var deltaTime = 0;\r\n        if (this.isAllDay(appointment)) {\r\n            deltaTime = this._getDeltaWidth(args, initialSize) * toMs(\"day\")\r\n        } else {\r\n            var deltaHeight = args.height - initialSize.height;\r\n            deltaTime = toMs(\"minute\") * Math.round(deltaHeight / this.cellHeight * this.cellDurationInMinutes)\r\n        }\r\n        return deltaTime\r\n    }\r\n    _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\r\n        if (isAllDay) {\r\n            super._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay)\r\n        } else if (0 === this._getMaxAppointmentCountPerCellByType()) {\r\n            var {\r\n                cellHeight: cellHeight\r\n            } = this;\r\n            var {\r\n                cellWidth: cellWidth\r\n            } = this;\r\n            coordinates.top += (cellHeight - this.getDropDownButtonAdaptiveSize()) / 2;\r\n            coordinates.left += (cellWidth - this.getDropDownButtonAdaptiveSize()) / 2\r\n        }\r\n    }\r\n    getAppointmentGeometry(coordinates) {\r\n        var geometry = null;\r\n        if (coordinates.allDay) {\r\n            geometry = this._getAllDayAppointmentGeometry(coordinates)\r\n        } else {\r\n            geometry = this.isAdaptive && coordinates.isCompact ? this._getAdaptiveGeometry(coordinates) : this._getVerticalAppointmentGeometry(coordinates)\r\n        }\r\n        return super.getAppointmentGeometry(geometry)\r\n    }\r\n    _getAdaptiveGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _getItemPosition(appointment) {\r\n        var allDay = this.isAllDay(appointment);\r\n        if (allDay) {\r\n            return super._getItemPosition(appointment)\r\n        }\r\n        var adapter = createAppointmentAdapter(appointment, this.dataAccessors, this.timeZoneCalculator);\r\n        var isRecurring = !!adapter.recurrenceRule;\r\n        var appointmentStartDate = adapter.calculateStartDate(\"toGrid\");\r\n        var appointmentEndDate = adapter.calculateEndDate(\"toGrid\");\r\n        var appointmentDuration = appointmentEndDate - appointmentStartDate;\r\n        var appointmentBeginInCurrentView = this.options.startViewDate < appointmentStartDate;\r\n        var isAppointmentTakesSeveralDays = !timeZoneUtils.isSameAppointmentDates(appointmentStartDate, appointmentEndDate);\r\n        var settings = this.generateAppointmentSettings(appointment);\r\n        var result = [];\r\n        for (var j = 0; j < settings.length; j++) {\r\n            var currentSetting = settings[j];\r\n            var height = this.calculateAppointmentHeight(appointment, currentSetting);\r\n            var width = this.calculateAppointmentWidth(appointment, currentSetting);\r\n            var resultHeight = height;\r\n            var appointmentReduced = null;\r\n            var multiDaysAppointmentParts = [];\r\n            var currentMaxAllowedPosition = currentSetting.vMax;\r\n            if (this._isMultiViewAppointment(currentSetting, height) || isAppointmentTakesSeveralDays && !isRecurring) {\r\n                var trimmedStartDate = dateUtils.trimTime(appointmentStartDate);\r\n                var trimmedSettingStartDate = dateUtils.trimTime(currentSetting.info.appointment.startDate);\r\n                var reduceHead = trimmedStartDate <= trimmedSettingStartDate || isRecurring;\r\n                if (reduceHead) {\r\n                    resultHeight = this._reduceMultiDayAppointment(height, {\r\n                        top: currentSetting.top,\r\n                        bottom: currentMaxAllowedPosition\r\n                    });\r\n                    multiDaysAppointmentParts = this._getAppointmentParts({\r\n                        sourceAppointmentHeight: height,\r\n                        reducedHeight: resultHeight,\r\n                        width: width\r\n                    }, currentSetting)\r\n                }\r\n                var {\r\n                    startDate: currentSettingStartDate,\r\n                    normalizedEndDate: currentSettingNormalizedEndDate\r\n                } = currentSetting.info.appointment;\r\n                var currentSettingDuration = currentSettingNormalizedEndDate - currentSettingStartDate;\r\n                var hasNextParts = currentSettingDuration < appointmentDuration;\r\n                appointmentReduced = hasNextParts ? appointmentBeginInCurrentView ? \"head\" : \"body\" : appointmentBeginInCurrentView ? \"head\" : \"tail\"\r\n            }\r\n            extend(currentSetting, {\r\n                height: resultHeight,\r\n                width: width,\r\n                allDay: allDay,\r\n                appointmentReduced: appointmentReduced\r\n            });\r\n            result = this._getAppointmentPartsPosition(multiDaysAppointmentParts, currentSetting, result)\r\n        }\r\n        return result\r\n    }\r\n    _isMultiViewAppointment(_ref, height) {\r\n        var {\r\n            vMax: vMax,\r\n            top: top\r\n        } = _ref;\r\n        var fullAppointmentHeight = roundFloatPart(height, 2);\r\n        var remainingHeight = roundFloatPart(vMax - top, 2);\r\n        return fullAppointmentHeight > remainingHeight\r\n    }\r\n    _reduceMultiDayAppointment(sourceAppointmentHeight, bound) {\r\n        return Math.min(sourceAppointmentHeight, bound.bottom - Math.floor(bound.top))\r\n    }\r\n    _getGroupHeight() {\r\n        return this.cellHeight * this.rowCount\r\n    }\r\n    _getGroupTopOffset(appointmentSettings) {\r\n        var {\r\n            groupIndex: groupIndex\r\n        } = appointmentSettings;\r\n        var groupTop = Math.max(0, this.positionHelper.getGroupTop({\r\n            groupIndex: groupIndex,\r\n            showAllDayPanel: this.showAllDayPanel,\r\n            isGroupedAllDayPanel: this.isGroupedAllDayPanel\r\n        }));\r\n        var allDayPanelOffset = this.positionHelper.getOffsetByAllDayPanel({\r\n            groupIndex: groupIndex,\r\n            supportAllDayRow: this.allDaySupported(),\r\n            showAllDayPanel: this.showAllDayPanel\r\n        });\r\n        var appointmentGroupTopOffset = appointmentSettings.top - groupTop - allDayPanelOffset;\r\n        return appointmentGroupTopOffset\r\n    }\r\n    _getTailHeight(appointmentGeometry, appointmentSettings) {\r\n        if (!this.isVirtualScrolling) {\r\n            return appointmentGeometry.sourceAppointmentHeight - appointmentGeometry.reducedHeight\r\n        }\r\n        var appointmentGroupTopOffset = this._getGroupTopOffset(appointmentSettings);\r\n        var {\r\n            sourceAppointmentHeight: sourceAppointmentHeight\r\n        } = appointmentGeometry;\r\n        var groupHeight = this._getGroupHeight();\r\n        var tailHeight = appointmentGroupTopOffset + sourceAppointmentHeight - groupHeight;\r\n        return tailHeight\r\n    }\r\n    _getAppointmentParts(appointmentGeometry, appointmentSettings) {\r\n        var {\r\n            width: width\r\n        } = appointmentGeometry;\r\n        var result = [];\r\n        var currentPartTop = Math.max(0, this.positionHelper.getGroupTop({\r\n            groupIndex: appointmentSettings.groupIndex,\r\n            showAllDayPanel: this.showAllDayPanel,\r\n            isGroupedAllDayPanel: this.isGroupedAllDayPanel\r\n        }));\r\n        var cellsDiff = this.isGroupedByDate ? this.groupCount : 1;\r\n        var offset = this.cellWidth * cellsDiff;\r\n        var allDayPanelOffset = this.positionHelper.getOffsetByAllDayPanel({\r\n            groupIndex: appointmentSettings.groupIndex,\r\n            supportAllDayRow: this.allDaySupported(),\r\n            showAllDayPanel: this.showAllDayPanel\r\n        });\r\n        currentPartTop += allDayPanelOffset;\r\n        var minHeight = this.getAppointmentMinSize();\r\n        var {\r\n            vMax: vMax,\r\n            hMax: hMax\r\n        } = appointmentSettings;\r\n        var hasTailPart = this.options.endViewDate > appointmentSettings.info.appointment.endDate;\r\n        var left = Math.round(appointmentSettings.left + offset);\r\n        var tailHeight = this._getTailHeight(appointmentGeometry, appointmentSettings);\r\n        while (tailHeight > 0 && left < hMax) {\r\n            tailHeight = Math.max(minHeight, tailHeight);\r\n            var columnIndex = appointmentSettings.columnIndex + cellsDiff;\r\n            var height = Math.min(tailHeight, vMax);\r\n            result.push(_extends(_extends({}, appointmentSettings), {\r\n                top: currentPartTop,\r\n                left: left,\r\n                height: height,\r\n                width: width,\r\n                appointmentReduced: \"body\",\r\n                rowIndex: 0,\r\n                columnIndex: columnIndex\r\n            }));\r\n            left += offset;\r\n            tailHeight -= vMax\r\n        }\r\n        if (hasTailPart && result.length > 0) {\r\n            result[result.length - 1].appointmentReduced = \"tail\"\r\n        }\r\n        return result\r\n    }\r\n    _getMinuteHeight() {\r\n        return this.cellHeight / this.cellDurationInMinutes\r\n    }\r\n    _getCompactLeftCoordinate(itemLeft, index) {\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        return itemLeft + (1 + cellWidth) * index\r\n    }\r\n    _getVerticalAppointmentGeometry(coordinates) {\r\n        var config = this._calculateVerticalGeometryConfig(coordinates);\r\n        return this._customizeVerticalCoordinates(coordinates, config.width, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _customizeVerticalCoordinates(coordinates, width, appointmentCountPerCell, topOffset, isAllDay) {\r\n        var appointmentWidth = Math.max(width / appointmentCountPerCell, width / coordinates.count);\r\n        var {\r\n            height: height\r\n        } = coordinates;\r\n        var appointmentLeft = coordinates.left + coordinates.index * appointmentWidth;\r\n        var {\r\n            top: top\r\n        } = coordinates;\r\n        if (coordinates.isCompact) {\r\n            this._markAppointmentAsVirtual(coordinates, isAllDay)\r\n        }\r\n        return {\r\n            height: height,\r\n            width: appointmentWidth,\r\n            top: top,\r\n            left: appointmentLeft,\r\n            empty: this._isAppointmentEmpty(height, width)\r\n        }\r\n    }\r\n    _calculateVerticalGeometryConfig(coordinates) {\r\n        var overlappingMode = this.maxAppointmentsPerCell;\r\n        var offsets = this._getOffsets();\r\n        var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\r\n        var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\r\n        var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\r\n        var maxWidth = this._getMaxWidth();\r\n        if (!appointmentCountPerCell) {\r\n            appointmentCountPerCell = coordinates.count;\r\n            ratio = (maxWidth - offsets.unlimited) / maxWidth\r\n        }\r\n        var topOffset = (1 - ratio) * maxWidth;\r\n        if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\r\n            ratio = 1;\r\n            maxWidth -= appointmentDefaultOffset;\r\n            topOffset = 0\r\n        }\r\n        return {\r\n            width: ratio * maxWidth,\r\n            appointmentCountPerCell: appointmentCountPerCell,\r\n            offset: topOffset\r\n        }\r\n    }\r\n    _getMaxWidth() {\r\n        return this.cellWidth\r\n    }\r\n    isAllDay(appointmentData) {\r\n        return getAppointmentTakesAllDay(createAppointmentAdapter(appointmentData, this.dataAccessors, this.timeZoneCalculator), this.startDayHour, this.endDayHour, this.allDayPanelMode)\r\n    }\r\n    _getAppointmentMaxWidth() {\r\n        return this.cellWidth - this._getAppointmentDefaultOffset()\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        if (!this.isAllDay(appointment)) {\r\n            return 0\r\n        }\r\n        var startDate = dateUtils.trimTime(position.info.appointment.startDate);\r\n        var {\r\n            normalizedEndDate: normalizedEndDate\r\n        } = position.info.appointment;\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        var durationInHours = (normalizedEndDate.getTime() - startDate.getTime()) / toMs(\"hour\");\r\n        var skippedHours = getSkippedHoursInRange(position.info.appointment.startDate, position.info.appointment.endDate, this.viewDataProvider);\r\n        var width = Math.ceil((durationInHours - skippedHours) / 24) * cellWidth;\r\n        width = this.cropAppointmentWidth(width, cellWidth);\r\n        return width\r\n    }\r\n    calculateAppointmentHeight(appointment, position) {\r\n        if (this.isAllDay(appointment)) {\r\n            return 0\r\n        }\r\n        var {\r\n            startDate: startDate\r\n        } = position.info.appointment;\r\n        var {\r\n            normalizedEndDate: normalizedEndDate\r\n        } = position.info.appointment;\r\n        var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\r\n        var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\r\n        var durationInMinutes = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate) / toMs(\"minute\");\r\n        var height = durationInMinutes * this._getMinuteHeight();\r\n        return height\r\n    }\r\n    getDirection() {\r\n        return \"vertical\"\r\n    }\r\n    _sortCondition(a, b) {\r\n        if (!!a.allDay !== !!b.allDay) {\r\n            return a.allDay ? 1 : -1\r\n        }\r\n        var isAllDay = a.allDay && b.allDay;\r\n        return \"vertical\" === this.groupOrientation && isAllDay ? this._columnCondition(a, b) : this._rowCondition(a, b)\r\n    }\r\n    allDaySupported() {\r\n        return true\r\n    }\r\n    _getAllDayAppointmentGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset, true)\r\n    }\r\n    _calculateGeometryConfig(coordinates) {\r\n        if (!this.allowResizing || !this.allowAllDayResizing) {\r\n            coordinates.skipResizing = true\r\n        }\r\n        var config = super._calculateGeometryConfig(coordinates);\r\n        var minAppointmentCountPerCell = Math.min(config.appointmentCountPerCell, this._getDynamicAppointmentCountPerCell().allDay);\r\n        if (coordinates.allDay && coordinates.count <= minAppointmentCountPerCell) {\r\n            config.offset = 0\r\n        }\r\n        return config\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {\r\n        return \"auto\" !== overlappingMode && 1 === coordinates.count && !isNumeric(overlappingMode) ? coordinates.count : this._getMaxAppointmentCountPerCellByType(coordinates.allDay)\r\n    }\r\n    _getDefaultRatio(coordinates, appointmentCountPerCell) {\r\n        return coordinates.count > this.appointmentCountPerCell ? .65 : 1\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET,\r\n            auto: ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET\r\n        }\r\n    }\r\n    _getMaxHeight() {\r\n        return this.allDayHeight || this.getAppointmentMinSize()\r\n    }\r\n    _needVerticalGroupBounds(allDay) {\r\n        return !allDay\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return false\r\n    }\r\n    getPositionShift(timeShift, isAllDay) {\r\n        if (!isAllDay && this.isAdaptive && 0 === this._getMaxAppointmentCountPerCellByType(isAllDay)) {\r\n            return {\r\n                top: 0,\r\n                left: 0,\r\n                cellPosition: 0\r\n            }\r\n        }\r\n        return super.getPositionShift(timeShift, isAllDay)\r\n    }\r\n}\r\nexport default VerticalRenderingStrategy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}