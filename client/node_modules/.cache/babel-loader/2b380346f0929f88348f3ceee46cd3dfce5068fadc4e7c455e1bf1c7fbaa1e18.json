{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michal Abargel\\\\Desktop\\\\FULLSTACK_PROJECTS\\\\PrivateLessones\\\\PL\\\\client\\\\gui\\\\src\\\\components\\\\AccountManagement\\\\login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { googleLogout, useGoogleLogin } from \"@react-oauth/google\";\nimport { useNavigate } from \"react-router-dom\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [connectedFails, setConnectedFails] = useState(false);\n  const navigate = useNavigate();\n  async function getUserInfo() {\n    const localUser = JSON.parse(localStorage.getItem(\"connected_user\"));\n    if (localUser != null) {\n      // If user connected try to get full info from server\n      //TODO: Add timout\n      try {\n        const response = await fetch(`https://privatelessonsserver.azurewebsites.net/api/users/${localUser.user_id}`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (!response.ok) {\n          setConnectedFails(true);\n        } else {\n          if (response.status === 200) {\n            const user = await response.json();\n            if (user) {\n              //create user with full data in localStoarge\n              localStorage.setItem(\"connected_user\", JSON.stringify(user));\n              setUser(user);\n              //In case of exist user\n              user.user_type === \"\" || user.user_type === null ? navigate(`/choseAccount/${user.user_id}`) : navigate(`/${user.user_type}/${user.user_id}`);\n            }\n          }\n        }\n      } catch (error) {\n        // console.log(\"ERROR\", error);\n      }\n    }\n  }\n  const createSession = async JWT_token => {\n    // google login\n    try {\n      const response = await fetch(`https://privatelessonsserver.azurewebsites.net/api/users/googleLogin/${JWT_token}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        setConnectedFails(true);\n      } else {\n        if (response.status === 200) {\n          const {\n            user\n          } = await response.json();\n          //create user in localStoarge\n          localStorage.setItem(\"connected_user\", JSON.stringify(user));\n          setUser(user);\n          // exist user\n          user.user_type === \"\" || user.user_type === null ? navigate(`/choseAccount/${user.user_id}`) : navigate(`/${user.user_type}/${user.user_id}`);\n        } else if (response.status === 201) {\n          const {\n            user\n          } = await response.json();\n          localStorage.setItem(\"connected_user\", JSON.stringify(user));\n          setUser(user);\n          // new user\n          navigate(`/choseAccount/${user.user_id}`);\n        }\n      }\n    } catch (error) {\n      // console.log(\"ERROR\", error);\n    }\n  };\n  useEffect(() => {\n    getUserInfo();\n  }, []);\n  const login = token => {\n    // request to server - create session and then navigat to details screen\n    createSession(token);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: credentialResponse => {\n          login(credentialResponse.credential);\n        },\n        onError: () => {\n          // console.log(\"Login Failed\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), connectedFails && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"User connection failed, please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"hGzUvA5BkOJEOxtp2dnVe9/ZM+U=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","googleLogout","useGoogleLogin","useNavigate","GoogleLogin","jsxDEV","_jsxDEV","Login","_s","user","setUser","connectedFails","setConnectedFails","navigate","getUserInfo","localUser","JSON","parse","localStorage","getItem","response","fetch","user_id","method","headers","ok","status","json","setItem","stringify","user_type","error","createSession","JWT_token","login","token","children","onSuccess","credentialResponse","credential","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/src/components/AccountManagement/login.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { googleLogout, useGoogleLogin } from \"@react-oauth/google\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { GoogleLogin } from \"@react-oauth/google\";\r\n\r\nexport default function Login() {\r\n  const [user, setUser] = useState(null);\r\n  const [connectedFails, setConnectedFails] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  async function getUserInfo() {\r\n    const localUser = JSON.parse(localStorage.getItem(\"connected_user\"));\r\n    if (localUser != null) {\r\n      // If user connected try to get full info from server\r\n      //TODO: Add timout\r\n      try {\r\n        const response = await fetch(\r\n          `https://privatelessonsserver.azurewebsites.net/api/users/${localUser.user_id}`,\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n        if (!response.ok) {\r\n          setConnectedFails(true);\r\n        } else {\r\n          if (response.status === 200) {\r\n            const user = await response.json();\r\n            if (user) {\r\n              //create user with full data in localStoarge\r\n              localStorage.setItem(\"connected_user\", JSON.stringify(user));\r\n              setUser(user);\r\n              //In case of exist user\r\n              user.user_type === \"\" || user.user_type === null\r\n                ? navigate(`/choseAccount/${user.user_id}`)\r\n                : navigate(`/${user.user_type}/${user.user_id}`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // console.log(\"ERROR\", error);\r\n      }\r\n    }\r\n  }\r\n\r\n  const createSession = async (JWT_token) => {\r\n    // google login\r\n    try {\r\n      const response = await fetch(\r\n        `https://privatelessonsserver.azurewebsites.net/api/users/googleLogin/${JWT_token}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        setConnectedFails(true);\r\n      } else {\r\n        if (response.status === 200) {\r\n          const { user } = await response.json();\r\n          //create user in localStoarge\r\n          localStorage.setItem(\"connected_user\", JSON.stringify(user));\r\n          setUser(user);\r\n          // exist user\r\n          user.user_type === \"\" || user.user_type === null\r\n            ? navigate(`/choseAccount/${user.user_id}`)\r\n            : navigate(`/${user.user_type}/${user.user_id}`);\r\n        } else if (response.status === 201) {\r\n          const { user } = await response.json();\r\n          localStorage.setItem(\"connected_user\", JSON.stringify(user));\r\n          setUser(user);\r\n          // new user\r\n          navigate(`/choseAccount/${user.user_id}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // console.log(\"ERROR\", error);\r\n    }\r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n    getUserInfo();\r\n  }, []);\r\n\r\n  const login = (token) => {\r\n    // request to server - create session and then navigat to details screen\r\n    createSession(token);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <GoogleLogin\r\n          onSuccess={(credentialResponse) => {\r\n            login(credentialResponse.credential);\r\n          }}\r\n          onError={() => {\r\n            // console.log(\"Login Failed\");\r\n          }}\r\n        />\r\n        {connectedFails && <h3>User connection failed, please try again.</h3>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}