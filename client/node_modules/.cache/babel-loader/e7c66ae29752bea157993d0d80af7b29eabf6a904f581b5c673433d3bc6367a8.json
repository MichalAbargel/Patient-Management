{"ast":null,"code":"import{useState,useEffect}from\"react\";import{LineChart}from\"@mui/x-charts/LineChart\";import{jsx as _jsx}from\"react/jsx-runtime\";const BasicLineChart=()=>{const URL=\"http://localhost:3500/api/statistics/activePatients\";const[xVals,setXVals]=useState(null);const[yVals,setYVals]=useState(null);const getLegalDates=datesList=>{const newList=[];datesList.forEach(element=>{const date=new Date(element);const month=String(date.getMonth()+1).padStart(2,\"0\");const day=String(date.getDate()).padStart(2,\"0\");newList.push(\"\".concat(day,\"/\").concat(month));});console.log(newList);return newList;};const getActivePatients=async()=>{try{const response=await fetch(\"\".concat(URL),{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(response.ok){const responseData=await response.json();setXVals(getLegalDates(responseData.dates));setYVals(responseData.activePatientsCount);}}catch(error){console.log(\"Error fetching data\",error);}};useEffect(()=>{getActivePatients();},[]);return/*#__PURE__*/_jsx(\"div\",{children:xVals!=null&&yVals!=null&&/*#__PURE__*/_jsx(LineChart,{xAxis:[{scaleType:\"point\",data:xVals,label:\"Day In Month\"}],series:[{data:yVals,label:\"Active Patients\"}],width:800,height:400})});};export default BasicLineChart;","map":{"version":3,"names":["useState","useEffect","LineChart","jsx","_jsx","BasicLineChart","URL","xVals","setXVals","yVals","setYVals","getLegalDates","datesList","newList","forEach","element","date","Date","month","String","getMonth","padStart","day","getDate","push","concat","console","log","getActivePatients","response","fetch","method","headers","ok","responseData","json","dates","activePatientsCount","error","children","xAxis","scaleType","data","label","series","width","height"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/src/components/statistics/BasicLineChart.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { LineChart } from \"@mui/x-charts/LineChart\";\r\n\r\nconst BasicLineChart = () => {\r\n  const URL = \"http://localhost:3500/api/statistics/activePatients\";\r\n  const [xVals, setXVals] = useState(null);\r\n  const [yVals, setYVals] = useState(null);\r\n\r\n  const getLegalDates = (datesList) => {\r\n    const newList = [];\r\n    datesList.forEach((element) => {\r\n      const date = new Date(element);\r\n      const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n      const day = String(date.getDate()).padStart(2, \"0\");\r\n      newList.push(`${day}/${month}`);\r\n    });\r\n    console.log(newList);\r\n    return newList;\r\n  };\r\n\r\n  const getActivePatients = async () => {\r\n    try {\r\n      const response = await fetch(`${URL}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        setXVals(getLegalDates(responseData.dates));\r\n        setYVals(responseData.activePatientsCount);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error fetching data\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getActivePatients();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {xVals != null && yVals != null && (\r\n        <LineChart\r\n          xAxis={[{ scaleType: \"point\", data: xVals, label: \"Day In Month\" }]}\r\n          series={[\r\n            {\r\n              data: yVals,\r\n              label: \"Active Patients\",\r\n            },\r\n          ]}\r\n          width={800}\r\n          height={400}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default BasicLineChart;\r\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,SAAS,KAAQ,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpD,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,GAAG,CAAG,qDAAqD,CACjE,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACS,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAExC,KAAM,CAAAW,aAAa,CAAIC,SAAS,EAAK,CACnC,KAAM,CAAAC,OAAO,CAAG,EAAE,CAClBD,SAAS,CAACE,OAAO,CAAEC,OAAO,EAAK,CAC7B,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,OAAO,CAAC,CAC9B,KAAM,CAAAG,KAAK,CAAGC,MAAM,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAC1D,KAAM,CAAAC,GAAG,CAAGH,MAAM,CAACH,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CACnDR,OAAO,CAACW,IAAI,IAAAC,MAAA,CAAIH,GAAG,MAAAG,MAAA,CAAIP,KAAK,CAAE,CAAC,CACjC,CAAC,CAAC,CACFQ,OAAO,CAACC,GAAG,CAACd,OAAO,CAAC,CACpB,MAAO,CAAAA,OAAO,CAChB,CAAC,CAED,KAAM,CAAAe,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAL,MAAA,CAAInB,GAAG,EAAI,CACrCyB,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CACF,GAAIH,QAAQ,CAACI,EAAE,CAAE,CACf,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAC1C3B,QAAQ,CAACG,aAAa,CAACuB,YAAY,CAACE,KAAK,CAAC,CAAC,CAC3C1B,QAAQ,CAACwB,YAAY,CAACG,mBAAmB,CAAC,CAC5C,CACF,CAAE,MAAOC,KAAK,CAAE,CACdZ,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEW,KAAK,CAAC,CAC3C,CACF,CAAC,CAEDrC,SAAS,CAAC,IAAM,CACd2B,iBAAiB,CAAC,CAAC,CACrB,CAAC,CAAE,EAAE,CAAC,CACN,mBACExB,IAAA,QAAAmC,QAAA,CACGhC,KAAK,EAAI,IAAI,EAAIE,KAAK,EAAI,IAAI,eAC7BL,IAAA,CAACF,SAAS,EACRsC,KAAK,CAAE,CAAC,CAAEC,SAAS,CAAE,OAAO,CAAEC,IAAI,CAAEnC,KAAK,CAAEoC,KAAK,CAAE,cAAe,CAAC,CAAE,CACpEC,MAAM,CAAE,CACN,CACEF,IAAI,CAAEjC,KAAK,CACXkC,KAAK,CAAE,iBACT,CAAC,CACD,CACFE,KAAK,CAAE,GAAI,CACXC,MAAM,CAAE,GAAI,CACb,CACF,CACE,CAAC,CAEV,CAAC,CACD,cAAe,CAAAzC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}