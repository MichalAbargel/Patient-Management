{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/data_provider/m_appointment_data_provider.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport config from \"../../../../core/config\";\nimport combineRemoteFilter from \"../../../../renovation/ui/scheduler/utils/filtering/remote\";\nimport { AppointmentDataSource } from \"./m_appointment_data_source\";\nimport { AppointmentFilterBaseStrategy, AppointmentFilterVirtualStrategy } from \"./m_appointment_filter\";\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\nexport class AppointmentDataProvider {\n  constructor(options) {\n    this.options = options;\n    this.dataSource = this.options.dataSource;\n    this.dataAccessors = this.options.dataAccessors;\n    this.timeZoneCalculator = this.options.timeZoneCalculator;\n    this.appointmentDataSource = new AppointmentDataSource(this.dataSource);\n    this.initFilterStrategy();\n  }\n  get keyName() {\n    return this.appointmentDataSource.keyName;\n  }\n  get isDataSourceInit() {\n    return !!this.dataSource;\n  }\n  get filterStrategyName() {\n    return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard;\n  }\n  getFilterStrategy() {\n    if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {\n      this.initFilterStrategy();\n    }\n    return this.filterStrategy;\n  }\n  initFilterStrategy() {\n    var filterOptions = {\n      resources: this.options.resources,\n      dataAccessors: this.dataAccessors,\n      startDayHour: this.options.startDayHour,\n      endDayHour: this.options.endDayHour,\n      showAllDayPanel: this.options.showAllDayPanel,\n      timeZoneCalculator: this.options.timeZoneCalculator,\n      loadedResources: this.options.getLoadedResources,\n      supportAllDayRow: this.options.getSupportAllDayRow,\n      viewType: this.options.getViewType,\n      viewDirection: this.options.getViewDirection,\n      dateRange: this.options.getDateRange,\n      groupCount: this.options.getGroupCount,\n      viewDataProvider: this.options.getViewDataProvider,\n      allDayPanelMode: this.options.allDayPanelMode\n    };\n    this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new AppointmentFilterVirtualStrategy(filterOptions) : new AppointmentFilterBaseStrategy(filterOptions);\n  }\n  setDataSource(dataSource) {\n    this.dataSource = dataSource;\n    this.initFilterStrategy();\n    this.appointmentDataSource.setDataSource(this.dataSource);\n  }\n  updateDataAccessors(dataAccessors) {\n    this.dataAccessors = dataAccessors;\n    this.initFilterStrategy();\n  }\n  filter(preparedItems) {\n    return this.getFilterStrategy().filter(preparedItems);\n  }\n  filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\n    if (!this.dataSource || !remoteFiltering) {\n      return;\n    }\n    var dataSourceFilter = this.dataSource.filter();\n    var filter = combineRemoteFilter({\n      dataSourceFilter: dataSourceFilter,\n      dataAccessors: this.dataAccessors,\n      min: min,\n      max: max,\n      dateSerializationFormat: dateSerializationFormat,\n      forceIsoDateParsing: config().forceIsoDateParsing\n    });\n    this.dataSource.filter(filter);\n  }\n  hasAllDayAppointments(filteredItems, preparedItems) {\n    return this.getFilterStrategy().hasAllDayAppointments(filteredItems, preparedItems);\n  }\n  filterLoadedAppointments(filterOption, preparedItems) {\n    return this.getFilterStrategy().filterLoadedAppointments(filterOption, preparedItems);\n  }\n  calculateAppointmentEndDate(isAllDay, startDate) {\n    return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate);\n  }\n  cleanState() {\n    this.appointmentDataSource.cleanState();\n  }\n  getUpdatedAppointment() {\n    return this.appointmentDataSource._updatedAppointment;\n  }\n  getUpdatedAppointmentKeys() {\n    return this.appointmentDataSource._updatedAppointmentKeys;\n  }\n  add(rawAppointment) {\n    return this.appointmentDataSource.add(rawAppointment);\n  }\n  update(target, rawAppointment) {\n    return this.appointmentDataSource.update(target, rawAppointment);\n  }\n  remove(rawAppointment) {\n    return this.appointmentDataSource.remove(rawAppointment);\n  }\n  destroy() {\n    this.appointmentDataSource.destroy();\n  }\n}","map":{"version":3,"names":["config","combineRemoteFilter","AppointmentDataSource","AppointmentFilterBaseStrategy","AppointmentFilterVirtualStrategy","FilterStrategies","virtual","standard","AppointmentDataProvider","constructor","options","dataSource","dataAccessors","timeZoneCalculator","appointmentDataSource","initFilterStrategy","keyName","isDataSourceInit","filterStrategyName","getIsVirtualScrolling","getFilterStrategy","filterStrategy","strategyName","filterOptions","resources","startDayHour","endDayHour","showAllDayPanel","loadedResources","getLoadedResources","supportAllDayRow","getSupportAllDayRow","viewType","getViewType","viewDirection","getViewDirection","dateRange","getDateRange","groupCount","getGroupCount","viewDataProvider","getViewDataProvider","allDayPanelMode","setDataSource","updateDataAccessors","filter","preparedItems","filterByDate","min","max","remoteFiltering","dateSerializationFormat","dataSourceFilter","forceIsoDateParsing","hasAllDayAppointments","filteredItems","filterLoadedAppointments","filterOption","calculateAppointmentEndDate","isAllDay","startDate","cleanState","getUpdatedAppointment","_updatedAppointment","getUpdatedAppointmentKeys","_updatedAppointmentKeys","add","rawAppointment","update","target","remove","destroy"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/node_modules/devextreme/esm/__internal/scheduler/appointments/data_provider/m_appointment_data_provider.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/data_provider/m_appointment_data_provider.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport config from \"../../../../core/config\";\r\nimport combineRemoteFilter from \"../../../../renovation/ui/scheduler/utils/filtering/remote\";\r\nimport {\r\n    AppointmentDataSource\r\n} from \"./m_appointment_data_source\";\r\nimport {\r\n    AppointmentFilterBaseStrategy,\r\n    AppointmentFilterVirtualStrategy\r\n} from \"./m_appointment_filter\";\r\nvar FilterStrategies = {\r\n    virtual: \"virtual\",\r\n    standard: \"standard\"\r\n};\r\nexport class AppointmentDataProvider {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.dataSource = this.options.dataSource;\r\n        this.dataAccessors = this.options.dataAccessors;\r\n        this.timeZoneCalculator = this.options.timeZoneCalculator;\r\n        this.appointmentDataSource = new AppointmentDataSource(this.dataSource);\r\n        this.initFilterStrategy()\r\n    }\r\n    get keyName() {\r\n        return this.appointmentDataSource.keyName\r\n    }\r\n    get isDataSourceInit() {\r\n        return !!this.dataSource\r\n    }\r\n    get filterStrategyName() {\r\n        return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard\r\n    }\r\n    getFilterStrategy() {\r\n        if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {\r\n            this.initFilterStrategy()\r\n        }\r\n        return this.filterStrategy\r\n    }\r\n    initFilterStrategy() {\r\n        var filterOptions = {\r\n            resources: this.options.resources,\r\n            dataAccessors: this.dataAccessors,\r\n            startDayHour: this.options.startDayHour,\r\n            endDayHour: this.options.endDayHour,\r\n            showAllDayPanel: this.options.showAllDayPanel,\r\n            timeZoneCalculator: this.options.timeZoneCalculator,\r\n            loadedResources: this.options.getLoadedResources,\r\n            supportAllDayRow: this.options.getSupportAllDayRow,\r\n            viewType: this.options.getViewType,\r\n            viewDirection: this.options.getViewDirection,\r\n            dateRange: this.options.getDateRange,\r\n            groupCount: this.options.getGroupCount,\r\n            viewDataProvider: this.options.getViewDataProvider,\r\n            allDayPanelMode: this.options.allDayPanelMode\r\n        };\r\n        this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new AppointmentFilterVirtualStrategy(filterOptions) : new AppointmentFilterBaseStrategy(filterOptions)\r\n    }\r\n    setDataSource(dataSource) {\r\n        this.dataSource = dataSource;\r\n        this.initFilterStrategy();\r\n        this.appointmentDataSource.setDataSource(this.dataSource)\r\n    }\r\n    updateDataAccessors(dataAccessors) {\r\n        this.dataAccessors = dataAccessors;\r\n        this.initFilterStrategy()\r\n    }\r\n    filter(preparedItems) {\r\n        return this.getFilterStrategy().filter(preparedItems)\r\n    }\r\n    filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\r\n        if (!this.dataSource || !remoteFiltering) {\r\n            return\r\n        }\r\n        var dataSourceFilter = this.dataSource.filter();\r\n        var filter = combineRemoteFilter({\r\n            dataSourceFilter: dataSourceFilter,\r\n            dataAccessors: this.dataAccessors,\r\n            min: min,\r\n            max: max,\r\n            dateSerializationFormat: dateSerializationFormat,\r\n            forceIsoDateParsing: config().forceIsoDateParsing\r\n        });\r\n        this.dataSource.filter(filter)\r\n    }\r\n    hasAllDayAppointments(filteredItems, preparedItems) {\r\n        return this.getFilterStrategy().hasAllDayAppointments(filteredItems, preparedItems)\r\n    }\r\n    filterLoadedAppointments(filterOption, preparedItems) {\r\n        return this.getFilterStrategy().filterLoadedAppointments(filterOption, preparedItems)\r\n    }\r\n    calculateAppointmentEndDate(isAllDay, startDate) {\r\n        return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate)\r\n    }\r\n    cleanState() {\r\n        this.appointmentDataSource.cleanState()\r\n    }\r\n    getUpdatedAppointment() {\r\n        return this.appointmentDataSource._updatedAppointment\r\n    }\r\n    getUpdatedAppointmentKeys() {\r\n        return this.appointmentDataSource._updatedAppointmentKeys\r\n    }\r\n    add(rawAppointment) {\r\n        return this.appointmentDataSource.add(rawAppointment)\r\n    }\r\n    update(target, rawAppointment) {\r\n        return this.appointmentDataSource.update(target, rawAppointment)\r\n    }\r\n    remove(rawAppointment) {\r\n        return this.appointmentDataSource.remove(rawAppointment)\r\n    }\r\n    destroy() {\r\n        this.appointmentDataSource.destroy()\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}