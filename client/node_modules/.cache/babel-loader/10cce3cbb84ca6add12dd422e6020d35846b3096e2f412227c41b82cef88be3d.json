{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/time_panel_data_generator.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"allDay\", \"startDate\", \"endDate\", \"groups\", \"groupIndex\", \"isFirstGroupCell\", \"isLastGroupCell\", \"index\"];\nimport { getIsGroupedAllDayPanel, getKeyByGroup } from \"../../../../renovation/ui/scheduler/workspaces/utils\";\nimport { getDisplayedRowCount } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getTimePanelCellText } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/week\";\nexport class TimePanelDataGenerator {\n  constructor(viewDataGenerator) {\n    this._viewDataGenerator = viewDataGenerator;\n  }\n  getCompleteTimePanelMap(options, completeViewDataMap) {\n    var {\n      startViewDate: startViewDate,\n      cellDuration: cellDuration,\n      startDayHour: startDayHour,\n      isVerticalGrouping: isVerticalGrouping,\n      intervalCount: intervalCount,\n      currentDate: currentDate,\n      viewType: viewType,\n      hoursInterval: hoursInterval,\n      endDayHour: endDayHour\n    } = options;\n    var rowCountInGroup = this._viewDataGenerator.getRowCount({\n      intervalCount: intervalCount,\n      currentDate: currentDate,\n      viewType: viewType,\n      hoursInterval: hoursInterval,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour\n    });\n    var cellCountInGroupRow = this._viewDataGenerator.getCellCount({\n      intervalCount: intervalCount,\n      currentDate: currentDate,\n      viewType: viewType,\n      hoursInterval: hoursInterval,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour\n    });\n    var allDayRowsCount = 0;\n    return completeViewDataMap.map((row, index) => {\n      var _row$ = row[0],\n        {\n          allDay: allDay,\n          startDate: startDate,\n          groups: groups,\n          groupIndex: groupIndex,\n          isFirstGroupCell: isFirstGroupCell,\n          isLastGroupCell: isLastGroupCell,\n          index: cellIndex\n        } = _row$,\n        restCellProps = _objectWithoutPropertiesLoose(_row$, _excluded);\n      if (allDay) {\n        allDayRowsCount += 1;\n      }\n      var timeIndex = (index - allDayRowsCount) % rowCountInGroup;\n      return _extends({}, restCellProps, {\n        startDate: startDate,\n        allDay: allDay,\n        text: getTimePanelCellText(timeIndex, startDate, startViewDate, cellDuration, startDayHour),\n        groups: isVerticalGrouping ? groups : void 0,\n        groupIndex: isVerticalGrouping ? groupIndex : void 0,\n        isFirstGroupCell: isVerticalGrouping && isFirstGroupCell,\n        isLastGroupCell: isVerticalGrouping && isLastGroupCell,\n        index: Math.floor(cellIndex / cellCountInGroupRow)\n      });\n    });\n  }\n  generateTimePanelData(completeTimePanelMap, options) {\n    var {\n      startRowIndex: startRowIndex,\n      rowCount: rowCount,\n      topVirtualRowHeight: topVirtualRowHeight,\n      bottomVirtualRowHeight: bottomVirtualRowHeight,\n      isGroupedAllDayPanel: isGroupedAllDayPanel,\n      isVerticalGrouping: isVerticalGrouping,\n      isAllDayPanelVisible: isAllDayPanelVisible\n    } = options;\n    var indexDifference = isVerticalGrouping || !isAllDayPanelVisible ? 0 : 1;\n    var correctedStartRowIndex = startRowIndex + indexDifference;\n    var displayedRowCount = getDisplayedRowCount(rowCount, completeTimePanelMap);\n    var timePanelMap = completeTimePanelMap.slice(correctedStartRowIndex, correctedStartRowIndex + displayedRowCount);\n    var timePanelData = {\n      topVirtualRowHeight: topVirtualRowHeight,\n      bottomVirtualRowHeight: bottomVirtualRowHeight,\n      isGroupedAllDayPanel: isGroupedAllDayPanel\n    };\n    var {\n      previousGroupedData: groupedData\n    } = this._generateTimePanelDataFromMap(timePanelMap, isVerticalGrouping);\n    timePanelData.groupedData = groupedData;\n    return timePanelData;\n  }\n  _generateTimePanelDataFromMap(timePanelMap, isVerticalGrouping) {\n    return timePanelMap.reduce((_ref, cellData) => {\n      var {\n        previousGroupIndex: previousGroupIndex,\n        previousGroupedData: previousGroupedData\n      } = _ref;\n      var currentGroupIndex = cellData.groupIndex;\n      if (currentGroupIndex !== previousGroupIndex) {\n        previousGroupedData.push({\n          dateTable: [],\n          isGroupedAllDayPanel: getIsGroupedAllDayPanel(!!cellData.allDay, isVerticalGrouping),\n          groupIndex: currentGroupIndex,\n          key: getKeyByGroup(currentGroupIndex, isVerticalGrouping)\n        });\n      }\n      if (cellData.allDay) {\n        previousGroupedData[previousGroupedData.length - 1].allDayPanel = cellData;\n      } else {\n        previousGroupedData[previousGroupedData.length - 1].dateTable.push(cellData);\n      }\n      return {\n        previousGroupIndex: currentGroupIndex,\n        previousGroupedData: previousGroupedData\n      };\n    }, {\n      previousGroupIndex: -1,\n      previousGroupedData: []\n    });\n  }\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","getIsGroupedAllDayPanel","getKeyByGroup","getDisplayedRowCount","getTimePanelCellText","TimePanelDataGenerator","constructor","viewDataGenerator","_viewDataGenerator","getCompleteTimePanelMap","options","completeViewDataMap","startViewDate","cellDuration","startDayHour","isVerticalGrouping","intervalCount","currentDate","viewType","hoursInterval","endDayHour","rowCountInGroup","getRowCount","cellCountInGroupRow","getCellCount","allDayRowsCount","map","row","index","_row$","allDay","startDate","groups","groupIndex","isFirstGroupCell","isLastGroupCell","cellIndex","restCellProps","timeIndex","text","Math","floor","generateTimePanelData","completeTimePanelMap","startRowIndex","rowCount","topVirtualRowHeight","bottomVirtualRowHeight","isGroupedAllDayPanel","isAllDayPanelVisible","indexDifference","correctedStartRowIndex","displayedRowCount","timePanelMap","slice","timePanelData","previousGroupedData","groupedData","_generateTimePanelDataFromMap","reduce","_ref","cellData","previousGroupIndex","currentGroupIndex","push","dateTable","key","length","allDayPanel"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/node_modules/devextreme/esm/ui/scheduler/workspaces/view_model/time_panel_data_generator.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/time_panel_data_generator.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nvar _excluded = [\"allDay\", \"startDate\", \"endDate\", \"groups\", \"groupIndex\", \"isFirstGroupCell\", \"isLastGroupCell\", \"index\"];\r\nimport {\r\n    getIsGroupedAllDayPanel,\r\n    getKeyByGroup\r\n} from \"../../../../renovation/ui/scheduler/workspaces/utils\";\r\nimport {\r\n    getDisplayedRowCount\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    getTimePanelCellText\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/week\";\r\nexport class TimePanelDataGenerator {\r\n    constructor(viewDataGenerator) {\r\n        this._viewDataGenerator = viewDataGenerator\r\n    }\r\n    getCompleteTimePanelMap(options, completeViewDataMap) {\r\n        var {\r\n            startViewDate: startViewDate,\r\n            cellDuration: cellDuration,\r\n            startDayHour: startDayHour,\r\n            isVerticalGrouping: isVerticalGrouping,\r\n            intervalCount: intervalCount,\r\n            currentDate: currentDate,\r\n            viewType: viewType,\r\n            hoursInterval: hoursInterval,\r\n            endDayHour: endDayHour\r\n        } = options;\r\n        var rowCountInGroup = this._viewDataGenerator.getRowCount({\r\n            intervalCount: intervalCount,\r\n            currentDate: currentDate,\r\n            viewType: viewType,\r\n            hoursInterval: hoursInterval,\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour\r\n        });\r\n        var cellCountInGroupRow = this._viewDataGenerator.getCellCount({\r\n            intervalCount: intervalCount,\r\n            currentDate: currentDate,\r\n            viewType: viewType,\r\n            hoursInterval: hoursInterval,\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour\r\n        });\r\n        var allDayRowsCount = 0;\r\n        return completeViewDataMap.map((row, index) => {\r\n            var _row$ = row[0],\r\n                {\r\n                    allDay: allDay,\r\n                    startDate: startDate,\r\n                    groups: groups,\r\n                    groupIndex: groupIndex,\r\n                    isFirstGroupCell: isFirstGroupCell,\r\n                    isLastGroupCell: isLastGroupCell,\r\n                    index: cellIndex\r\n                } = _row$,\r\n                restCellProps = _objectWithoutPropertiesLoose(_row$, _excluded);\r\n            if (allDay) {\r\n                allDayRowsCount += 1\r\n            }\r\n            var timeIndex = (index - allDayRowsCount) % rowCountInGroup;\r\n            return _extends({}, restCellProps, {\r\n                startDate: startDate,\r\n                allDay: allDay,\r\n                text: getTimePanelCellText(timeIndex, startDate, startViewDate, cellDuration, startDayHour),\r\n                groups: isVerticalGrouping ? groups : void 0,\r\n                groupIndex: isVerticalGrouping ? groupIndex : void 0,\r\n                isFirstGroupCell: isVerticalGrouping && isFirstGroupCell,\r\n                isLastGroupCell: isVerticalGrouping && isLastGroupCell,\r\n                index: Math.floor(cellIndex / cellCountInGroupRow)\r\n            })\r\n        })\r\n    }\r\n    generateTimePanelData(completeTimePanelMap, options) {\r\n        var {\r\n            startRowIndex: startRowIndex,\r\n            rowCount: rowCount,\r\n            topVirtualRowHeight: topVirtualRowHeight,\r\n            bottomVirtualRowHeight: bottomVirtualRowHeight,\r\n            isGroupedAllDayPanel: isGroupedAllDayPanel,\r\n            isVerticalGrouping: isVerticalGrouping,\r\n            isAllDayPanelVisible: isAllDayPanelVisible\r\n        } = options;\r\n        var indexDifference = isVerticalGrouping || !isAllDayPanelVisible ? 0 : 1;\r\n        var correctedStartRowIndex = startRowIndex + indexDifference;\r\n        var displayedRowCount = getDisplayedRowCount(rowCount, completeTimePanelMap);\r\n        var timePanelMap = completeTimePanelMap.slice(correctedStartRowIndex, correctedStartRowIndex + displayedRowCount);\r\n        var timePanelData = {\r\n            topVirtualRowHeight: topVirtualRowHeight,\r\n            bottomVirtualRowHeight: bottomVirtualRowHeight,\r\n            isGroupedAllDayPanel: isGroupedAllDayPanel\r\n        };\r\n        var {\r\n            previousGroupedData: groupedData\r\n        } = this._generateTimePanelDataFromMap(timePanelMap, isVerticalGrouping);\r\n        timePanelData.groupedData = groupedData;\r\n        return timePanelData\r\n    }\r\n    _generateTimePanelDataFromMap(timePanelMap, isVerticalGrouping) {\r\n        return timePanelMap.reduce((_ref, cellData) => {\r\n            var {\r\n                previousGroupIndex: previousGroupIndex,\r\n                previousGroupedData: previousGroupedData\r\n            } = _ref;\r\n            var currentGroupIndex = cellData.groupIndex;\r\n            if (currentGroupIndex !== previousGroupIndex) {\r\n                previousGroupedData.push({\r\n                    dateTable: [],\r\n                    isGroupedAllDayPanel: getIsGroupedAllDayPanel(!!cellData.allDay, isVerticalGrouping),\r\n                    groupIndex: currentGroupIndex,\r\n                    key: getKeyByGroup(currentGroupIndex, isVerticalGrouping)\r\n                })\r\n            }\r\n            if (cellData.allDay) {\r\n                previousGroupedData[previousGroupedData.length - 1].allDayPanel = cellData\r\n            } else {\r\n                previousGroupedData[previousGroupedData.length - 1].dateTable.push(cellData)\r\n            }\r\n            return {\r\n                previousGroupIndex: currentGroupIndex,\r\n                previousGroupedData: previousGroupedData\r\n            }\r\n        }, {\r\n            previousGroupIndex: -1,\r\n            previousGroupedData: []\r\n        })\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}