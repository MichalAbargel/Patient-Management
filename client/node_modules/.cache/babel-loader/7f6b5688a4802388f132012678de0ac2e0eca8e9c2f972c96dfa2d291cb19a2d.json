{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setOuterHeight, setHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport { noop } from \"../../../core/utils/common\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getPublicElement } from \"../../../core/element\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport WorkSpace from \"./ui.scheduler.work_space\";\nimport { extend } from \"../../../core/utils/extend\";\nimport dateLocalization from \"../../../localization/date\";\nimport tableCreatorModule from \"../table_creator\";\nimport { TIME_PANEL_CLASS, DATE_TABLE_CLASS, DATE_TABLE_ROW_CLASS, GROUP_ROW_CLASS, GROUP_HEADER_CONTENT_CLASS } from \"../classes\";\nimport { createReducedResourcesTree, getDataAccessors, getPathToLeaf } from \"../../../__internal/scheduler/resources/m_utils\";\nimport { calculateStartViewDate } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/agenda\";\nimport { formatWeekday, getVerticalGroupCountClass } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { VIEWS } from \"../constants\";\nimport dateUtils from \"../../../core/utils/date\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\nvar INNER_CELL_MARGIN = 5;\nvar OUTER_CELL_MARGIN = 20;\nclass SchedulerAgenda extends WorkSpace {\n  get type() {\n    return VIEWS.AGENDA;\n  }\n  get renderingStrategy() {\n    return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance();\n  }\n  get appointmentDataProvider() {\n    return this.option(\"getAppointmentDataProvider\")();\n  }\n  getStartViewDate() {\n    return this._startViewDate;\n  }\n  _init() {\n    super._init();\n    this._activeStateUnit = void 0;\n  }\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      agendaDuration: 7,\n      rowHeight: 60,\n      noDataText: \"\"\n    });\n  }\n  _optionChanged(args) {\n    var name = args.name;\n    var value = args.value;\n    switch (name) {\n      case \"agendaDuration\":\n        break;\n      case \"noDataText\":\n      case \"rowHeight\":\n        this._recalculateAgenda(this._rows);\n        break;\n      case \"groups\":\n        if (!value || !value.length) {\n          if (this._$groupTable) {\n            this._$groupTable.remove();\n            this._$groupTable = null;\n            this._detachGroupCountClass();\n          }\n        } else if (!this._$groupTable) {\n          this._initGroupTable();\n          this._dateTableScrollable.$content().prepend(this._$groupTable);\n        }\n        super._optionChanged(args);\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _renderFocusState() {\n    return noop();\n  }\n  _renderFocusTarget() {\n    return noop();\n  }\n  _cleanFocusState() {\n    return noop();\n  }\n  supportAllDayRow() {\n    return false;\n  }\n  _isVerticalGroupedWorkSpace() {\n    return false;\n  }\n  _getElementClass() {\n    return AGENDA_CLASS;\n  }\n  _calculateStartViewDate() {\n    return calculateStartViewDate(this.option(\"currentDate\"), this.option(\"startDayHour\"));\n  }\n  _getRowCount() {\n    return this.option(\"agendaDuration\");\n  }\n  _getCellCount() {\n    return 1;\n  }\n  _getTimePanelRowCount() {\n    return this.option(\"agendaDuration\");\n  }\n  _renderAllDayPanel() {\n    return noop();\n  }\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n  _initWorkSpaceUnits() {\n    this._initGroupTable();\n    this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\n    this._$dateTable = $(\"<table>\").addClass(DATE_TABLE_CLASS);\n    this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\n    this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\n  }\n  _initGroupTable() {\n    var groups = this.option(\"groups\");\n    if (groups && groups.length) {\n      this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS);\n    }\n  }\n  _renderView() {\n    this._startViewDate = this._calculateStartViewDate();\n    this._rows = [];\n    this._initPositionHelper();\n  }\n  _recalculateAgenda(rows) {\n    var cellTemplates = [];\n    this._cleanView();\n    if (this._rowsIsEmpty(rows)) {\n      this._renderNoData();\n      return;\n    }\n    this._rows = rows;\n    if (this._$groupTable) {\n      cellTemplates = this._renderGroupHeader();\n      this._setGroupHeaderCellsHeight();\n    }\n    this._renderTimePanel();\n    this._renderDateTable();\n    this.invoke(\"onAgendaReady\", rows);\n    this._applyCellTemplates(cellTemplates);\n    this._dateTableScrollable.update();\n  }\n  _renderNoData() {\n    this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\n    this._dateTableScrollable.$content().append(this._$noDataContainer);\n  }\n  _setTableSizes() {\n    return noop();\n  }\n  _toggleHorizontalScrollClass() {\n    return noop();\n  }\n  _createCrossScrollingConfig() {\n    return noop();\n  }\n  _setGroupHeaderCellsHeight() {\n    var $cells = this._getGroupHeaderCells().filter(function (_, element) {\n      return !element.getAttribute(\"rowSpan\");\n    });\n    var rows = this._removeEmptyRows(this._rows);\n    if (!rows.length) {\n      return;\n    }\n    for (var i = 0; i < $cells.length; i++) {\n      var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\n      setOuterHeight($cellContent, this._getGroupRowHeight(rows[i]));\n    }\n  }\n  _rowsIsEmpty(rows) {\n    var result = true;\n    for (var i = 0; i < rows.length; i++) {\n      var groupRow = rows[i];\n      for (var j = 0; j < groupRow.length; j++) {\n        if (groupRow[j]) {\n          result = false;\n          break;\n        }\n      }\n    }\n    return result;\n  }\n  _attachGroupCountClass() {\n    var className = getVerticalGroupCountClass(this.option(\"groups\"));\n    this.$element().addClass(className);\n  }\n  _removeEmptyRows(rows) {\n    var result = [];\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].length && !(data = rows[i], !data.some(function (value) {\n        return value > 0;\n      }))) {\n        result.push(rows[i]);\n      }\n    }\n    var data;\n    return result;\n  }\n  _getGroupHeaderContainer() {\n    return this._$groupTable;\n  }\n  _makeGroupRows() {\n    var tree = createReducedResourcesTree(this.option(\"loadedResources\"), (field, action) => getDataAccessors(this.option(\"getResourceDataAccessors\")(), field, action), this.option(\"getFilteredItems\")());\n    var cellTemplate = this.option(\"resourceCellTemplate\");\n    var getGroupHeaderContentClass = GROUP_HEADER_CONTENT_CLASS;\n    var cellTemplates = [];\n    var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\n      cellTag: \"th\",\n      groupTableClass: GROUP_TABLE_CLASS,\n      groupRowClass: GROUP_ROW_CLASS,\n      groupCellClass: this._getGroupHeaderClass(),\n      groupCellCustomContent(cell, cellTextElement, index, data) {\n        var container = domAdapter.createElement(\"div\");\n        container.className = getGroupHeaderContentClass;\n        if (cellTemplate && cellTemplate.render) {\n          cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\n            model: {\n              data: data.data,\n              id: data.value,\n              color: data.color,\n              text: cellTextElement.textContent\n            },\n            container: getPublicElement($(container)),\n            index: index\n          }));\n        } else {\n          var contentWrapper = domAdapter.createElement(\"div\");\n          contentWrapper.appendChild(cellTextElement);\n          container.appendChild(contentWrapper);\n        }\n        cell.appendChild(container);\n      },\n      cellTemplate: cellTemplate\n    });\n    return {\n      elements: $(table).find(\".\".concat(GROUP_ROW_CLASS)),\n      cellTemplates: cellTemplates\n    };\n  }\n  _cleanView() {\n    this._$dateTable.empty();\n    this._$timePanel.empty();\n    if (this._$groupTable) {\n      this._$groupTable.empty();\n    }\n    if (this._$noDataContainer) {\n      this._$noDataContainer.empty();\n      this._$noDataContainer.remove();\n      delete this._$noDataContainer;\n    }\n  }\n  _createWorkSpaceElements() {\n    this._createWorkSpaceStaticElements();\n  }\n  _createWorkSpaceStaticElements() {\n    this._$dateTableContainer.append(this._$dateTable);\n    this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n    if (this._$groupTable) {\n      this._$dateTableScrollableContent.prepend(this._$groupTable);\n    }\n    this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\n    this.$element().append(this._dateTableScrollable.$element());\n  }\n  _renderDateTable() {\n    this._renderTableBody({\n      container: getPublicElement(this._$dateTable),\n      rowClass: DATE_TABLE_ROW_CLASS,\n      cellClass: this._getDateTableCellClass()\n    });\n  }\n  _attachTablesEvents() {\n    return noop();\n  }\n  _attachEvents() {\n    return noop();\n  }\n  _cleanCellDataCache() {\n    return noop();\n  }\n  isIndicationAvailable() {\n    return false;\n  }\n  _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\n    var groupsOpt = this.option(\"groups\");\n    var groups = {};\n    var isGroupedView = !!groupsOpt.length;\n    var path = isGroupedView && getPathToLeaf(rowIndex, groupsOpt) || [];\n    path.forEach(function (resourceValue, resourceIndex) {\n      var resourceName = groupsOpt[resourceIndex].name;\n      groups[resourceName] = resourceValue;\n    });\n    var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\n    return {\n      model: {\n        text: text,\n        date: date,\n        groups: groups,\n        groupIndex: groupIndex\n      },\n      container: getPublicElement($cell),\n      index: rowIndex\n    };\n  }\n  _renderTableBody(options) {\n    var cellTemplates = [];\n    var cellTemplateOpt = options.cellTemplate;\n    this._$rows = [];\n    var i;\n    var fillTableBody = function (rowIndex, rowSize) {\n      if (rowSize) {\n        var date;\n        var cellDateNumber;\n        var cellDayName;\n        var $row = $(\"<tr>\");\n        var $td = $(\"<td>\");\n        setHeight($td, this._getRowHeight(rowSize));\n        if (options.getStartDate) {\n          date = options.getStartDate && options.getStartDate(rowIndex);\n          cellDateNumber = dateLocalization.format(date, \"d\");\n          cellDayName = dateLocalization.format(date, formatWeekday);\n        }\n        if (cellTemplateOpt && cellTemplateOpt.render) {\n          var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\n          cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions));\n        } else if (cellDateNumber && cellDayName) {\n          $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName);\n        }\n        if (options.rowClass) {\n          $row.addClass(options.rowClass);\n        }\n        if (options.cellClass) {\n          $td.addClass(options.cellClass);\n        }\n        $row.append($td);\n        this._$rows.push($row);\n      }\n    }.bind(this);\n    for (i = 0; i < this._rows.length; i++) {\n      each(this._rows[i], fillTableBody);\n      this._setLastRowClass();\n    }\n    $(options.container).append($(\"<tbody>\").append(this._$rows));\n    this._applyCellTemplates(cellTemplates);\n  }\n  _setLastRowClass() {\n    if (this._rows.length > 1 && this._$rows.length) {\n      var $lastRow = this._$rows[this._$rows.length - 1];\n      $lastRow.addClass(LAST_ROW_CLASS);\n    }\n  }\n  _renderTimePanel() {\n    this._renderTableBody({\n      container: getPublicElement(this._$timePanel),\n      rowCount: this._getTimePanelRowCount(),\n      cellCount: 1,\n      rowClass: TIME_PANEL_ROW_CLASS,\n      cellClass: TIME_PANEL_CELL_CLASS,\n      cellTemplate: this.option(\"dateCellTemplate\"),\n      getStartDate: this._getTimePanelStartDate.bind(this)\n    });\n  }\n  _getTimePanelStartDate(rowIndex) {\n    var current = new Date(this.option(\"currentDate\"));\n    var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\n    return cellDate;\n  }\n  _getRowHeight(rowSize) {\n    var baseHeight = this.option(\"rowHeight\");\n    var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\n    return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0;\n  }\n  _getGroupRowHeight(groupRows) {\n    if (!groupRows) {\n      return;\n    }\n    var result = 0;\n    for (var i = 0; i < groupRows.length; i++) {\n      result += this._getRowHeight(groupRows[i]);\n    }\n    return result;\n  }\n  _calculateRows(appointments) {\n    return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"));\n  }\n  onDataSourceChanged(appointments) {\n    super.onDataSourceChanged();\n    this._renderView();\n    var rows = this._calculateRows(appointments);\n    this._recalculateAgenda(rows);\n  }\n  getAgendaVerticalStepHeight() {\n    return this.option(\"rowHeight\");\n  }\n  getEndViewDate() {\n    var currentDate = new Date(this.option(\"currentDate\"));\n    var agendaDuration = this.option(\"agendaDuration\");\n    currentDate.setHours(this.option(\"endDayHour\"));\n    var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\n    return new Date(result);\n  }\n  getEndViewDateByEndDayHour() {\n    return this.getEndViewDate();\n  }\n  getCellDataByCoordinates() {\n    return {\n      startDate: null,\n      endDate: null\n    };\n  }\n  updateScrollPosition(date) {\n    var newDate = this.timeZoneCalculator.createDate(date, {\n      path: \"toGrid\"\n    });\n    var bounds = this.getVisibleBounds();\n    var startDateHour = newDate.getHours();\n    var startDateMinutes = newDate.getMinutes();\n    if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\n      this.scrollToTime(startDateHour, startDateMinutes, newDate);\n    }\n  }\n  needUpdateScrollPosition(hours, minutes, bounds) {\n    var isUpdateNeeded = false;\n    if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\n      isUpdateNeeded = true;\n    }\n    if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\n      isUpdateNeeded = true;\n    }\n    if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\n      isUpdateNeeded = true;\n    }\n    return isUpdateNeeded;\n  }\n  renovatedRenderSupported() {\n    return false;\n  }\n  _setSelectedCellsByCellData() {}\n  _getIntervalDuration() {\n    return dateUtils.dateToMilliseconds(\"day\") * this.option(\"intervalCount\");\n  }\n  getDOMElementsMetaData() {\n    return {\n      dateTableCellsMeta: [[{}]],\n      allDayPanelCellsMeta: [{}]\n    };\n  }\n}\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\nexport default SchedulerAgenda;","map":{"version":3,"names":["setOuterHeight","setHeight","$","domAdapter","noop","each","getPublicElement","registerComponent","WorkSpace","extend","dateLocalization","tableCreatorModule","TIME_PANEL_CLASS","DATE_TABLE_CLASS","DATE_TABLE_ROW_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CONTENT_CLASS","createReducedResourcesTree","getDataAccessors","getPathToLeaf","calculateStartViewDate","formatWeekday","getVerticalGroupCountClass","VIEWS","dateUtils","tableCreator","AGENDA_CLASS","AGENDA_DATE_CLASS","GROUP_TABLE_CLASS","TIME_PANEL_ROW_CLASS","TIME_PANEL_CELL_CLASS","NODATA_CONTAINER_CLASS","LAST_ROW_CLASS","INNER_CELL_MARGIN","OUTER_CELL_MARGIN","SchedulerAgenda","type","AGENDA","renderingStrategy","invoke","getRenderingStrategyInstance","appointmentDataProvider","option","getStartViewDate","_startViewDate","_init","_activeStateUnit","_getDefaultOptions","agendaDuration","rowHeight","noDataText","_optionChanged","args","name","value","_recalculateAgenda","_rows","length","_$groupTable","remove","_detachGroupCountClass","_initGroupTable","_dateTableScrollable","$content","prepend","_renderFocusState","_renderFocusTarget","_cleanFocusState","supportAllDayRow","_isVerticalGroupedWorkSpace","_getElementClass","_calculateStartViewDate","_getRowCount","_getCellCount","_getTimePanelRowCount","_renderAllDayPanel","_toggleAllDayVisibility","_initWorkSpaceUnits","_$timePanel","addClass","_$dateTable","_$dateTableScrollableContent","_$dateTableContainer","groups","_renderView","_initPositionHelper","rows","cellTemplates","_cleanView","_rowsIsEmpty","_renderNoData","_renderGroupHeader","_setGroupHeaderCellsHeight","_renderTimePanel","_renderDateTable","_applyCellTemplates","update","_$noDataContainer","html","append","_setTableSizes","_toggleHorizontalScrollClass","_createCrossScrollingConfig","$cells","_getGroupHeaderCells","filter","_","element","getAttribute","_removeEmptyRows","i","$cellContent","eq","find","_getGroupRowHeight","result","groupRow","j","_attachGroupCountClass","className","$element","data","some","push","_getGroupHeaderContainer","_makeGroupRows","tree","field","action","cellTemplate","getGroupHeaderContentClass","table","makeGroupedTableFromJSON","VERTICAL","cellTag","groupTableClass","groupRowClass","groupCellClass","_getGroupHeaderClass","groupCellCustomContent","cell","cellTextElement","index","container","createElement","render","bind","model","id","color","text","textContent","contentWrapper","appendChild","elements","concat","empty","_createWorkSpaceElements","_createWorkSpaceStaticElements","_renderTableBody","rowClass","cellClass","_getDateTableCellClass","_attachTablesEvents","_attachEvents","_cleanCellDataCache","isIndicationAvailable","_prepareCellTemplateOptions","date","rowIndex","$cell","groupsOpt","isGroupedView","path","forEach","resourceValue","resourceIndex","resourceName","groupIndex","_getGroupIndexByResourceId","options","cellTemplateOpt","_$rows","fillTableBody","rowSize","cellDateNumber","cellDayName","$row","$td","_getRowHeight","getStartDate","format","templateOptions","_setLastRowClass","$lastRow","rowCount","cellCount","_getTimePanelStartDate","current","Date","cellDate","setDate","getDate","baseHeight","innerOffset","groupRows","_calculateRows","appointments","calculateRows","onDataSourceChanged","getAgendaVerticalStepHeight","getEndViewDate","currentDate","setHours","getEndViewDateByEndDayHour","getCellDataByCoordinates","startDate","endDate","updateScrollPosition","newDate","timeZoneCalculator","createDate","bounds","getVisibleBounds","startDateHour","getHours","startDateMinutes","getMinutes","needUpdateScrollPosition","scrollToTime","hours","minutes","isUpdateNeeded","top","bottom","renovatedRenderSupported","_setSelectedCellsByCellData","_getIntervalDuration","dateToMilliseconds","getDOMElementsMetaData","dateTableCellsMeta","allDayPanelCellsMeta"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.agenda.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setOuterHeight,\r\n    setHeight\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport WorkSpace from \"./ui.scheduler.work_space\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nimport {\r\n    TIME_PANEL_CLASS,\r\n    DATE_TABLE_CLASS,\r\n    DATE_TABLE_ROW_CLASS,\r\n    GROUP_ROW_CLASS,\r\n    GROUP_HEADER_CONTENT_CLASS\r\n} from \"../classes\";\r\nimport {\r\n    createReducedResourcesTree,\r\n    getDataAccessors,\r\n    getPathToLeaf\r\n} from \"../../../__internal/scheduler/resources/m_utils\";\r\nimport {\r\n    calculateStartViewDate\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/agenda\";\r\nimport {\r\n    formatWeekday,\r\n    getVerticalGroupCountClass\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    VIEWS\r\n} from \"../constants\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\r\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\r\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\r\nvar INNER_CELL_MARGIN = 5;\r\nvar OUTER_CELL_MARGIN = 20;\r\nclass SchedulerAgenda extends WorkSpace {\r\n    get type() {\r\n        return VIEWS.AGENDA\r\n    }\r\n    get renderingStrategy() {\r\n        return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance()\r\n    }\r\n    get appointmentDataProvider() {\r\n        return this.option(\"getAppointmentDataProvider\")()\r\n    }\r\n    getStartViewDate() {\r\n        return this._startViewDate\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._activeStateUnit = void 0\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            agendaDuration: 7,\r\n            rowHeight: 60,\r\n            noDataText: \"\"\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        var value = args.value;\r\n        switch (name) {\r\n            case \"agendaDuration\":\r\n                break;\r\n            case \"noDataText\":\r\n            case \"rowHeight\":\r\n                this._recalculateAgenda(this._rows);\r\n                break;\r\n            case \"groups\":\r\n                if (!value || !value.length) {\r\n                    if (this._$groupTable) {\r\n                        this._$groupTable.remove();\r\n                        this._$groupTable = null;\r\n                        this._detachGroupCountClass()\r\n                    }\r\n                } else if (!this._$groupTable) {\r\n                    this._initGroupTable();\r\n                    this._dateTableScrollable.$content().prepend(this._$groupTable)\r\n                }\r\n                super._optionChanged(args);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _renderFocusState() {\r\n        return noop()\r\n    }\r\n    _renderFocusTarget() {\r\n        return noop()\r\n    }\r\n    _cleanFocusState() {\r\n        return noop()\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return false\r\n    }\r\n    _getElementClass() {\r\n        return AGENDA_CLASS\r\n    }\r\n    _calculateStartViewDate() {\r\n        return calculateStartViewDate(this.option(\"currentDate\"), this.option(\"startDayHour\"))\r\n    }\r\n    _getRowCount() {\r\n        return this.option(\"agendaDuration\")\r\n    }\r\n    _getCellCount() {\r\n        return 1\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this.option(\"agendaDuration\")\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._initGroupTable();\r\n        this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\r\n        this._$dateTable = $(\"<table>\").addClass(DATE_TABLE_CLASS);\r\n        this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\r\n        this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\")\r\n    }\r\n    _initGroupTable() {\r\n        var groups = this.option(\"groups\");\r\n        if (groups && groups.length) {\r\n            this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS)\r\n        }\r\n    }\r\n    _renderView() {\r\n        this._startViewDate = this._calculateStartViewDate();\r\n        this._rows = [];\r\n        this._initPositionHelper()\r\n    }\r\n    _recalculateAgenda(rows) {\r\n        var cellTemplates = [];\r\n        this._cleanView();\r\n        if (this._rowsIsEmpty(rows)) {\r\n            this._renderNoData();\r\n            return\r\n        }\r\n        this._rows = rows;\r\n        if (this._$groupTable) {\r\n            cellTemplates = this._renderGroupHeader();\r\n            this._setGroupHeaderCellsHeight()\r\n        }\r\n        this._renderTimePanel();\r\n        this._renderDateTable();\r\n        this.invoke(\"onAgendaReady\", rows);\r\n        this._applyCellTemplates(cellTemplates);\r\n        this._dateTableScrollable.update()\r\n    }\r\n    _renderNoData() {\r\n        this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\r\n        this._dateTableScrollable.$content().append(this._$noDataContainer)\r\n    }\r\n    _setTableSizes() {\r\n        return noop()\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        return noop()\r\n    }\r\n    _createCrossScrollingConfig() {\r\n        return noop()\r\n    }\r\n    _setGroupHeaderCellsHeight() {\r\n        var $cells = this._getGroupHeaderCells().filter((function(_, element) {\r\n            return !element.getAttribute(\"rowSpan\")\r\n        }));\r\n        var rows = this._removeEmptyRows(this._rows);\r\n        if (!rows.length) {\r\n            return\r\n        }\r\n        for (var i = 0; i < $cells.length; i++) {\r\n            var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\r\n            setOuterHeight($cellContent, this._getGroupRowHeight(rows[i]))\r\n        }\r\n    }\r\n    _rowsIsEmpty(rows) {\r\n        var result = true;\r\n        for (var i = 0; i < rows.length; i++) {\r\n            var groupRow = rows[i];\r\n            for (var j = 0; j < groupRow.length; j++) {\r\n                if (groupRow[j]) {\r\n                    result = false;\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _attachGroupCountClass() {\r\n        var className = getVerticalGroupCountClass(this.option(\"groups\"));\r\n        this.$element().addClass(className)\r\n    }\r\n    _removeEmptyRows(rows) {\r\n        var result = [];\r\n        for (var i = 0; i < rows.length; i++) {\r\n            if (rows[i].length && !(data = rows[i], !data.some((function(value) {\r\n                    return value > 0\r\n                })))) {\r\n                result.push(rows[i])\r\n            }\r\n        }\r\n        var data;\r\n        return result\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        return this._$groupTable\r\n    }\r\n    _makeGroupRows() {\r\n        var tree = createReducedResourcesTree(this.option(\"loadedResources\"), (field, action) => getDataAccessors(this.option(\"getResourceDataAccessors\")(), field, action), this.option(\"getFilteredItems\")());\r\n        var cellTemplate = this.option(\"resourceCellTemplate\");\r\n        var getGroupHeaderContentClass = GROUP_HEADER_CONTENT_CLASS;\r\n        var cellTemplates = [];\r\n        var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\r\n            cellTag: \"th\",\r\n            groupTableClass: GROUP_TABLE_CLASS,\r\n            groupRowClass: GROUP_ROW_CLASS,\r\n            groupCellClass: this._getGroupHeaderClass(),\r\n            groupCellCustomContent(cell, cellTextElement, index, data) {\r\n                var container = domAdapter.createElement(\"div\");\r\n                container.className = getGroupHeaderContentClass;\r\n                if (cellTemplate && cellTemplate.render) {\r\n                    cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\r\n                        model: {\r\n                            data: data.data,\r\n                            id: data.value,\r\n                            color: data.color,\r\n                            text: cellTextElement.textContent\r\n                        },\r\n                        container: getPublicElement($(container)),\r\n                        index: index\r\n                    }))\r\n                } else {\r\n                    var contentWrapper = domAdapter.createElement(\"div\");\r\n                    contentWrapper.appendChild(cellTextElement);\r\n                    container.appendChild(contentWrapper)\r\n                }\r\n                cell.appendChild(container)\r\n            },\r\n            cellTemplate: cellTemplate\r\n        });\r\n        return {\r\n            elements: $(table).find(\".\".concat(GROUP_ROW_CLASS)),\r\n            cellTemplates: cellTemplates\r\n        }\r\n    }\r\n    _cleanView() {\r\n        this._$dateTable.empty();\r\n        this._$timePanel.empty();\r\n        if (this._$groupTable) {\r\n            this._$groupTable.empty()\r\n        }\r\n        if (this._$noDataContainer) {\r\n            this._$noDataContainer.empty();\r\n            this._$noDataContainer.remove();\r\n            delete this._$noDataContainer\r\n        }\r\n    }\r\n    _createWorkSpaceElements() {\r\n        this._createWorkSpaceStaticElements()\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        this._$dateTableContainer.append(this._$dateTable);\r\n        this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n        if (this._$groupTable) {\r\n            this._$dateTableScrollableContent.prepend(this._$groupTable)\r\n        }\r\n        this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\r\n        this.$element().append(this._dateTableScrollable.$element())\r\n    }\r\n    _renderDateTable() {\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowClass: DATE_TABLE_ROW_CLASS,\r\n            cellClass: this._getDateTableCellClass()\r\n        })\r\n    }\r\n    _attachTablesEvents() {\r\n        return noop()\r\n    }\r\n    _attachEvents() {\r\n        return noop()\r\n    }\r\n    _cleanCellDataCache() {\r\n        return noop()\r\n    }\r\n    isIndicationAvailable() {\r\n        return false\r\n    }\r\n    _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\r\n        var groupsOpt = this.option(\"groups\");\r\n        var groups = {};\r\n        var isGroupedView = !!groupsOpt.length;\r\n        var path = isGroupedView && getPathToLeaf(rowIndex, groupsOpt) || [];\r\n        path.forEach((function(resourceValue, resourceIndex) {\r\n            var resourceName = groupsOpt[resourceIndex].name;\r\n            groups[resourceName] = resourceValue\r\n        }));\r\n        var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\r\n        return {\r\n            model: {\r\n                text: text,\r\n                date: date,\r\n                groups: groups,\r\n                groupIndex: groupIndex\r\n            },\r\n            container: getPublicElement($cell),\r\n            index: rowIndex\r\n        }\r\n    }\r\n    _renderTableBody(options) {\r\n        var cellTemplates = [];\r\n        var cellTemplateOpt = options.cellTemplate;\r\n        this._$rows = [];\r\n        var i;\r\n        var fillTableBody = function(rowIndex, rowSize) {\r\n            if (rowSize) {\r\n                var date;\r\n                var cellDateNumber;\r\n                var cellDayName;\r\n                var $row = $(\"<tr>\");\r\n                var $td = $(\"<td>\");\r\n                setHeight($td, this._getRowHeight(rowSize));\r\n                if (options.getStartDate) {\r\n                    date = options.getStartDate && options.getStartDate(rowIndex);\r\n                    cellDateNumber = dateLocalization.format(date, \"d\");\r\n                    cellDayName = dateLocalization.format(date, formatWeekday)\r\n                }\r\n                if (cellTemplateOpt && cellTemplateOpt.render) {\r\n                    var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\r\n                    cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions))\r\n                } else if (cellDateNumber && cellDayName) {\r\n                    $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName)\r\n                }\r\n                if (options.rowClass) {\r\n                    $row.addClass(options.rowClass)\r\n                }\r\n                if (options.cellClass) {\r\n                    $td.addClass(options.cellClass)\r\n                }\r\n                $row.append($td);\r\n                this._$rows.push($row)\r\n            }\r\n        }.bind(this);\r\n        for (i = 0; i < this._rows.length; i++) {\r\n            each(this._rows[i], fillTableBody);\r\n            this._setLastRowClass()\r\n        }\r\n        $(options.container).append($(\"<tbody>\").append(this._$rows));\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _setLastRowClass() {\r\n        if (this._rows.length > 1 && this._$rows.length) {\r\n            var $lastRow = this._$rows[this._$rows.length - 1];\r\n            $lastRow.addClass(LAST_ROW_CLASS)\r\n        }\r\n    }\r\n    _renderTimePanel() {\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount(),\r\n            cellCount: 1,\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellClass: TIME_PANEL_CELL_CLASS,\r\n            cellTemplate: this.option(\"dateCellTemplate\"),\r\n            getStartDate: this._getTimePanelStartDate.bind(this)\r\n        })\r\n    }\r\n    _getTimePanelStartDate(rowIndex) {\r\n        var current = new Date(this.option(\"currentDate\"));\r\n        var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\r\n        return cellDate\r\n    }\r\n    _getRowHeight(rowSize) {\r\n        var baseHeight = this.option(\"rowHeight\");\r\n        var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\r\n        return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0\r\n    }\r\n    _getGroupRowHeight(groupRows) {\r\n        if (!groupRows) {\r\n            return\r\n        }\r\n        var result = 0;\r\n        for (var i = 0; i < groupRows.length; i++) {\r\n            result += this._getRowHeight(groupRows[i])\r\n        }\r\n        return result\r\n    }\r\n    _calculateRows(appointments) {\r\n        return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"))\r\n    }\r\n    onDataSourceChanged(appointments) {\r\n        super.onDataSourceChanged();\r\n        this._renderView();\r\n        var rows = this._calculateRows(appointments);\r\n        this._recalculateAgenda(rows)\r\n    }\r\n    getAgendaVerticalStepHeight() {\r\n        return this.option(\"rowHeight\")\r\n    }\r\n    getEndViewDate() {\r\n        var currentDate = new Date(this.option(\"currentDate\"));\r\n        var agendaDuration = this.option(\"agendaDuration\");\r\n        currentDate.setHours(this.option(\"endDayHour\"));\r\n        var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\r\n        return new Date(result)\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        return this.getEndViewDate()\r\n    }\r\n    getCellDataByCoordinates() {\r\n        return {\r\n            startDate: null,\r\n            endDate: null\r\n        }\r\n    }\r\n    updateScrollPosition(date) {\r\n        var newDate = this.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var bounds = this.getVisibleBounds();\r\n        var startDateHour = newDate.getHours();\r\n        var startDateMinutes = newDate.getMinutes();\r\n        if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\r\n            this.scrollToTime(startDateHour, startDateMinutes, newDate)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(hours, minutes, bounds) {\r\n        var isUpdateNeeded = false;\r\n        if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        return isUpdateNeeded\r\n    }\r\n    renovatedRenderSupported() {\r\n        return false\r\n    }\r\n    _setSelectedCellsByCellData() {}\r\n    _getIntervalDuration() {\r\n        return dateUtils.dateToMilliseconds(\"day\") * this.option(\"intervalCount\")\r\n    }\r\n    getDOMElementsMetaData() {\r\n        return {\r\n            dateTableCellsMeta: [\r\n                [{}]\r\n            ],\r\n            allDayPanelCellsMeta: [{}]\r\n        }\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\r\nexport default SchedulerAgenda;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}