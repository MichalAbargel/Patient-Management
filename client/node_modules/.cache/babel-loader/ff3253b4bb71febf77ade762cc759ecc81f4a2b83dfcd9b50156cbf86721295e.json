{"ast":null,"code":"import * as React from 'react';\nimport { SvgContext } from '../context/DrawingProvider';\nexport function generateVirtualElement(mousePosition) {\n  if (mousePosition === null) {\n    return {\n      getBoundingClientRect: () => ({\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        toJSON: () => ''\n      })\n    };\n  }\n  const {\n    x,\n    y\n  } = mousePosition;\n  return {\n    getBoundingClientRect: () => ({\n      width: 0,\n      height: 0,\n      x,\n      y,\n      top: y,\n      right: x,\n      bottom: y,\n      left: x,\n      toJSON: () => JSON.stringify({\n        width: 0,\n        height: 0,\n        x,\n        y,\n        top: y,\n        right: x,\n        bottom: y,\n        left: x\n      })\n    })\n  };\n}\nexport function useMouseTracker() {\n  const svgRef = React.useContext(SvgContext);\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const [mousePosition, setMousePosition] = React.useState(null);\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null) {\n      return () => {};\n    }\n    const handleMouseOut = () => {\n      setMousePosition(null);\n    };\n    const handleMouseMove = event => {\n      setMousePosition({\n        x: event.clientX,\n        y: event.clientY\n      });\n    };\n    element.addEventListener('mouseout', handleMouseOut);\n    element.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      element.removeEventListener('mouseout', handleMouseOut);\n      element.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [svgRef]);\n  return mousePosition;\n}\nexport function getTooltipHasData(trigger, displayedData) {\n  if (trigger === 'item') {\n    return displayedData !== null;\n  }\n  const hasAxisXData = displayedData.x !== null;\n  const hasAxisYData = displayedData.y !== null;\n  return hasAxisXData || hasAxisYData;\n}\nexport function isCartesianSeriesType(seriesType) {\n  return ['bar', 'line', 'scatter'].includes(seriesType);\n}\nexport function isCartesianSeries(series) {\n  return isCartesianSeriesType(series.type);\n}\nexport function utcFormatter(v) {\n  if (v instanceof Date) {\n    return v.toUTCString();\n  }\n  return v.toLocaleString();\n}","map":{"version":3,"names":["React","SvgContext","generateVirtualElement","mousePosition","getBoundingClientRect","width","height","x","y","top","right","bottom","left","toJSON","JSON","stringify","useMouseTracker","svgRef","useContext","setMousePosition","useState","useEffect","element","current","handleMouseOut","handleMouseMove","event","clientX","clientY","addEventListener","removeEventListener","getTooltipHasData","trigger","displayedData","hasAxisXData","hasAxisYData","isCartesianSeriesType","seriesType","includes","isCartesianSeries","series","type","utcFormatter","v","Date","toUTCString","toLocaleString"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/Patient-Management/client/node_modules/@mui/x-charts/esm/ChartsTooltip/utils.js"],"sourcesContent":["import * as React from 'react';\r\nimport { SvgContext } from '../context/DrawingProvider';\r\nexport function generateVirtualElement(mousePosition) {\r\n  if (mousePosition === null) {\r\n    return {\r\n      getBoundingClientRect: () => ({\r\n        width: 0,\r\n        height: 0,\r\n        x: 0,\r\n        y: 0,\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        toJSON: () => ''\r\n      })\r\n    };\r\n  }\r\n  const {\r\n    x,\r\n    y\r\n  } = mousePosition;\r\n  return {\r\n    getBoundingClientRect: () => ({\r\n      width: 0,\r\n      height: 0,\r\n      x,\r\n      y,\r\n      top: y,\r\n      right: x,\r\n      bottom: y,\r\n      left: x,\r\n      toJSON: () => JSON.stringify({\r\n        width: 0,\r\n        height: 0,\r\n        x,\r\n        y,\r\n        top: y,\r\n        right: x,\r\n        bottom: y,\r\n        left: x\r\n      })\r\n    })\r\n  };\r\n}\r\nexport function useMouseTracker() {\r\n  const svgRef = React.useContext(SvgContext);\r\n\r\n  // Use a ref to avoid rerendering on every mousemove event.\r\n  const [mousePosition, setMousePosition] = React.useState(null);\r\n  React.useEffect(() => {\r\n    const element = svgRef.current;\r\n    if (element === null) {\r\n      return () => {};\r\n    }\r\n    const handleMouseOut = () => {\r\n      setMousePosition(null);\r\n    };\r\n    const handleMouseMove = event => {\r\n      setMousePosition({\r\n        x: event.clientX,\r\n        y: event.clientY\r\n      });\r\n    };\r\n    element.addEventListener('mouseout', handleMouseOut);\r\n    element.addEventListener('mousemove', handleMouseMove);\r\n    return () => {\r\n      element.removeEventListener('mouseout', handleMouseOut);\r\n      element.removeEventListener('mousemove', handleMouseMove);\r\n    };\r\n  }, [svgRef]);\r\n  return mousePosition;\r\n}\r\nexport function getTooltipHasData(trigger, displayedData) {\r\n  if (trigger === 'item') {\r\n    return displayedData !== null;\r\n  }\r\n  const hasAxisXData = displayedData.x !== null;\r\n  const hasAxisYData = displayedData.y !== null;\r\n  return hasAxisXData || hasAxisYData;\r\n}\r\nexport function isCartesianSeriesType(seriesType) {\r\n  return ['bar', 'line', 'scatter'].includes(seriesType);\r\n}\r\nexport function isCartesianSeries(series) {\r\n  return isCartesianSeriesType(series.type);\r\n}\r\nexport function utcFormatter(v) {\r\n  if (v instanceof Date) {\r\n    return v.toUTCString();\r\n  }\r\n  return v.toLocaleString();\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}