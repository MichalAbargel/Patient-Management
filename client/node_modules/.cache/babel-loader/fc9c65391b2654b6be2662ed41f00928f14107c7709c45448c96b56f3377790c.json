{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/m_cell_position_calculator.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { isDefined } from \"../../../core/utils/type\";\nclass BaseStrategy {\n  constructor(options) {\n    this.isVirtualScrolling = false;\n    this.options = options;\n  }\n  get DOMMetaData() {\n    return this.options.DOMMetaData;\n  }\n  get appointments() {\n    return this.options.dateSettings;\n  }\n  get viewDataProvider() {\n    return this.options.viewDataProvider;\n  }\n  get positionHelper() {\n    return this.options.positionHelper;\n  }\n  get startViewDate() {\n    return this.options.startViewDate;\n  }\n  get viewStartDayHour() {\n    return this.options.viewStartDayHour;\n  }\n  get viewEndDayHour() {\n    return this.options.viewEndDayHour;\n  }\n  get cellDuration() {\n    return this.options.cellDuration;\n  }\n  get getPositionShift() {\n    return this.options.getPositionShiftCallback;\n  }\n  get groupCount() {\n    return this.options.groupCount;\n  }\n  get rtlEnabled() {\n    return this.options.rtlEnabled;\n  }\n  get isVerticalGrouping() {\n    return this.options.isVerticalGroupOrientation;\n  }\n  get showAllDayPanel() {\n    return this.options.showAllDayPanel;\n  }\n  get supportAllDayRow() {\n    return this.options.supportAllDayRow;\n  }\n  get isGroupedAllDayPanel() {\n    return this.options.isGroupedAllDayPanel;\n  }\n  calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n    var result = [];\n    this.appointments.forEach((dateSetting, index) => {\n      var coordinates = this.getCoordinateInfos({\n        appointment: dateSetting,\n        groupIndices: groupIndices,\n        isAllDayRowAppointment: isAllDayRowAppointment,\n        isRecurrentAppointment: isRecurrentAppointment\n      });\n      coordinates.forEach(item => {\n        !!item && result.push(this._prepareObject(item, index));\n      });\n    });\n    return result;\n  }\n  getCoordinateInfos(options) {\n    var {\n      appointment: appointment,\n      isAllDayRowAppointment: isAllDayRowAppointment,\n      groupIndices: groupIndices,\n      recurrent: recurrent\n    } = options;\n    var {\n      startDate: startDate\n    } = appointment;\n    var groupIndex = !recurrent ? appointment.source.groupIndex : void 0;\n    return this.getCoordinatesByDateInGroup(startDate, groupIndices, isAllDayRowAppointment, groupIndex);\n  }\n  _prepareObject(position, dateSettingIndex) {\n    position.dateSettingIndex = dateSettingIndex;\n    return {\n      coordinates: position,\n      dateSettingIndex: dateSettingIndex\n    };\n  }\n  getCoordinatesByDate(date, groupIndex, inAllDayRow) {\n    var validGroupIndex = groupIndex || 0;\n    var cellInfo = {\n      groupIndex: validGroupIndex,\n      startDate: date,\n      isAllDay: inAllDayRow\n    };\n    var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\n    if (!positionByMap) {\n      return;\n    }\n    var position = this.getCellPosition(positionByMap, inAllDayRow && !this.isVerticalGrouping);\n    var timeShift = inAllDayRow ? 0 : this.getTimeShift(date);\n    var shift = this.getPositionShift(timeShift, inAllDayRow);\n    var horizontalHMax = this.positionHelper.getHorizontalMax(validGroupIndex, date);\n    var verticalMax = this.positionHelper.getVerticalMax({\n      groupIndex: validGroupIndex,\n      isVirtualScrolling: this.isVirtualScrolling,\n      showAllDayPanel: this.showAllDayPanel,\n      supportAllDayRow: this.supportAllDayRow,\n      isGroupedAllDayPanel: this.isGroupedAllDayPanel,\n      isVerticalGrouping: this.isVerticalGrouping\n    });\n    return {\n      positionByMap: positionByMap,\n      cellPosition: position.left + shift.cellPosition,\n      top: position.top + shift.top,\n      left: position.left + shift.left,\n      rowIndex: position.rowIndex,\n      columnIndex: position.columnIndex,\n      hMax: horizontalHMax,\n      vMax: verticalMax,\n      groupIndex: validGroupIndex\n    };\n  }\n  getCoordinatesByDateInGroup(startDate, groupIndices, inAllDayRow, groupIndex) {\n    var result = [];\n    if (this.viewDataProvider.isSkippedDate(startDate)) {\n      return result;\n    }\n    var validGroupIndices = [groupIndex];\n    if (!isDefined(groupIndex)) {\n      validGroupIndices = this.groupCount ? groupIndices : [0];\n    }\n    validGroupIndices.forEach(groupIndex => {\n      var coordinates = this.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\n      if (coordinates) {\n        result.push(coordinates);\n      }\n    });\n    return result;\n  }\n  getCellPosition(cellCoordinates, isAllDayPanel) {\n    var {\n      dateTableCellsMeta: dateTableCellsMeta,\n      allDayPanelCellsMeta: allDayPanelCellsMeta\n    } = this.DOMMetaData;\n    var {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    } = cellCoordinates;\n    var position = isAllDayPanel ? allDayPanelCellsMeta[columnIndex] : dateTableCellsMeta[rowIndex][columnIndex];\n    var validPosition = _extends({}, position);\n    if (this.rtlEnabled) {\n      validPosition.left += position.width;\n    }\n    if (validPosition) {\n      validPosition.rowIndex = cellCoordinates.rowIndex;\n      validPosition.columnIndex = cellCoordinates.columnIndex;\n    }\n    return validPosition;\n  }\n  getTimeShift(date) {\n    var currentDayStart = new Date(date);\n    var currentDayEndHour = new Date(new Date(date).setHours(this.viewEndDayHour, 0, 0));\n    if (date.getTime() <= currentDayEndHour.getTime()) {\n      currentDayStart.setHours(this.viewStartDayHour, 0, 0, 0);\n    }\n    var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\n    var currentDateTime = date.getTime();\n    var currentDayStartTime = currentDayStart.getTime();\n    var minTime = this.startViewDate.getTime();\n    return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % this.cellDuration / this.cellDuration : 0;\n  }\n}\nclass VirtualStrategy extends BaseStrategy {\n  constructor() {\n    super(...arguments);\n    this.isVirtualScrolling = true;\n  }\n  calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n    var appointments = isAllDayRowAppointment ? this.appointments : this.appointments.filter(_ref => {\n      var {\n        source: source,\n        startDate: startDate,\n        endDate: endDate\n      } = _ref;\n      return this.viewDataProvider.isGroupIntersectDateInterval(source.groupIndex, startDate, endDate);\n    });\n    if (isRecurrentAppointment) {\n      return this.createRecurrentAppointmentInfos(appointments, isAllDayRowAppointment);\n    }\n    return super.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment);\n  }\n  createRecurrentAppointmentInfos(dateSettings, isAllDayRowAppointment) {\n    var result = [];\n    dateSettings.forEach((_ref2, index) => {\n      var {\n        source: source,\n        startDate: startDate\n      } = _ref2;\n      var coordinate = this.getCoordinatesByDate(startDate, source.groupIndex, isAllDayRowAppointment);\n      if (coordinate) {\n        result.push(this._prepareObject(coordinate, index));\n      }\n    });\n    return result;\n  }\n}\nexport class CellPositionCalculator {\n  constructor(options) {\n    this.options = options;\n  }\n  calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n    var strategy = this.options.isVirtualScrolling ? new VirtualStrategy(this.options) : new BaseStrategy(this.options);\n    return strategy.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment);\n  }\n}","map":{"version":3,"names":["_extends","dateUtils","isDefined","BaseStrategy","constructor","options","isVirtualScrolling","DOMMetaData","appointments","dateSettings","viewDataProvider","positionHelper","startViewDate","viewStartDayHour","viewEndDayHour","cellDuration","getPositionShift","getPositionShiftCallback","groupCount","rtlEnabled","isVerticalGrouping","isVerticalGroupOrientation","showAllDayPanel","supportAllDayRow","isGroupedAllDayPanel","calculateCellPositions","groupIndices","isAllDayRowAppointment","isRecurrentAppointment","result","forEach","dateSetting","index","coordinates","getCoordinateInfos","appointment","item","push","_prepareObject","recurrent","startDate","groupIndex","source","getCoordinatesByDateInGroup","position","dateSettingIndex","getCoordinatesByDate","date","inAllDayRow","validGroupIndex","cellInfo","isAllDay","positionByMap","findCellPositionInMap","getCellPosition","timeShift","getTimeShift","shift","horizontalHMax","getHorizontalMax","verticalMax","getVerticalMax","cellPosition","left","top","rowIndex","columnIndex","hMax","vMax","isSkippedDate","validGroupIndices","cellCoordinates","isAllDayPanel","dateTableCellsMeta","allDayPanelCellsMeta","validPosition","width","currentDayStart","Date","currentDayEndHour","setHours","getTime","timeZoneDifference","getTimezonesDifference","currentDateTime","currentDayStartTime","minTime","VirtualStrategy","arguments","filter","_ref","endDate","isGroupIntersectDateInterval","createRecurrentAppointmentInfos","_ref2","coordinate","CellPositionCalculator","strategy"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/PL/client/gui/node_modules/devextreme/esm/__internal/scheduler/appointments/m_cell_position_calculator.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/m_cell_position_calculator.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nclass BaseStrategy {\r\n    constructor(options) {\r\n        this.isVirtualScrolling = false;\r\n        this.options = options\r\n    }\r\n    get DOMMetaData() {\r\n        return this.options.DOMMetaData\r\n    }\r\n    get appointments() {\r\n        return this.options.dateSettings\r\n    }\r\n    get viewDataProvider() {\r\n        return this.options.viewDataProvider\r\n    }\r\n    get positionHelper() {\r\n        return this.options.positionHelper\r\n    }\r\n    get startViewDate() {\r\n        return this.options.startViewDate\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.options.viewStartDayHour\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.options.viewEndDayHour\r\n    }\r\n    get cellDuration() {\r\n        return this.options.cellDuration\r\n    }\r\n    get getPositionShift() {\r\n        return this.options.getPositionShiftCallback\r\n    }\r\n    get groupCount() {\r\n        return this.options.groupCount\r\n    }\r\n    get rtlEnabled() {\r\n        return this.options.rtlEnabled\r\n    }\r\n    get isVerticalGrouping() {\r\n        return this.options.isVerticalGroupOrientation\r\n    }\r\n    get showAllDayPanel() {\r\n        return this.options.showAllDayPanel\r\n    }\r\n    get supportAllDayRow() {\r\n        return this.options.supportAllDayRow\r\n    }\r\n    get isGroupedAllDayPanel() {\r\n        return this.options.isGroupedAllDayPanel\r\n    }\r\n    calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\r\n        var result = [];\r\n        this.appointments.forEach((dateSetting, index) => {\r\n            var coordinates = this.getCoordinateInfos({\r\n                appointment: dateSetting,\r\n                groupIndices: groupIndices,\r\n                isAllDayRowAppointment: isAllDayRowAppointment,\r\n                isRecurrentAppointment: isRecurrentAppointment\r\n            });\r\n            coordinates.forEach(item => {\r\n                !!item && result.push(this._prepareObject(item, index))\r\n            })\r\n        });\r\n        return result\r\n    }\r\n    getCoordinateInfos(options) {\r\n        var {\r\n            appointment: appointment,\r\n            isAllDayRowAppointment: isAllDayRowAppointment,\r\n            groupIndices: groupIndices,\r\n            recurrent: recurrent\r\n        } = options;\r\n        var {\r\n            startDate: startDate\r\n        } = appointment;\r\n        var groupIndex = !recurrent ? appointment.source.groupIndex : void 0;\r\n        return this.getCoordinatesByDateInGroup(startDate, groupIndices, isAllDayRowAppointment, groupIndex)\r\n    }\r\n    _prepareObject(position, dateSettingIndex) {\r\n        position.dateSettingIndex = dateSettingIndex;\r\n        return {\r\n            coordinates: position,\r\n            dateSettingIndex: dateSettingIndex\r\n        }\r\n    }\r\n    getCoordinatesByDate(date, groupIndex, inAllDayRow) {\r\n        var validGroupIndex = groupIndex || 0;\r\n        var cellInfo = {\r\n            groupIndex: validGroupIndex,\r\n            startDate: date,\r\n            isAllDay: inAllDayRow\r\n        };\r\n        var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\r\n        if (!positionByMap) {\r\n            return\r\n        }\r\n        var position = this.getCellPosition(positionByMap, inAllDayRow && !this.isVerticalGrouping);\r\n        var timeShift = inAllDayRow ? 0 : this.getTimeShift(date);\r\n        var shift = this.getPositionShift(timeShift, inAllDayRow);\r\n        var horizontalHMax = this.positionHelper.getHorizontalMax(validGroupIndex, date);\r\n        var verticalMax = this.positionHelper.getVerticalMax({\r\n            groupIndex: validGroupIndex,\r\n            isVirtualScrolling: this.isVirtualScrolling,\r\n            showAllDayPanel: this.showAllDayPanel,\r\n            supportAllDayRow: this.supportAllDayRow,\r\n            isGroupedAllDayPanel: this.isGroupedAllDayPanel,\r\n            isVerticalGrouping: this.isVerticalGrouping\r\n        });\r\n        return {\r\n            positionByMap: positionByMap,\r\n            cellPosition: position.left + shift.cellPosition,\r\n            top: position.top + shift.top,\r\n            left: position.left + shift.left,\r\n            rowIndex: position.rowIndex,\r\n            columnIndex: position.columnIndex,\r\n            hMax: horizontalHMax,\r\n            vMax: verticalMax,\r\n            groupIndex: validGroupIndex\r\n        }\r\n    }\r\n    getCoordinatesByDateInGroup(startDate, groupIndices, inAllDayRow, groupIndex) {\r\n        var result = [];\r\n        if (this.viewDataProvider.isSkippedDate(startDate)) {\r\n            return result\r\n        }\r\n        var validGroupIndices = [groupIndex];\r\n        if (!isDefined(groupIndex)) {\r\n            validGroupIndices = this.groupCount ? groupIndices : [0]\r\n        }\r\n        validGroupIndices.forEach(groupIndex => {\r\n            var coordinates = this.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\r\n            if (coordinates) {\r\n                result.push(coordinates)\r\n            }\r\n        });\r\n        return result\r\n    }\r\n    getCellPosition(cellCoordinates, isAllDayPanel) {\r\n        var {\r\n            dateTableCellsMeta: dateTableCellsMeta,\r\n            allDayPanelCellsMeta: allDayPanelCellsMeta\r\n        } = this.DOMMetaData;\r\n        var {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        } = cellCoordinates;\r\n        var position = isAllDayPanel ? allDayPanelCellsMeta[columnIndex] : dateTableCellsMeta[rowIndex][columnIndex];\r\n        var validPosition = _extends({}, position);\r\n        if (this.rtlEnabled) {\r\n            validPosition.left += position.width\r\n        }\r\n        if (validPosition) {\r\n            validPosition.rowIndex = cellCoordinates.rowIndex;\r\n            validPosition.columnIndex = cellCoordinates.columnIndex\r\n        }\r\n        return validPosition\r\n    }\r\n    getTimeShift(date) {\r\n        var currentDayStart = new Date(date);\r\n        var currentDayEndHour = new Date(new Date(date).setHours(this.viewEndDayHour, 0, 0));\r\n        if (date.getTime() <= currentDayEndHour.getTime()) {\r\n            currentDayStart.setHours(this.viewStartDayHour, 0, 0, 0)\r\n        }\r\n        var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\r\n        var currentDateTime = date.getTime();\r\n        var currentDayStartTime = currentDayStart.getTime();\r\n        var minTime = this.startViewDate.getTime();\r\n        return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % this.cellDuration / this.cellDuration : 0\r\n    }\r\n}\r\nclass VirtualStrategy extends BaseStrategy {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isVirtualScrolling = true\r\n    }\r\n    calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\r\n        var appointments = isAllDayRowAppointment ? this.appointments : this.appointments.filter(_ref => {\r\n            var {\r\n                source: source,\r\n                startDate: startDate,\r\n                endDate: endDate\r\n            } = _ref;\r\n            return this.viewDataProvider.isGroupIntersectDateInterval(source.groupIndex, startDate, endDate)\r\n        });\r\n        if (isRecurrentAppointment) {\r\n            return this.createRecurrentAppointmentInfos(appointments, isAllDayRowAppointment)\r\n        }\r\n        return super.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment)\r\n    }\r\n    createRecurrentAppointmentInfos(dateSettings, isAllDayRowAppointment) {\r\n        var result = [];\r\n        dateSettings.forEach((_ref2, index) => {\r\n            var {\r\n                source: source,\r\n                startDate: startDate\r\n            } = _ref2;\r\n            var coordinate = this.getCoordinatesByDate(startDate, source.groupIndex, isAllDayRowAppointment);\r\n            if (coordinate) {\r\n                result.push(this._prepareObject(coordinate, index))\r\n            }\r\n        });\r\n        return result\r\n    }\r\n}\r\nexport class CellPositionCalculator {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\r\n        var strategy = this.options.isVirtualScrolling ? new VirtualStrategy(this.options) : new BaseStrategy(this.options);\r\n        return strategy.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment)\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}