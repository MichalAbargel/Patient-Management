{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { getWindow } from \"../../../core/utils/window\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport { isDefined } from \"../../../core/utils/type\";\nvar DEFAULT_CELL_HEIGHT = 50;\nvar MIN_CELL_WIDTH = 1;\nvar MIN_SCROLL_OFFSET = 10;\nvar VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 15;\nvar DOCUMENT_SCROLL_EVENT_NAMESPACE = addNamespace(\"scroll\", \"dxSchedulerVirtualScrolling\");\nvar scrollingOrientations = {\n  vertical: \"vertical\",\n  horizontal: \"horizontal\",\n  both: \"both\",\n  none: \"none\"\n};\nvar DefaultScrollingOrientation = scrollingOrientations.both;\nexport class VirtualScrollingDispatcher {\n  constructor(options) {\n    this.options = options;\n    if (options) {\n      this._rowHeight = this.getCellHeight();\n      this._cellWidth = this.getCellWidth();\n      this._createVirtualScrollingBase();\n    }\n  }\n  get isRTL() {\n    return this.options.isRTL();\n  }\n  get verticalVirtualScrolling() {\n    return this._verticalVirtualScrolling;\n  }\n  set verticalVirtualScrolling(value) {\n    this._verticalVirtualScrolling = value;\n  }\n  get horizontalVirtualScrolling() {\n    return this._horizontalVirtualScrolling;\n  }\n  set horizontalVirtualScrolling(value) {\n    this._horizontalVirtualScrolling = value;\n  }\n  get document() {\n    return domAdapter.getDocument();\n  }\n  get height() {\n    return this.options.getSchedulerHeight();\n  }\n  get width() {\n    return this.options.getSchedulerWidth();\n  }\n  get rowHeight() {\n    return this._rowHeight;\n  }\n  set rowHeight(value) {\n    this._rowHeight = value;\n  }\n  get outlineCount() {\n    return this.options.getScrolling().outlineCount;\n  }\n  get cellWidth() {\n    return this._cellWidth;\n  }\n  set cellWidth(value) {\n    this._cellWidth = value;\n  }\n  get viewportWidth() {\n    var width = this.width && this.options.getViewWidth();\n    return width > 0 ? width : this.options.getWindowWidth();\n  }\n  get viewportHeight() {\n    var height = this.height && this.options.getViewHeight();\n    return height > 0 ? height : this.options.getWindowHeight();\n  }\n  get cellCountInsideTopVirtualRow() {\n    var _this$verticalScrolli;\n    return (null === (_this$verticalScrolli = this.verticalScrollingState) || void 0 === _this$verticalScrolli ? void 0 : _this$verticalScrolli.virtualItemCountBefore) || 0;\n  }\n  get cellCountInsideLeftVirtualCell() {\n    var _this$horizontalScrol;\n    return (null === (_this$horizontalScrol = this.horizontalScrollingState) || void 0 === _this$horizontalScrol ? void 0 : _this$horizontalScrol.virtualItemCountBefore) || 0;\n  }\n  get cellCountInsideRightVirtualCell() {\n    var _this$horizontalScrol2;\n    return (null === (_this$horizontalScrol2 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol2 ? void 0 : _this$horizontalScrol2.virtualItemCountAfter) || 0;\n  }\n  get topVirtualRowsCount() {\n    return this.cellCountInsideTopVirtualRow > 0 ? 1 : 0;\n  }\n  get leftVirtualCellsCount() {\n    var virtualItemsCount = !this.isRTL ? this.cellCountInsideLeftVirtualCell : this.cellCountInsideRightVirtualCell;\n    return virtualItemsCount > 0 ? 1 : 0;\n  }\n  get virtualRowOffset() {\n    var _this$verticalScrolli2;\n    return (null === (_this$verticalScrolli2 = this.verticalScrollingState) || void 0 === _this$verticalScrolli2 ? void 0 : _this$verticalScrolli2.virtualItemSizeBefore) || 0;\n  }\n  get virtualCellOffset() {\n    var _this$horizontalScrol3;\n    return (null === (_this$horizontalScrol3 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol3 ? void 0 : _this$horizontalScrol3.virtualItemSizeBefore) || 0;\n  }\n  get scrollingState() {\n    var _this$verticalVirtual, _this$horizontalVirtu;\n    return {\n      vertical: null === (_this$verticalVirtual = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual ? void 0 : _this$verticalVirtual.state,\n      horizontal: null === (_this$horizontalVirtu = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu ? void 0 : _this$horizontalVirtu.state\n    };\n  }\n  get verticalScrollingState() {\n    return this.scrollingState.vertical;\n  }\n  get horizontalScrollingState() {\n    return this.scrollingState.horizontal;\n  }\n  get scrollingOrientation() {\n    var scrolling = this.options.getScrolling();\n    if (\"standard\" === scrolling.mode) {\n      return scrollingOrientations.none;\n    }\n    return scrolling.orientation || DefaultScrollingOrientation;\n  }\n  get verticalScrollingAllowed() {\n    return this.scrollingOrientation === scrollingOrientations.vertical || this.scrollingOrientation === scrollingOrientations.both;\n  }\n  get horizontalScrollingAllowed() {\n    return this.scrollingOrientation === scrollingOrientations.horizontal || this.scrollingOrientation === scrollingOrientations.both;\n  }\n  setViewOptions(options) {\n    this.options = options;\n    if (this.verticalVirtualScrolling) {\n      this.verticalVirtualScrolling.options = options;\n      this.verticalVirtualScrolling.itemSize = this.rowHeight;\n      this.verticalVirtualScrolling.viewportSize = this.viewportHeight;\n    }\n    if (this.horizontalVirtualScrolling) {\n      this.horizontalVirtualScrolling.options = options;\n      this.verticalVirtualScrolling.itemSize = this.cellWidth;\n      this.verticalVirtualScrolling.viewportSize = this.viewportWidth;\n    }\n  }\n  getRenderState() {\n    var _this$verticalVirtual2, _this$horizontalVirtu2;\n    var verticalRenderState = (null === (_this$verticalVirtual2 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual2 ? void 0 : _this$verticalVirtual2.getRenderState()) || {};\n    var horizontalRenderState = (null === (_this$horizontalVirtu2 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu2 ? void 0 : _this$horizontalVirtu2.getRenderState()) || {};\n    return _extends({}, verticalRenderState, horizontalRenderState);\n  }\n  getCellHeight() {\n    var cellHeight = this.options.getCellHeight();\n    var result = cellHeight > 0 ? cellHeight : DEFAULT_CELL_HEIGHT;\n    return Math.floor(result);\n  }\n  getCellWidth() {\n    var cellWidth = this.options.getCellWidth();\n    var minCellWidth = this.options.getCellMinWidth();\n    if (!cellWidth || cellWidth < minCellWidth) {\n      cellWidth = minCellWidth;\n    }\n    var result = cellWidth > 0 ? cellWidth : MIN_CELL_WIDTH;\n    return Math.floor(result);\n  }\n  calculateCoordinatesByDataAndPosition(cellData, position, date, isCalculateTime, isVerticalDirectionView) {\n    var {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    } = position;\n    var {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: allDay\n    } = cellData;\n    var timeToScroll = date.getTime();\n    var cellStartTime = startDate.getTime();\n    var cellEndTime = endDate.getTime();\n    var scrollInCell = allDay || !isCalculateTime ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);\n    var cellWidth = this.getCellWidth();\n    var rowHeight = this.getCellHeight();\n    var top = isVerticalDirectionView ? (rowIndex + scrollInCell) * rowHeight : rowIndex * rowHeight;\n    var left = isVerticalDirectionView ? columnIndex * cellWidth : (columnIndex + scrollInCell) * cellWidth;\n    if (this.isRTL) {\n      left = this.options.getScrollableOuterWidth() - left;\n    }\n    return {\n      top: top,\n      left: left\n    };\n  }\n  dispose() {\n    if (this._onScrollHandler) {\n      eventsEngine.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler);\n    }\n  }\n  createVirtualScrolling() {\n    var isVerticalVirtualScrollingCreated = !!this.verticalVirtualScrolling;\n    var isHorizontalVirtualScrollingCreated = !!this.horizontalVirtualScrolling;\n    if (this.verticalScrollingAllowed !== isVerticalVirtualScrollingCreated || this.horizontalScrollingAllowed !== isHorizontalVirtualScrollingCreated) {\n      this._rowHeight = this.getCellHeight();\n      this._cellWidth = this.getCellWidth();\n      this._createVirtualScrollingBase();\n    }\n  }\n  _createVirtualScrollingBase() {\n    if (this.verticalScrollingAllowed) {\n      this.verticalVirtualScrolling = new VerticalVirtualScrolling(_extends({}, this.options, {\n        viewportHeight: this.viewportHeight,\n        rowHeight: this.rowHeight,\n        outlineCount: this.outlineCount\n      }));\n    }\n    if (this.horizontalScrollingAllowed) {\n      this.horizontalVirtualScrolling = new HorizontalVirtualScrolling(_extends({}, this.options, {\n        viewportWidth: this.viewportWidth,\n        cellWidth: this.cellWidth,\n        outlineCount: this.outlineCount\n      }));\n    }\n  }\n  isAttachWindowScrollEvent() {\n    return (this.horizontalScrollingAllowed || this.verticalScrollingAllowed) && !this.height;\n  }\n  attachScrollableEvents() {\n    if (this.isAttachWindowScrollEvent()) {\n      this._attachWindowScroll();\n    }\n  }\n  _attachWindowScroll() {\n    var window = getWindow();\n    this._onScrollHandler = this.options.createAction(() => {\n      var {\n        scrollX: scrollX,\n        scrollY: scrollY\n      } = window;\n      if (scrollX >= MIN_SCROLL_OFFSET || scrollY >= MIN_SCROLL_OFFSET) {\n        this.handleOnScrollEvent({\n          left: scrollX,\n          top: scrollY\n        });\n      }\n    });\n    eventsEngine.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler);\n  }\n  handleOnScrollEvent(scrollPosition) {\n    if (scrollPosition) {\n      var _this$verticalVirtual3, _this$horizontalVirtu3;\n      var {\n        left: left,\n        top: top\n      } = scrollPosition;\n      var verticalStateChanged = isDefined(top) && (null === (_this$verticalVirtual3 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual3 ? void 0 : _this$verticalVirtual3.updateState(top));\n      var horizontalStateChanged = isDefined(left) && (null === (_this$horizontalVirtu3 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu3 ? void 0 : _this$horizontalVirtu3.updateState(left));\n      if (verticalStateChanged || horizontalStateChanged) {\n        var _this$options$updateR, _this$options;\n        null === (_this$options$updateR = (_this$options = this.options).updateRender) || void 0 === _this$options$updateR ? void 0 : _this$options$updateR.call(_this$options);\n      }\n    }\n  }\n  updateDimensions(isForce) {\n    var cellHeight = this.getCellHeight();\n    var needUpdateVertical = this.verticalScrollingAllowed && cellHeight !== this.rowHeight;\n    if ((needUpdateVertical || isForce) && this.verticalVirtualScrolling) {\n      this.rowHeight = cellHeight;\n      this.verticalVirtualScrolling.viewportSize = this.viewportHeight;\n      this.verticalVirtualScrolling.reinitState(cellHeight, isForce);\n    }\n    var cellWidth = this.getCellWidth();\n    var needUpdateHorizontal = this.horizontalScrollingAllowed && cellWidth !== this.cellWidth;\n    if ((needUpdateHorizontal || isForce) && this.horizontalVirtualScrolling) {\n      this.cellWidth = cellWidth;\n      this.horizontalVirtualScrolling.viewportSize = this.viewportWidth;\n      this.horizontalVirtualScrolling.reinitState(cellWidth, isForce);\n    }\n    if (needUpdateVertical || needUpdateHorizontal) {\n      var _this$options$updateG, _this$options2;\n      null === (_this$options$updateG = (_this$options2 = this.options).updateGrid) || void 0 === _this$options$updateG ? void 0 : _this$options$updateG.call(_this$options2);\n    }\n  }\n}\nclass VirtualScrollingBase {\n  constructor(options) {\n    this.options = options;\n    this._state = this.defaultState;\n    this.viewportSize = options.viewportSize;\n    this._itemSize = options.itemSize;\n    this._position = -1;\n    this._itemSizeChanged = false;\n    this.updateState(0);\n  }\n  get itemSize() {\n    return this._itemSize;\n  }\n  set itemSize(value) {\n    this._itemSizeChanged = this._itemSize !== value;\n    this._itemSize = value;\n  }\n  get state() {\n    return this._state;\n  }\n  set state(value) {\n    this._state = value;\n  }\n  get startIndex() {\n    return this.state.startIndex;\n  }\n  get pageSize() {\n    return Math.ceil(this.viewportSize / this.itemSize);\n  }\n  get outlineCount() {\n    return isDefined(this.options.outlineCount) ? this.options.outlineCount : Math.floor(this.pageSize / 2);\n  }\n  get groupCount() {\n    return this.options.getGroupCount();\n  }\n  get isVerticalGrouping() {\n    return this.options.isVerticalGrouping();\n  }\n  get defaultState() {\n    return {\n      prevPosition: 0,\n      startIndex: -1,\n      itemCount: 0,\n      virtualItemCountBefore: 0,\n      virtualItemCountAfter: 0,\n      outlineCountBefore: 0,\n      outlineCountAfter: 0,\n      virtualItemSizeBefore: 0,\n      virtualItemSizeAfter: 0,\n      outlineSizeBefore: 0,\n      outlineSizeAfter: 0\n    };\n  }\n  get maxScrollPosition() {\n    return this.getTotalItemCount() * this.itemSize - this.viewportSize;\n  }\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position = value;\n  }\n  needUpdateState(position) {\n    var {\n      prevPosition: prevPosition,\n      startIndex: startIndex\n    } = this.state;\n    var isFirstInitialization = startIndex < 0;\n    if (isFirstInitialization) {\n      return true;\n    }\n    var isStartIndexChanged = false;\n    if (this._validateAndSavePosition(position)) {\n      if (0 === position || position === this.maxScrollPosition) {\n        return true;\n      }\n      var currentPosition = prevPosition;\n      var currentItemsCount = Math.floor(currentPosition / this.itemSize);\n      var itemsCount = Math.floor(position / this.itemSize);\n      isStartIndexChanged = Math.abs(currentItemsCount - itemsCount) >= this.outlineCount;\n    }\n    return isStartIndexChanged;\n  }\n  _validateAndSavePosition(position) {\n    if (!isDefined(position)) {\n      return false;\n    }\n    var result = this.position !== position;\n    this.position = position;\n    return result;\n  }\n  _correctPosition(position) {\n    return position >= 0 ? Math.min(position, this.maxScrollPosition) : -1;\n  }\n  updateState(position, isForce) {\n    position = this._correctPosition(position);\n    if (!this.needUpdateState(position) && !isForce) {\n      return false;\n    }\n    var itemsInfoBefore = this._calcItemInfoBefore(position);\n    var itemsDeltaBefore = this._calcItemDeltaBefore(itemsInfoBefore);\n    var {\n      outlineCountAfter: outlineCountAfter,\n      virtualItemCountAfter: virtualItemCountAfter,\n      itemCountWithAfter: itemCountWithAfter\n    } = this._calcItemInfoAfter(itemsDeltaBefore);\n    var {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    } = itemsInfoBefore;\n    var itemCount = outlineCountBefore + itemCountWithAfter + outlineCountAfter;\n    var itemCountBefore = Math.floor(position / this.itemSize);\n    this.state.prevPosition = itemCountBefore * this.itemSize;\n    this.state.startIndex = itemCountBefore - outlineCountBefore;\n    this.state.virtualItemCountBefore = virtualItemCountBefore;\n    this.state.outlineCountBefore = outlineCountBefore;\n    this.state.itemCount = itemCount;\n    this.state.outlineCountAfter = outlineCountAfter;\n    this.state.virtualItemCountAfter = virtualItemCountAfter;\n    this._updateStateCore();\n    return true;\n  }\n  reinitState(itemSize, isForceUpdate) {\n    var {\n      position: position\n    } = this;\n    this.itemSize = itemSize;\n    this.updateState(0, isForceUpdate);\n    if (position > 0) {\n      this.updateState(position, isForceUpdate);\n    }\n  }\n  _calcItemInfoBefore(position) {\n    var virtualItemCountBefore = Math.floor(position / this.itemSize);\n    var outlineCountBefore = Math.min(virtualItemCountBefore, this.outlineCount);\n    virtualItemCountBefore -= outlineCountBefore;\n    return {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    };\n  }\n  _calcItemDeltaBefore(itemInfoBefore) {\n    var {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    } = itemInfoBefore;\n    var totalItemCount = this.getTotalItemCount();\n    return totalItemCount - virtualItemCountBefore - outlineCountBefore;\n  }\n  getTotalItemCount() {\n    throw \"getTotalItemCount method should be implemented\";\n  }\n  getRenderState() {\n    throw \"getRenderState method should be implemented\";\n  }\n  _calcItemInfoAfter(itemsDeltaBefore) {\n    var itemCountWithAfter = itemsDeltaBefore >= this.pageSize ? this.pageSize : itemsDeltaBefore;\n    var virtualItemCountAfter = itemsDeltaBefore - itemCountWithAfter;\n    var outlineCountAfter = virtualItemCountAfter > 0 ? Math.min(virtualItemCountAfter, this.outlineCount) : 0;\n    if (virtualItemCountAfter > 0) {\n      virtualItemCountAfter -= outlineCountAfter;\n    }\n    return {\n      virtualItemCountAfter: virtualItemCountAfter,\n      outlineCountAfter: outlineCountAfter,\n      itemCountWithAfter: itemCountWithAfter\n    };\n  }\n  _updateStateCore() {\n    var {\n      state: state\n    } = this;\n    var virtualItemCountBefore = state.virtualItemCountBefore;\n    var virtualItemCountAfter = state.virtualItemCountAfter;\n    var outlineCountBefore = state.outlineCountBefore;\n    var outlineCountAfter = state.outlineCountAfter;\n    var prevVirtualItemSizeBefore = state.virtualItemSizeBefore;\n    var prevVirtualItemSizeAfter = state.virtualItemSizeAfter;\n    var prevOutlineSizeBefore = state.outlineSizeBefore;\n    var prevOutlineSizeAfter = state.outlineSizeAfter;\n    var virtualItemSizeBefore = this.itemSize * virtualItemCountBefore;\n    var virtualItemSizeAfter = this.itemSize * virtualItemCountAfter;\n    var outlineSizeBefore = this.itemSize * outlineCountBefore;\n    var outlineSizeAfter = this.itemSize * outlineCountAfter;\n    var prevVirtualSizeBefore = prevVirtualItemSizeBefore + prevOutlineSizeBefore;\n    var virtualSizeBefore = virtualItemSizeBefore + outlineSizeBefore;\n    var prevVirtualSizeAfter = prevVirtualItemSizeAfter + prevOutlineSizeAfter;\n    var virtualSizeAfter = virtualItemSizeAfter + outlineSizeAfter;\n    var isAppend = prevVirtualSizeBefore < virtualSizeBefore;\n    var isPrepend = prevVirtualSizeAfter < virtualSizeAfter;\n    var needAddItems = this._itemSizeChanged || isAppend || isPrepend;\n    if (needAddItems) {\n      this._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter);\n    }\n  }\n  _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\n    var {\n      state: state\n    } = this;\n    state.virtualItemSizeBefore = virtualItemSizeBefore;\n    state.virtualItemSizeAfter = virtualItemSizeAfter;\n  }\n}\nclass VerticalVirtualScrolling extends VirtualScrollingBase {\n  constructor(options) {\n    super(_extends({}, options, {\n      itemSize: options.rowHeight,\n      viewportSize: options.viewportHeight\n    }));\n  }\n  get prevTopPosition() {\n    return this.state.prevPosition;\n  }\n  get rowCount() {\n    return this.state.itemCount;\n  }\n  get topVirtualRowCount() {\n    return this.state.virtualItemCountBefore;\n  }\n  get bottomVirtualRowCount() {\n    return this.state.virtualItemCountAfter;\n  }\n  getTotalItemCount() {\n    return this.options.getTotalRowCount(this.groupCount, this.isVerticalGrouping);\n  }\n  getRenderState() {\n    return {\n      topVirtualRowHeight: this.state.virtualItemSizeBefore,\n      bottomVirtualRowHeight: this.state.virtualItemSizeAfter,\n      startRowIndex: this.state.startIndex,\n      rowCount: this.state.itemCount,\n      startIndex: this.state.startIndex\n    };\n  }\n}\nclass HorizontalVirtualScrolling extends VirtualScrollingBase {\n  constructor(options) {\n    super(_extends({}, options, {\n      itemSize: options.cellWidth,\n      viewportSize: options.viewportWidth\n    }));\n  }\n  get isRTL() {\n    return this.options.isRTL();\n  }\n  getTotalItemCount() {\n    return this.options.getTotalCellCount(this.groupCount, this.isVerticalGrouping);\n  }\n  getRenderState() {\n    return {\n      leftVirtualCellWidth: this.state.virtualItemSizeBefore,\n      rightVirtualCellWidth: this.state.virtualItemSizeAfter,\n      startCellIndex: this.state.startIndex,\n      cellCount: this.state.itemCount,\n      cellWidth: this.itemSize\n    };\n  }\n  _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\n    if (!this.isRTL) {\n      super._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter);\n    } else {\n      var {\n        state: state\n      } = this;\n      state.virtualItemSizeAfter = virtualItemSizeBefore;\n      state.virtualItemSizeBefore = virtualItemSizeAfter;\n      state.startIndex = this.getTotalItemCount() - this.startIndex - this.state.itemCount;\n    }\n  }\n}\nexport class VirtualScrollingRenderer {\n  constructor(workspace) {\n    this._workspace = workspace;\n    this._renderAppointmentTimeoutID = null;\n  }\n  getRenderTimeout() {\n    return this._workspace.option(\"isRenovatedAppointments\") ? -1 : VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT;\n  }\n  get workspace() {\n    return this._workspace;\n  }\n  updateRender() {\n    this._renderGrid();\n    this._renderAppointments();\n  }\n  _renderGrid() {\n    this.workspace.renderWorkSpace(false);\n  }\n  _renderAppointments() {\n    var renderTimeout = this.getRenderTimeout();\n    if (renderTimeout >= 0) {\n      clearTimeout(this._renderAppointmentTimeoutID);\n      this._renderAppointmentTimeoutID = setTimeout(() => this.workspace.updateAppointments(), renderTimeout);\n    } else {\n      this.workspace.updateAppointments();\n    }\n  }\n}","map":{"version":3,"names":["_extends","domAdapter","eventsEngine","getWindow","addNamespace","isDefined","DEFAULT_CELL_HEIGHT","MIN_CELL_WIDTH","MIN_SCROLL_OFFSET","VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT","DOCUMENT_SCROLL_EVENT_NAMESPACE","scrollingOrientations","vertical","horizontal","both","none","DefaultScrollingOrientation","VirtualScrollingDispatcher","constructor","options","_rowHeight","getCellHeight","_cellWidth","getCellWidth","_createVirtualScrollingBase","isRTL","verticalVirtualScrolling","_verticalVirtualScrolling","value","horizontalVirtualScrolling","_horizontalVirtualScrolling","document","getDocument","height","getSchedulerHeight","width","getSchedulerWidth","rowHeight","outlineCount","getScrolling","cellWidth","viewportWidth","getViewWidth","getWindowWidth","viewportHeight","getViewHeight","getWindowHeight","cellCountInsideTopVirtualRow","_this$verticalScrolli","verticalScrollingState","virtualItemCountBefore","cellCountInsideLeftVirtualCell","_this$horizontalScrol","horizontalScrollingState","cellCountInsideRightVirtualCell","_this$horizontalScrol2","virtualItemCountAfter","topVirtualRowsCount","leftVirtualCellsCount","virtualItemsCount","virtualRowOffset","_this$verticalScrolli2","virtualItemSizeBefore","virtualCellOffset","_this$horizontalScrol3","scrollingState","_this$verticalVirtual","_this$horizontalVirtu","state","scrollingOrientation","scrolling","mode","orientation","verticalScrollingAllowed","horizontalScrollingAllowed","setViewOptions","itemSize","viewportSize","getRenderState","_this$verticalVirtual2","_this$horizontalVirtu2","verticalRenderState","horizontalRenderState","cellHeight","result","Math","floor","minCellWidth","getCellMinWidth","calculateCoordinatesByDataAndPosition","cellData","position","date","isCalculateTime","isVerticalDirectionView","rowIndex","columnIndex","startDate","endDate","allDay","timeToScroll","getTime","cellStartTime","cellEndTime","scrollInCell","top","left","getScrollableOuterWidth","dispose","_onScrollHandler","off","createVirtualScrolling","isVerticalVirtualScrollingCreated","isHorizontalVirtualScrollingCreated","VerticalVirtualScrolling","HorizontalVirtualScrolling","isAttachWindowScrollEvent","attachScrollableEvents","_attachWindowScroll","window","createAction","scrollX","scrollY","handleOnScrollEvent","on","scrollPosition","_this$verticalVirtual3","_this$horizontalVirtu3","verticalStateChanged","updateState","horizontalStateChanged","_this$options$updateR","_this$options","updateRender","call","updateDimensions","isForce","needUpdateVertical","reinitState","needUpdateHorizontal","_this$options$updateG","_this$options2","updateGrid","VirtualScrollingBase","_state","defaultState","_itemSize","_position","_itemSizeChanged","startIndex","pageSize","ceil","groupCount","getGroupCount","isVerticalGrouping","prevPosition","itemCount","outlineCountBefore","outlineCountAfter","virtualItemSizeAfter","outlineSizeBefore","outlineSizeAfter","maxScrollPosition","getTotalItemCount","needUpdateState","isFirstInitialization","isStartIndexChanged","_validateAndSavePosition","currentPosition","currentItemsCount","itemsCount","abs","_correctPosition","min","itemsInfoBefore","_calcItemInfoBefore","itemsDeltaBefore","_calcItemDeltaBefore","itemCountWithAfter","_calcItemInfoAfter","itemCountBefore","_updateStateCore","isForceUpdate","itemInfoBefore","totalItemCount","prevVirtualItemSizeBefore","prevVirtualItemSizeAfter","prevOutlineSizeBefore","prevOutlineSizeAfter","prevVirtualSizeBefore","virtualSizeBefore","prevVirtualSizeAfter","virtualSizeAfter","isAppend","isPrepend","needAddItems","_updateStateVirtualItems","prevTopPosition","rowCount","topVirtualRowCount","bottomVirtualRowCount","getTotalRowCount","topVirtualRowHeight","bottomVirtualRowHeight","startRowIndex","getTotalCellCount","leftVirtualCellWidth","rightVirtualCellWidth","startCellIndex","cellCount","VirtualScrollingRenderer","workspace","_workspace","_renderAppointmentTimeoutID","getRenderTimeout","option","_renderGrid","_renderAppointments","renderWorkSpace","renderTimeout","clearTimeout","setTimeout","updateAppointments"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    getWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../events/utils/index\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nvar DEFAULT_CELL_HEIGHT = 50;\r\nvar MIN_CELL_WIDTH = 1;\r\nvar MIN_SCROLL_OFFSET = 10;\r\nvar VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 15;\r\nvar DOCUMENT_SCROLL_EVENT_NAMESPACE = addNamespace(\"scroll\", \"dxSchedulerVirtualScrolling\");\r\nvar scrollingOrientations = {\r\n    vertical: \"vertical\",\r\n    horizontal: \"horizontal\",\r\n    both: \"both\",\r\n    none: \"none\"\r\n};\r\nvar DefaultScrollingOrientation = scrollingOrientations.both;\r\nexport class VirtualScrollingDispatcher {\r\n    constructor(options) {\r\n        this.options = options;\r\n        if (options) {\r\n            this._rowHeight = this.getCellHeight();\r\n            this._cellWidth = this.getCellWidth();\r\n            this._createVirtualScrollingBase()\r\n        }\r\n    }\r\n    get isRTL() {\r\n        return this.options.isRTL()\r\n    }\r\n    get verticalVirtualScrolling() {\r\n        return this._verticalVirtualScrolling\r\n    }\r\n    set verticalVirtualScrolling(value) {\r\n        this._verticalVirtualScrolling = value\r\n    }\r\n    get horizontalVirtualScrolling() {\r\n        return this._horizontalVirtualScrolling\r\n    }\r\n    set horizontalVirtualScrolling(value) {\r\n        this._horizontalVirtualScrolling = value\r\n    }\r\n    get document() {\r\n        return domAdapter.getDocument()\r\n    }\r\n    get height() {\r\n        return this.options.getSchedulerHeight()\r\n    }\r\n    get width() {\r\n        return this.options.getSchedulerWidth()\r\n    }\r\n    get rowHeight() {\r\n        return this._rowHeight\r\n    }\r\n    set rowHeight(value) {\r\n        this._rowHeight = value\r\n    }\r\n    get outlineCount() {\r\n        return this.options.getScrolling().outlineCount\r\n    }\r\n    get cellWidth() {\r\n        return this._cellWidth\r\n    }\r\n    set cellWidth(value) {\r\n        this._cellWidth = value\r\n    }\r\n    get viewportWidth() {\r\n        var width = this.width && this.options.getViewWidth();\r\n        return width > 0 ? width : this.options.getWindowWidth()\r\n    }\r\n    get viewportHeight() {\r\n        var height = this.height && this.options.getViewHeight();\r\n        return height > 0 ? height : this.options.getWindowHeight()\r\n    }\r\n    get cellCountInsideTopVirtualRow() {\r\n        var _this$verticalScrolli;\r\n        return (null === (_this$verticalScrolli = this.verticalScrollingState) || void 0 === _this$verticalScrolli ? void 0 : _this$verticalScrolli.virtualItemCountBefore) || 0\r\n    }\r\n    get cellCountInsideLeftVirtualCell() {\r\n        var _this$horizontalScrol;\r\n        return (null === (_this$horizontalScrol = this.horizontalScrollingState) || void 0 === _this$horizontalScrol ? void 0 : _this$horizontalScrol.virtualItemCountBefore) || 0\r\n    }\r\n    get cellCountInsideRightVirtualCell() {\r\n        var _this$horizontalScrol2;\r\n        return (null === (_this$horizontalScrol2 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol2 ? void 0 : _this$horizontalScrol2.virtualItemCountAfter) || 0\r\n    }\r\n    get topVirtualRowsCount() {\r\n        return this.cellCountInsideTopVirtualRow > 0 ? 1 : 0\r\n    }\r\n    get leftVirtualCellsCount() {\r\n        var virtualItemsCount = !this.isRTL ? this.cellCountInsideLeftVirtualCell : this.cellCountInsideRightVirtualCell;\r\n        return virtualItemsCount > 0 ? 1 : 0\r\n    }\r\n    get virtualRowOffset() {\r\n        var _this$verticalScrolli2;\r\n        return (null === (_this$verticalScrolli2 = this.verticalScrollingState) || void 0 === _this$verticalScrolli2 ? void 0 : _this$verticalScrolli2.virtualItemSizeBefore) || 0\r\n    }\r\n    get virtualCellOffset() {\r\n        var _this$horizontalScrol3;\r\n        return (null === (_this$horizontalScrol3 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol3 ? void 0 : _this$horizontalScrol3.virtualItemSizeBefore) || 0\r\n    }\r\n    get scrollingState() {\r\n        var _this$verticalVirtual, _this$horizontalVirtu;\r\n        return {\r\n            vertical: null === (_this$verticalVirtual = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual ? void 0 : _this$verticalVirtual.state,\r\n            horizontal: null === (_this$horizontalVirtu = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu ? void 0 : _this$horizontalVirtu.state\r\n        }\r\n    }\r\n    get verticalScrollingState() {\r\n        return this.scrollingState.vertical\r\n    }\r\n    get horizontalScrollingState() {\r\n        return this.scrollingState.horizontal\r\n    }\r\n    get scrollingOrientation() {\r\n        var scrolling = this.options.getScrolling();\r\n        if (\"standard\" === scrolling.mode) {\r\n            return scrollingOrientations.none\r\n        }\r\n        return scrolling.orientation || DefaultScrollingOrientation\r\n    }\r\n    get verticalScrollingAllowed() {\r\n        return this.scrollingOrientation === scrollingOrientations.vertical || this.scrollingOrientation === scrollingOrientations.both\r\n    }\r\n    get horizontalScrollingAllowed() {\r\n        return this.scrollingOrientation === scrollingOrientations.horizontal || this.scrollingOrientation === scrollingOrientations.both\r\n    }\r\n    setViewOptions(options) {\r\n        this.options = options;\r\n        if (this.verticalVirtualScrolling) {\r\n            this.verticalVirtualScrolling.options = options;\r\n            this.verticalVirtualScrolling.itemSize = this.rowHeight;\r\n            this.verticalVirtualScrolling.viewportSize = this.viewportHeight\r\n        }\r\n        if (this.horizontalVirtualScrolling) {\r\n            this.horizontalVirtualScrolling.options = options;\r\n            this.verticalVirtualScrolling.itemSize = this.cellWidth;\r\n            this.verticalVirtualScrolling.viewportSize = this.viewportWidth\r\n        }\r\n    }\r\n    getRenderState() {\r\n        var _this$verticalVirtual2, _this$horizontalVirtu2;\r\n        var verticalRenderState = (null === (_this$verticalVirtual2 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual2 ? void 0 : _this$verticalVirtual2.getRenderState()) || {};\r\n        var horizontalRenderState = (null === (_this$horizontalVirtu2 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu2 ? void 0 : _this$horizontalVirtu2.getRenderState()) || {};\r\n        return _extends({}, verticalRenderState, horizontalRenderState)\r\n    }\r\n    getCellHeight() {\r\n        var cellHeight = this.options.getCellHeight();\r\n        var result = cellHeight > 0 ? cellHeight : DEFAULT_CELL_HEIGHT;\r\n        return Math.floor(result)\r\n    }\r\n    getCellWidth() {\r\n        var cellWidth = this.options.getCellWidth();\r\n        var minCellWidth = this.options.getCellMinWidth();\r\n        if (!cellWidth || cellWidth < minCellWidth) {\r\n            cellWidth = minCellWidth\r\n        }\r\n        var result = cellWidth > 0 ? cellWidth : MIN_CELL_WIDTH;\r\n        return Math.floor(result)\r\n    }\r\n    calculateCoordinatesByDataAndPosition(cellData, position, date, isCalculateTime, isVerticalDirectionView) {\r\n        var {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        } = position;\r\n        var {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay\r\n        } = cellData;\r\n        var timeToScroll = date.getTime();\r\n        var cellStartTime = startDate.getTime();\r\n        var cellEndTime = endDate.getTime();\r\n        var scrollInCell = allDay || !isCalculateTime ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);\r\n        var cellWidth = this.getCellWidth();\r\n        var rowHeight = this.getCellHeight();\r\n        var top = isVerticalDirectionView ? (rowIndex + scrollInCell) * rowHeight : rowIndex * rowHeight;\r\n        var left = isVerticalDirectionView ? columnIndex * cellWidth : (columnIndex + scrollInCell) * cellWidth;\r\n        if (this.isRTL) {\r\n            left = this.options.getScrollableOuterWidth() - left\r\n        }\r\n        return {\r\n            top: top,\r\n            left: left\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this._onScrollHandler) {\r\n            eventsEngine.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)\r\n        }\r\n    }\r\n    createVirtualScrolling() {\r\n        var isVerticalVirtualScrollingCreated = !!this.verticalVirtualScrolling;\r\n        var isHorizontalVirtualScrollingCreated = !!this.horizontalVirtualScrolling;\r\n        if (this.verticalScrollingAllowed !== isVerticalVirtualScrollingCreated || this.horizontalScrollingAllowed !== isHorizontalVirtualScrollingCreated) {\r\n            this._rowHeight = this.getCellHeight();\r\n            this._cellWidth = this.getCellWidth();\r\n            this._createVirtualScrollingBase()\r\n        }\r\n    }\r\n    _createVirtualScrollingBase() {\r\n        if (this.verticalScrollingAllowed) {\r\n            this.verticalVirtualScrolling = new VerticalVirtualScrolling(_extends({}, this.options, {\r\n                viewportHeight: this.viewportHeight,\r\n                rowHeight: this.rowHeight,\r\n                outlineCount: this.outlineCount\r\n            }))\r\n        }\r\n        if (this.horizontalScrollingAllowed) {\r\n            this.horizontalVirtualScrolling = new HorizontalVirtualScrolling(_extends({}, this.options, {\r\n                viewportWidth: this.viewportWidth,\r\n                cellWidth: this.cellWidth,\r\n                outlineCount: this.outlineCount\r\n            }))\r\n        }\r\n    }\r\n    isAttachWindowScrollEvent() {\r\n        return (this.horizontalScrollingAllowed || this.verticalScrollingAllowed) && !this.height\r\n    }\r\n    attachScrollableEvents() {\r\n        if (this.isAttachWindowScrollEvent()) {\r\n            this._attachWindowScroll()\r\n        }\r\n    }\r\n    _attachWindowScroll() {\r\n        var window = getWindow();\r\n        this._onScrollHandler = this.options.createAction(() => {\r\n            var {\r\n                scrollX: scrollX,\r\n                scrollY: scrollY\r\n            } = window;\r\n            if (scrollX >= MIN_SCROLL_OFFSET || scrollY >= MIN_SCROLL_OFFSET) {\r\n                this.handleOnScrollEvent({\r\n                    left: scrollX,\r\n                    top: scrollY\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)\r\n    }\r\n    handleOnScrollEvent(scrollPosition) {\r\n        if (scrollPosition) {\r\n            var _this$verticalVirtual3, _this$horizontalVirtu3;\r\n            var {\r\n                left: left,\r\n                top: top\r\n            } = scrollPosition;\r\n            var verticalStateChanged = isDefined(top) && (null === (_this$verticalVirtual3 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual3 ? void 0 : _this$verticalVirtual3.updateState(top));\r\n            var horizontalStateChanged = isDefined(left) && (null === (_this$horizontalVirtu3 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu3 ? void 0 : _this$horizontalVirtu3.updateState(left));\r\n            if (verticalStateChanged || horizontalStateChanged) {\r\n                var _this$options$updateR, _this$options;\r\n                null === (_this$options$updateR = (_this$options = this.options).updateRender) || void 0 === _this$options$updateR ? void 0 : _this$options$updateR.call(_this$options)\r\n            }\r\n        }\r\n    }\r\n    updateDimensions(isForce) {\r\n        var cellHeight = this.getCellHeight();\r\n        var needUpdateVertical = this.verticalScrollingAllowed && cellHeight !== this.rowHeight;\r\n        if ((needUpdateVertical || isForce) && this.verticalVirtualScrolling) {\r\n            this.rowHeight = cellHeight;\r\n            this.verticalVirtualScrolling.viewportSize = this.viewportHeight;\r\n            this.verticalVirtualScrolling.reinitState(cellHeight, isForce)\r\n        }\r\n        var cellWidth = this.getCellWidth();\r\n        var needUpdateHorizontal = this.horizontalScrollingAllowed && cellWidth !== this.cellWidth;\r\n        if ((needUpdateHorizontal || isForce) && this.horizontalVirtualScrolling) {\r\n            this.cellWidth = cellWidth;\r\n            this.horizontalVirtualScrolling.viewportSize = this.viewportWidth;\r\n            this.horizontalVirtualScrolling.reinitState(cellWidth, isForce)\r\n        }\r\n        if (needUpdateVertical || needUpdateHorizontal) {\r\n            var _this$options$updateG, _this$options2;\r\n            null === (_this$options$updateG = (_this$options2 = this.options).updateGrid) || void 0 === _this$options$updateG ? void 0 : _this$options$updateG.call(_this$options2)\r\n        }\r\n    }\r\n}\r\nclass VirtualScrollingBase {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this._state = this.defaultState;\r\n        this.viewportSize = options.viewportSize;\r\n        this._itemSize = options.itemSize;\r\n        this._position = -1;\r\n        this._itemSizeChanged = false;\r\n        this.updateState(0)\r\n    }\r\n    get itemSize() {\r\n        return this._itemSize\r\n    }\r\n    set itemSize(value) {\r\n        this._itemSizeChanged = this._itemSize !== value;\r\n        this._itemSize = value\r\n    }\r\n    get state() {\r\n        return this._state\r\n    }\r\n    set state(value) {\r\n        this._state = value\r\n    }\r\n    get startIndex() {\r\n        return this.state.startIndex\r\n    }\r\n    get pageSize() {\r\n        return Math.ceil(this.viewportSize / this.itemSize)\r\n    }\r\n    get outlineCount() {\r\n        return isDefined(this.options.outlineCount) ? this.options.outlineCount : Math.floor(this.pageSize / 2)\r\n    }\r\n    get groupCount() {\r\n        return this.options.getGroupCount()\r\n    }\r\n    get isVerticalGrouping() {\r\n        return this.options.isVerticalGrouping()\r\n    }\r\n    get defaultState() {\r\n        return {\r\n            prevPosition: 0,\r\n            startIndex: -1,\r\n            itemCount: 0,\r\n            virtualItemCountBefore: 0,\r\n            virtualItemCountAfter: 0,\r\n            outlineCountBefore: 0,\r\n            outlineCountAfter: 0,\r\n            virtualItemSizeBefore: 0,\r\n            virtualItemSizeAfter: 0,\r\n            outlineSizeBefore: 0,\r\n            outlineSizeAfter: 0\r\n        }\r\n    }\r\n    get maxScrollPosition() {\r\n        return this.getTotalItemCount() * this.itemSize - this.viewportSize\r\n    }\r\n    get position() {\r\n        return this._position\r\n    }\r\n    set position(value) {\r\n        this._position = value\r\n    }\r\n    needUpdateState(position) {\r\n        var {\r\n            prevPosition: prevPosition,\r\n            startIndex: startIndex\r\n        } = this.state;\r\n        var isFirstInitialization = startIndex < 0;\r\n        if (isFirstInitialization) {\r\n            return true\r\n        }\r\n        var isStartIndexChanged = false;\r\n        if (this._validateAndSavePosition(position)) {\r\n            if (0 === position || position === this.maxScrollPosition) {\r\n                return true\r\n            }\r\n            var currentPosition = prevPosition;\r\n            var currentItemsCount = Math.floor(currentPosition / this.itemSize);\r\n            var itemsCount = Math.floor(position / this.itemSize);\r\n            isStartIndexChanged = Math.abs(currentItemsCount - itemsCount) >= this.outlineCount\r\n        }\r\n        return isStartIndexChanged\r\n    }\r\n    _validateAndSavePosition(position) {\r\n        if (!isDefined(position)) {\r\n            return false\r\n        }\r\n        var result = this.position !== position;\r\n        this.position = position;\r\n        return result\r\n    }\r\n    _correctPosition(position) {\r\n        return position >= 0 ? Math.min(position, this.maxScrollPosition) : -1\r\n    }\r\n    updateState(position, isForce) {\r\n        position = this._correctPosition(position);\r\n        if (!this.needUpdateState(position) && !isForce) {\r\n            return false\r\n        }\r\n        var itemsInfoBefore = this._calcItemInfoBefore(position);\r\n        var itemsDeltaBefore = this._calcItemDeltaBefore(itemsInfoBefore);\r\n        var {\r\n            outlineCountAfter: outlineCountAfter,\r\n            virtualItemCountAfter: virtualItemCountAfter,\r\n            itemCountWithAfter: itemCountWithAfter\r\n        } = this._calcItemInfoAfter(itemsDeltaBefore);\r\n        var {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        } = itemsInfoBefore;\r\n        var itemCount = outlineCountBefore + itemCountWithAfter + outlineCountAfter;\r\n        var itemCountBefore = Math.floor(position / this.itemSize);\r\n        this.state.prevPosition = itemCountBefore * this.itemSize;\r\n        this.state.startIndex = itemCountBefore - outlineCountBefore;\r\n        this.state.virtualItemCountBefore = virtualItemCountBefore;\r\n        this.state.outlineCountBefore = outlineCountBefore;\r\n        this.state.itemCount = itemCount;\r\n        this.state.outlineCountAfter = outlineCountAfter;\r\n        this.state.virtualItemCountAfter = virtualItemCountAfter;\r\n        this._updateStateCore();\r\n        return true\r\n    }\r\n    reinitState(itemSize, isForceUpdate) {\r\n        var {\r\n            position: position\r\n        } = this;\r\n        this.itemSize = itemSize;\r\n        this.updateState(0, isForceUpdate);\r\n        if (position > 0) {\r\n            this.updateState(position, isForceUpdate)\r\n        }\r\n    }\r\n    _calcItemInfoBefore(position) {\r\n        var virtualItemCountBefore = Math.floor(position / this.itemSize);\r\n        var outlineCountBefore = Math.min(virtualItemCountBefore, this.outlineCount);\r\n        virtualItemCountBefore -= outlineCountBefore;\r\n        return {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        }\r\n    }\r\n    _calcItemDeltaBefore(itemInfoBefore) {\r\n        var {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        } = itemInfoBefore;\r\n        var totalItemCount = this.getTotalItemCount();\r\n        return totalItemCount - virtualItemCountBefore - outlineCountBefore\r\n    }\r\n    getTotalItemCount() {\r\n        throw \"getTotalItemCount method should be implemented\"\r\n    }\r\n    getRenderState() {\r\n        throw \"getRenderState method should be implemented\"\r\n    }\r\n    _calcItemInfoAfter(itemsDeltaBefore) {\r\n        var itemCountWithAfter = itemsDeltaBefore >= this.pageSize ? this.pageSize : itemsDeltaBefore;\r\n        var virtualItemCountAfter = itemsDeltaBefore - itemCountWithAfter;\r\n        var outlineCountAfter = virtualItemCountAfter > 0 ? Math.min(virtualItemCountAfter, this.outlineCount) : 0;\r\n        if (virtualItemCountAfter > 0) {\r\n            virtualItemCountAfter -= outlineCountAfter\r\n        }\r\n        return {\r\n            virtualItemCountAfter: virtualItemCountAfter,\r\n            outlineCountAfter: outlineCountAfter,\r\n            itemCountWithAfter: itemCountWithAfter\r\n        }\r\n    }\r\n    _updateStateCore() {\r\n        var {\r\n            state: state\r\n        } = this;\r\n        var virtualItemCountBefore = state.virtualItemCountBefore;\r\n        var virtualItemCountAfter = state.virtualItemCountAfter;\r\n        var outlineCountBefore = state.outlineCountBefore;\r\n        var outlineCountAfter = state.outlineCountAfter;\r\n        var prevVirtualItemSizeBefore = state.virtualItemSizeBefore;\r\n        var prevVirtualItemSizeAfter = state.virtualItemSizeAfter;\r\n        var prevOutlineSizeBefore = state.outlineSizeBefore;\r\n        var prevOutlineSizeAfter = state.outlineSizeAfter;\r\n        var virtualItemSizeBefore = this.itemSize * virtualItemCountBefore;\r\n        var virtualItemSizeAfter = this.itemSize * virtualItemCountAfter;\r\n        var outlineSizeBefore = this.itemSize * outlineCountBefore;\r\n        var outlineSizeAfter = this.itemSize * outlineCountAfter;\r\n        var prevVirtualSizeBefore = prevVirtualItemSizeBefore + prevOutlineSizeBefore;\r\n        var virtualSizeBefore = virtualItemSizeBefore + outlineSizeBefore;\r\n        var prevVirtualSizeAfter = prevVirtualItemSizeAfter + prevOutlineSizeAfter;\r\n        var virtualSizeAfter = virtualItemSizeAfter + outlineSizeAfter;\r\n        var isAppend = prevVirtualSizeBefore < virtualSizeBefore;\r\n        var isPrepend = prevVirtualSizeAfter < virtualSizeAfter;\r\n        var needAddItems = this._itemSizeChanged || isAppend || isPrepend;\r\n        if (needAddItems) {\r\n            this._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter)\r\n        }\r\n    }\r\n    _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\r\n        var {\r\n            state: state\r\n        } = this;\r\n        state.virtualItemSizeBefore = virtualItemSizeBefore;\r\n        state.virtualItemSizeAfter = virtualItemSizeAfter\r\n    }\r\n}\r\nclass VerticalVirtualScrolling extends VirtualScrollingBase {\r\n    constructor(options) {\r\n        super(_extends({}, options, {\r\n            itemSize: options.rowHeight,\r\n            viewportSize: options.viewportHeight\r\n        }))\r\n    }\r\n    get prevTopPosition() {\r\n        return this.state.prevPosition\r\n    }\r\n    get rowCount() {\r\n        return this.state.itemCount\r\n    }\r\n    get topVirtualRowCount() {\r\n        return this.state.virtualItemCountBefore\r\n    }\r\n    get bottomVirtualRowCount() {\r\n        return this.state.virtualItemCountAfter\r\n    }\r\n    getTotalItemCount() {\r\n        return this.options.getTotalRowCount(this.groupCount, this.isVerticalGrouping)\r\n    }\r\n    getRenderState() {\r\n        return {\r\n            topVirtualRowHeight: this.state.virtualItemSizeBefore,\r\n            bottomVirtualRowHeight: this.state.virtualItemSizeAfter,\r\n            startRowIndex: this.state.startIndex,\r\n            rowCount: this.state.itemCount,\r\n            startIndex: this.state.startIndex\r\n        }\r\n    }\r\n}\r\nclass HorizontalVirtualScrolling extends VirtualScrollingBase {\r\n    constructor(options) {\r\n        super(_extends({}, options, {\r\n            itemSize: options.cellWidth,\r\n            viewportSize: options.viewportWidth\r\n        }))\r\n    }\r\n    get isRTL() {\r\n        return this.options.isRTL()\r\n    }\r\n    getTotalItemCount() {\r\n        return this.options.getTotalCellCount(this.groupCount, this.isVerticalGrouping)\r\n    }\r\n    getRenderState() {\r\n        return {\r\n            leftVirtualCellWidth: this.state.virtualItemSizeBefore,\r\n            rightVirtualCellWidth: this.state.virtualItemSizeAfter,\r\n            startCellIndex: this.state.startIndex,\r\n            cellCount: this.state.itemCount,\r\n            cellWidth: this.itemSize\r\n        }\r\n    }\r\n    _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\r\n        if (!this.isRTL) {\r\n            super._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter)\r\n        } else {\r\n            var {\r\n                state: state\r\n            } = this;\r\n            state.virtualItemSizeAfter = virtualItemSizeBefore;\r\n            state.virtualItemSizeBefore = virtualItemSizeAfter;\r\n            state.startIndex = this.getTotalItemCount() - this.startIndex - this.state.itemCount\r\n        }\r\n    }\r\n}\r\nexport class VirtualScrollingRenderer {\r\n    constructor(workspace) {\r\n        this._workspace = workspace;\r\n        this._renderAppointmentTimeoutID = null\r\n    }\r\n    getRenderTimeout() {\r\n        return this._workspace.option(\"isRenovatedAppointments\") ? -1 : VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT\r\n    }\r\n    get workspace() {\r\n        return this._workspace\r\n    }\r\n    updateRender() {\r\n        this._renderGrid();\r\n        this._renderAppointments()\r\n    }\r\n    _renderGrid() {\r\n        this.workspace.renderWorkSpace(false)\r\n    }\r\n    _renderAppointments() {\r\n        var renderTimeout = this.getRenderTimeout();\r\n        if (renderTimeout >= 0) {\r\n            clearTimeout(this._renderAppointmentTimeoutID);\r\n            this._renderAppointmentTimeoutID = setTimeout(() => this.workspace.updateAppointments(), renderTimeout)\r\n        } else {\r\n            this.workspace.updateAppointments()\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}