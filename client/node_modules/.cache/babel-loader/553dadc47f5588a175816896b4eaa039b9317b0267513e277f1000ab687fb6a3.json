{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/data_provider/m_appointment_filter.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { wrapToArray } from \"../../../../core/utils/array\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { each, map } from \"../../../../core/utils/iterator\";\nimport { isDefined, isFunction } from \"../../../../core/utils/type\";\nimport query from \"../../../../data/query\";\nimport { getAppointmentTakesAllDay } from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\nimport { hasResourceValue } from \"../../../../renovation/ui/scheduler/resources/hasResourceValue\";\nimport getDatesWithoutTime from \"../../../../renovation/ui/scheduler/utils/filtering/getDatesWithoutTime\";\nimport { isDateAndTimeView as calculateIsDateAndTimeView, isTimelineView } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { createAppointmentAdapter } from \"../../../../ui/scheduler/appointmentAdapter\";\nimport { getRecurrenceProcessor } from \"../../../../ui/scheduler/recurrence\";\nimport { getResourcesDataByGroups } from \"../../resources/m_utils\";\nimport { _appointmentPartInInterval, compareDateWithEndDayHour, compareDateWithStartDayHour, getAppointmentTakesSeveralDays, getRecurrenceException } from \"./m_utils\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\nexport class AppointmentFilterBaseStrategy {\n  constructor(options) {\n    this.options = options;\n    this.dataAccessors = this.options.dataAccessors;\n    this._init();\n  }\n  get strategyName() {\n    return FilterStrategies.standard;\n  }\n  get timeZoneCalculator() {\n    return this.options.timeZoneCalculator;\n  }\n  get viewStartDayHour() {\n    return this.options.startDayHour;\n  }\n  get viewEndDayHour() {\n    return this.options.endDayHour;\n  }\n  get timezone() {\n    return this.options.timezone;\n  }\n  get firstDayOfWeek() {\n    return this.options.firstDayOfWeek;\n  }\n  get showAllDayPanel() {\n    return this.options.showAllDayPanel;\n  }\n  get loadedResources() {\n    return this._resolveOption(\"loadedResources\");\n  }\n  get supportAllDayRow() {\n    return this._resolveOption(\"supportAllDayRow\");\n  }\n  get viewType() {\n    return this._resolveOption(\"viewType\");\n  }\n  get viewDirection() {\n    return this._resolveOption(\"viewDirection\");\n  }\n  get dateRange() {\n    return this._resolveOption(\"dateRange\");\n  }\n  get groupCount() {\n    return this._resolveOption(\"groupCount\");\n  }\n  get viewDataProvider() {\n    return this._resolveOption(\"viewDataProvider\");\n  }\n  get allDayPanelMode() {\n    return this._resolveOption(\"allDayPanelMode\");\n  }\n  _resolveOption(name) {\n    var result = this.options[name];\n    return \"function\" === typeof result ? result() : result;\n  }\n  _init() {\n    this.setDataAccessors(this.dataAccessors);\n  }\n  filter(preparedItems) {\n    var {\n      dateRange: dateRange\n    } = this;\n    var allDay;\n    if (!this.showAllDayPanel && this.supportAllDayRow) {\n      allDay = false;\n    }\n    return this.filterLoadedAppointments({\n      startDayHour: this.viewStartDayHour,\n      endDayHour: this.viewEndDayHour,\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour,\n      min: dateRange[0],\n      max: dateRange[1],\n      resources: this.loadedResources,\n      allDay: allDay,\n      supportMultiDayAppointments: isTimelineView(this.viewType),\n      firstDayOfWeek: this.firstDayOfWeek\n    }, preparedItems);\n  }\n  hasAllDayAppointments(filteredItems, preparedItems) {\n    var adapters = filteredItems.map(item => createAppointmentAdapter(item, this.dataAccessors, this.timeZoneCalculator));\n    var result = false;\n    each(adapters, (_, item) => {\n      if (getAppointmentTakesAllDay(item, this.viewStartDayHour, this.viewEndDayHour, this.allDayPanelMode)) {\n        result = true;\n        return false;\n      }\n    });\n    return result;\n  }\n  setDataAccessors(dataAccessors) {\n    this.dataAccessors = dataAccessors;\n  }\n  _createAllDayAppointmentFilter(filterOptions) {\n    var {\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour\n    } = filterOptions;\n    return [[appointment => getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode)]];\n  }\n  _createCombinedFilter(filterOptions) {\n    var min = new Date(filterOptions.min);\n    var max = new Date(filterOptions.max);\n    var {\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour,\n      resources: resources,\n      firstDayOfWeek: firstDayOfWeek,\n      checkIntersectViewport: checkIntersectViewport,\n      supportMultiDayAppointments: supportMultiDayAppointments\n    } = filterOptions;\n    var [trimMin, trimMax] = getDatesWithoutTime(min, max);\n    var useRecurrence = isDefined(this.dataAccessors.getter.recurrenceRule);\n    return [[appointment => {\n      var _a;\n      var appointmentVisible = null !== (_a = appointment.visible) && void 0 !== _a ? _a : true;\n      if (!appointmentVisible) {\n        return false;\n      }\n      var {\n        startDate: startDate,\n        endDate: endDate,\n        hasRecurrenceRule: hasRecurrenceRule\n      } = appointment;\n      if (!hasRecurrenceRule) {\n        if (!(endDate >= trimMin && startDate < trimMax || dateUtils.sameDate(endDate, trimMin) && dateUtils.sameDate(startDate, trimMin))) {\n          return false;\n        }\n      }\n      var appointmentTakesAllDay = getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode);\n      var appointmentTakesSeveralDays = getAppointmentTakesSeveralDays(appointment);\n      var isAllDay = appointment.allDay;\n      var isLongAppointment = appointmentTakesSeveralDays || appointmentTakesAllDay;\n      if ((null === resources || void 0 === resources ? void 0 : resources.length) && !this._filterAppointmentByResources(appointment.rawAppointment, resources)) {\n        return false;\n      }\n      if (appointmentTakesAllDay && false === filterOptions.allDay) {\n        return false;\n      }\n      if (hasRecurrenceRule) {\n        var recurrenceException = getRecurrenceException(appointment, this.timeZoneCalculator, this.timezone);\n        if (!this._filterAppointmentByRRule(_extends(_extends({}, appointment), {\n          recurrenceException: recurrenceException,\n          allDay: appointmentTakesAllDay\n        }), min, max, startDayHour, endDayHour, firstDayOfWeek)) {\n          return false;\n        }\n      }\n      if (!isAllDay && supportMultiDayAppointments && isLongAppointment) {\n        if (endDate < min && (!useRecurrence || useRecurrence && !hasRecurrenceRule)) {\n          return false;\n        }\n      }\n      if (isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\n        if (!compareDateWithStartDayHour(startDate, endDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)) {\n          return false;\n        }\n      }\n      if (isDefined(endDayHour)) {\n        if (!compareDateWithEndDayHour({\n          startDate: startDate,\n          endDate: endDate,\n          startDayHour: startDayHour,\n          endDayHour: endDayHour,\n          viewStartDayHour: viewStartDayHour,\n          viewEndDayHour: viewEndDayHour,\n          allDay: appointmentTakesAllDay,\n          severalDays: appointmentTakesSeveralDays,\n          min: min,\n          max: max,\n          checkIntersectViewport: checkIntersectViewport\n        })) {\n          return false;\n        }\n      }\n      if (!isAllDay && (!isLongAppointment || supportMultiDayAppointments)) {\n        if (endDate < min && useRecurrence && !hasRecurrenceRule) {\n          return false;\n        }\n      }\n      return true;\n    }]];\n  }\n  _createAppointmentFilter(filterOptions) {\n    return this._createCombinedFilter(filterOptions);\n  }\n  _filterAppointmentByResources(appointment, resources) {\n    var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\n      var resourceGetter = this.dataAccessors.resources.getter[resourceName];\n      var resource;\n      if (isFunction(resourceGetter)) {\n        resource = resourceGetter(appointment);\n      }\n      var appointmentResourceValues = wrapToArray(resource);\n      var resourceData = map(resources[resourceIndex].items, _ref => {\n        var {\n          id: id\n        } = _ref;\n        return id;\n      });\n      for (var i = 0; i < appointmentResourceValues.length; i++) {\n        if (hasResourceValue(resourceData, appointmentResourceValues[i])) {\n          return true;\n        }\n      }\n      return false;\n    };\n    var result = false;\n    for (var i = 0; i < resources.length; i++) {\n      var resourceName = resources[i].name;\n      result = checkAppointmentResourceValues(resourceName, i);\n      if (!result) {\n        return false;\n      }\n    }\n    return result;\n  }\n  _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\n    var {\n      recurrenceRule: recurrenceRule\n    } = appointment;\n    var {\n      recurrenceException: recurrenceException\n    } = appointment;\n    var {\n      allDay: allDay\n    } = appointment;\n    var result = true;\n    var appointmentStartDate = appointment.startDate;\n    var appointmentEndDate = appointment.endDate;\n    var recurrenceProcessor = getRecurrenceProcessor();\n    if (allDay || _appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\n      var [trimMin, trimMax] = getDatesWithoutTime(min, max);\n      min = trimMin;\n      max = new Date(trimMax.getTime() - toMs(\"minute\"));\n    }\n    if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = appointmentEndDate > min && appointmentStartDate <= max;\n    }\n    if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = recurrenceProcessor.hasRecurrence({\n        rule: recurrenceRule,\n        exception: recurrenceException,\n        start: appointmentStartDate,\n        end: appointmentEndDate,\n        min: min,\n        max: max,\n        firstDayOfWeek: firstDayOfWeek,\n        appointmentTimezoneOffset: this.timeZoneCalculator.getOriginStartDateOffsetInMs(appointmentStartDate, appointment.startDateTimeZone, false)\n      });\n    }\n    return result;\n  }\n  filterLoadedAppointments(filterOptions, preparedItems) {\n    var filteredItems = this.filterPreparedItems(filterOptions, preparedItems);\n    return filteredItems.map(_ref2 => {\n      var {\n        rawAppointment: rawAppointment\n      } = _ref2;\n      return rawAppointment;\n    });\n  }\n  filterPreparedItems(filterOptions, preparedItems) {\n    var combinedFilter = this._createAppointmentFilter(filterOptions);\n    return query(preparedItems).filter(combinedFilter).toArray();\n  }\n  filterAllDayAppointments(filterOptions, preparedItems) {\n    var combinedFilter = this._createAllDayAppointmentFilter(filterOptions);\n    return query(preparedItems).filter(combinedFilter).toArray().map(_ref3 => {\n      var {\n        rawAppointment: rawAppointment\n      } = _ref3;\n      return rawAppointment;\n    });\n  }\n}\nexport class AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\n  get strategyName() {\n    return FilterStrategies.virtual;\n  }\n  get resources() {\n    return this.options.resources;\n  }\n  filter(preparedItems) {\n    var hourMs = toMs(\"hour\");\n    var isCalculateStartAndEndDayHour = calculateIsDateAndTimeView(this.viewType);\n    var checkIntersectViewport = isCalculateStartAndEndDayHour && \"horizontal\" === this.viewDirection;\n    var isAllDayWorkspace = !this.supportAllDayRow;\n    var showAllDayAppointments = this.showAllDayPanel || isAllDayWorkspace;\n    var endViewDate = this.viewDataProvider.getLastViewDateByEndDayHour(this.viewEndDayHour);\n    var filterOptions = [];\n    var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\n    groupsInfo.forEach(item => {\n      var {\n        groupIndex: groupIndex\n      } = item;\n      var groupStartDate = item.startDate;\n      var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\n      var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\n      var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / hourMs : this.viewEndDayHour;\n      var resources = this._getPrerenderFilterResources(groupIndex);\n      var hasAllDayPanel = this.viewDataProvider.hasGroupAllDayPanel(groupIndex);\n      var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && hasAllDayPanel;\n      filterOptions.push({\n        isVirtualScrolling: true,\n        startDayHour: startDayHour,\n        endDayHour: endDayHour,\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour,\n        min: groupStartDate,\n        max: groupEndDate,\n        supportMultiDayAppointments: isTimelineView(this.viewType),\n        allDay: supportAllDayAppointment,\n        resources: resources,\n        firstDayOfWeek: this.firstDayOfWeek,\n        checkIntersectViewport: checkIntersectViewport\n      });\n    });\n    return this.filterLoadedAppointments({\n      filterOptions: filterOptions,\n      groupCount: this.groupCount\n    }, preparedItems);\n  }\n  filterPreparedItems(_ref4, preparedItems) {\n    var {\n      filterOptions: filterOptions,\n      groupCount: groupCount\n    } = _ref4;\n    var combinedFilters = [];\n    var itemsToFilter = preparedItems;\n    var needPreFilter = groupCount > 0;\n    if (needPreFilter) {\n      itemsToFilter = itemsToFilter.filter(_ref5 => {\n        var {\n          rawAppointment: rawAppointment\n        } = _ref5;\n        for (var i = 0; i < filterOptions.length; ++i) {\n          var {\n            resources: resources\n          } = filterOptions[i];\n          if (this._filterAppointmentByResources(rawAppointment, resources)) {\n            return true;\n          }\n        }\n      });\n    }\n    filterOptions.forEach(option => {\n      combinedFilters.length && combinedFilters.push(\"or\");\n      var filter = this._createAppointmentFilter(option);\n      combinedFilters.push(filter);\n    });\n    return query(itemsToFilter).filter(combinedFilters).toArray();\n  }\n  hasAllDayAppointments(adapters, preparedItems) {\n    return this.filterAllDayAppointments({\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour\n    }, preparedItems).length > 0;\n  }\n  _getPrerenderFilterResources(groupIndex) {\n    var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\n    return getResourcesDataByGroups(this.loadedResources, this.resources, [cellGroup]);\n  }\n}","map":{"version":3,"names":["_extends","wrapToArray","dateUtils","each","map","isDefined","isFunction","query","getAppointmentTakesAllDay","hasResourceValue","getDatesWithoutTime","isDateAndTimeView","calculateIsDateAndTimeView","isTimelineView","createAppointmentAdapter","getRecurrenceProcessor","getResourcesDataByGroups","_appointmentPartInInterval","compareDateWithEndDayHour","compareDateWithStartDayHour","getAppointmentTakesSeveralDays","getRecurrenceException","toMs","dateToMilliseconds","FilterStrategies","virtual","standard","AppointmentFilterBaseStrategy","constructor","options","dataAccessors","_init","strategyName","timeZoneCalculator","viewStartDayHour","startDayHour","viewEndDayHour","endDayHour","timezone","firstDayOfWeek","showAllDayPanel","loadedResources","_resolveOption","supportAllDayRow","viewType","viewDirection","dateRange","groupCount","viewDataProvider","allDayPanelMode","name","result","setDataAccessors","filter","preparedItems","allDay","filterLoadedAppointments","min","max","resources","supportMultiDayAppointments","hasAllDayAppointments","filteredItems","adapters","item","_","_createAllDayAppointmentFilter","filterOptions","appointment","_createCombinedFilter","Date","checkIntersectViewport","trimMin","trimMax","useRecurrence","getter","recurrenceRule","_a","appointmentVisible","visible","startDate","endDate","hasRecurrenceRule","sameDate","appointmentTakesAllDay","appointmentTakesSeveralDays","isAllDay","isLongAppointment","length","_filterAppointmentByResources","rawAppointment","recurrenceException","_filterAppointmentByRRule","isVirtualScrolling","severalDays","_createAppointmentFilter","checkAppointmentResourceValues","resourceName","resourceIndex","resourceGetter","resource","appointmentResourceValues","resourceData","items","_ref","id","i","appointmentStartDate","appointmentEndDate","recurrenceProcessor","getTime","isValidRecurrenceRule","hasRecurrence","rule","exception","start","end","appointmentTimezoneOffset","getOriginStartDateOffsetInMs","startDateTimeZone","filterPreparedItems","_ref2","combinedFilter","toArray","filterAllDayAppointments","_ref3","AppointmentFilterVirtualStrategy","hourMs","isCalculateStartAndEndDayHour","isAllDayWorkspace","showAllDayAppointments","endViewDate","getLastViewDateByEndDayHour","groupsInfo","getCompletedGroupsInfo","forEach","groupIndex","groupStartDate","groupEndDate","Math","getHours","getMinutes","_getPrerenderFilterResources","hasAllDayPanel","hasGroupAllDayPanel","supportAllDayAppointment","push","_ref4","combinedFilters","itemsToFilter","needPreFilter","_ref5","option","cellGroup","getCellsGroup"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/__internal/scheduler/appointments/data_provider/m_appointment_filter.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/scheduler/appointments/data_provider/m_appointment_filter.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    wrapToArray\r\n} from \"../../../../core/utils/array\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isFunction\r\n} from \"../../../../core/utils/type\";\r\nimport query from \"../../../../data/query\";\r\nimport {\r\n    getAppointmentTakesAllDay\r\n} from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\r\nimport {\r\n    hasResourceValue\r\n} from \"../../../../renovation/ui/scheduler/resources/hasResourceValue\";\r\nimport getDatesWithoutTime from \"../../../../renovation/ui/scheduler/utils/filtering/getDatesWithoutTime\";\r\nimport {\r\n    isDateAndTimeView as calculateIsDateAndTimeView,\r\n    isTimelineView\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../../../ui/scheduler/appointmentAdapter\";\r\nimport {\r\n    getRecurrenceProcessor\r\n} from \"../../../../ui/scheduler/recurrence\";\r\nimport {\r\n    getResourcesDataByGroups\r\n} from \"../../resources/m_utils\";\r\nimport {\r\n    _appointmentPartInInterval,\r\n    compareDateWithEndDayHour,\r\n    compareDateWithStartDayHour,\r\n    getAppointmentTakesSeveralDays,\r\n    getRecurrenceException\r\n} from \"./m_utils\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar FilterStrategies = {\r\n    virtual: \"virtual\",\r\n    standard: \"standard\"\r\n};\r\nexport class AppointmentFilterBaseStrategy {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.dataAccessors = this.options.dataAccessors;\r\n        this._init()\r\n    }\r\n    get strategyName() {\r\n        return FilterStrategies.standard\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.options.timeZoneCalculator\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.options.startDayHour\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.options.endDayHour\r\n    }\r\n    get timezone() {\r\n        return this.options.timezone\r\n    }\r\n    get firstDayOfWeek() {\r\n        return this.options.firstDayOfWeek\r\n    }\r\n    get showAllDayPanel() {\r\n        return this.options.showAllDayPanel\r\n    }\r\n    get loadedResources() {\r\n        return this._resolveOption(\"loadedResources\")\r\n    }\r\n    get supportAllDayRow() {\r\n        return this._resolveOption(\"supportAllDayRow\")\r\n    }\r\n    get viewType() {\r\n        return this._resolveOption(\"viewType\")\r\n    }\r\n    get viewDirection() {\r\n        return this._resolveOption(\"viewDirection\")\r\n    }\r\n    get dateRange() {\r\n        return this._resolveOption(\"dateRange\")\r\n    }\r\n    get groupCount() {\r\n        return this._resolveOption(\"groupCount\")\r\n    }\r\n    get viewDataProvider() {\r\n        return this._resolveOption(\"viewDataProvider\")\r\n    }\r\n    get allDayPanelMode() {\r\n        return this._resolveOption(\"allDayPanelMode\")\r\n    }\r\n    _resolveOption(name) {\r\n        var result = this.options[name];\r\n        return \"function\" === typeof result ? result() : result\r\n    }\r\n    _init() {\r\n        this.setDataAccessors(this.dataAccessors)\r\n    }\r\n    filter(preparedItems) {\r\n        var {\r\n            dateRange: dateRange\r\n        } = this;\r\n        var allDay;\r\n        if (!this.showAllDayPanel && this.supportAllDayRow) {\r\n            allDay = false\r\n        }\r\n        return this.filterLoadedAppointments({\r\n            startDayHour: this.viewStartDayHour,\r\n            endDayHour: this.viewEndDayHour,\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour,\r\n            min: dateRange[0],\r\n            max: dateRange[1],\r\n            resources: this.loadedResources,\r\n            allDay: allDay,\r\n            supportMultiDayAppointments: isTimelineView(this.viewType),\r\n            firstDayOfWeek: this.firstDayOfWeek\r\n        }, preparedItems)\r\n    }\r\n    hasAllDayAppointments(filteredItems, preparedItems) {\r\n        var adapters = filteredItems.map(item => createAppointmentAdapter(item, this.dataAccessors, this.timeZoneCalculator));\r\n        var result = false;\r\n        each(adapters, (_, item) => {\r\n            if (getAppointmentTakesAllDay(item, this.viewStartDayHour, this.viewEndDayHour, this.allDayPanelMode)) {\r\n                result = true;\r\n                return false\r\n            }\r\n        });\r\n        return result\r\n    }\r\n    setDataAccessors(dataAccessors) {\r\n        this.dataAccessors = dataAccessors\r\n    }\r\n    _createAllDayAppointmentFilter(filterOptions) {\r\n        var {\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour\r\n        } = filterOptions;\r\n        return [\r\n            [appointment => getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode)]\r\n        ]\r\n    }\r\n    _createCombinedFilter(filterOptions) {\r\n        var min = new Date(filterOptions.min);\r\n        var max = new Date(filterOptions.max);\r\n        var {\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour,\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour,\r\n            resources: resources,\r\n            firstDayOfWeek: firstDayOfWeek,\r\n            checkIntersectViewport: checkIntersectViewport,\r\n            supportMultiDayAppointments: supportMultiDayAppointments\r\n        } = filterOptions;\r\n        var [trimMin, trimMax] = getDatesWithoutTime(min, max);\r\n        var useRecurrence = isDefined(this.dataAccessors.getter.recurrenceRule);\r\n        return [\r\n            [appointment => {\r\n                var _a;\r\n                var appointmentVisible = null !== (_a = appointment.visible) && void 0 !== _a ? _a : true;\r\n                if (!appointmentVisible) {\r\n                    return false\r\n                }\r\n                var {\r\n                    startDate: startDate,\r\n                    endDate: endDate,\r\n                    hasRecurrenceRule: hasRecurrenceRule\r\n                } = appointment;\r\n                if (!hasRecurrenceRule) {\r\n                    if (!(endDate >= trimMin && startDate < trimMax || dateUtils.sameDate(endDate, trimMin) && dateUtils.sameDate(startDate, trimMin))) {\r\n                        return false\r\n                    }\r\n                }\r\n                var appointmentTakesAllDay = getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode);\r\n                var appointmentTakesSeveralDays = getAppointmentTakesSeveralDays(appointment);\r\n                var isAllDay = appointment.allDay;\r\n                var isLongAppointment = appointmentTakesSeveralDays || appointmentTakesAllDay;\r\n                if ((null === resources || void 0 === resources ? void 0 : resources.length) && !this._filterAppointmentByResources(appointment.rawAppointment, resources)) {\r\n                    return false\r\n                }\r\n                if (appointmentTakesAllDay && false === filterOptions.allDay) {\r\n                    return false\r\n                }\r\n                if (hasRecurrenceRule) {\r\n                    var recurrenceException = getRecurrenceException(appointment, this.timeZoneCalculator, this.timezone);\r\n                    if (!this._filterAppointmentByRRule(_extends(_extends({}, appointment), {\r\n                            recurrenceException: recurrenceException,\r\n                            allDay: appointmentTakesAllDay\r\n                        }), min, max, startDayHour, endDayHour, firstDayOfWeek)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (!isAllDay && supportMultiDayAppointments && isLongAppointment) {\r\n                    if (endDate < min && (!useRecurrence || useRecurrence && !hasRecurrenceRule)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\r\n                    if (!compareDateWithStartDayHour(startDate, endDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (isDefined(endDayHour)) {\r\n                    if (!compareDateWithEndDayHour({\r\n                            startDate: startDate,\r\n                            endDate: endDate,\r\n                            startDayHour: startDayHour,\r\n                            endDayHour: endDayHour,\r\n                            viewStartDayHour: viewStartDayHour,\r\n                            viewEndDayHour: viewEndDayHour,\r\n                            allDay: appointmentTakesAllDay,\r\n                            severalDays: appointmentTakesSeveralDays,\r\n                            min: min,\r\n                            max: max,\r\n                            checkIntersectViewport: checkIntersectViewport\r\n                        })) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (!isAllDay && (!isLongAppointment || supportMultiDayAppointments)) {\r\n                    if (endDate < min && useRecurrence && !hasRecurrenceRule) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }]\r\n        ]\r\n    }\r\n    _createAppointmentFilter(filterOptions) {\r\n        return this._createCombinedFilter(filterOptions)\r\n    }\r\n    _filterAppointmentByResources(appointment, resources) {\r\n        var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\r\n            var resourceGetter = this.dataAccessors.resources.getter[resourceName];\r\n            var resource;\r\n            if (isFunction(resourceGetter)) {\r\n                resource = resourceGetter(appointment)\r\n            }\r\n            var appointmentResourceValues = wrapToArray(resource);\r\n            var resourceData = map(resources[resourceIndex].items, _ref => {\r\n                var {\r\n                    id: id\r\n                } = _ref;\r\n                return id\r\n            });\r\n            for (var i = 0; i < appointmentResourceValues.length; i++) {\r\n                if (hasResourceValue(resourceData, appointmentResourceValues[i])) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        };\r\n        var result = false;\r\n        for (var i = 0; i < resources.length; i++) {\r\n            var resourceName = resources[i].name;\r\n            result = checkAppointmentResourceValues(resourceName, i);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\r\n        var {\r\n            recurrenceRule: recurrenceRule\r\n        } = appointment;\r\n        var {\r\n            recurrenceException: recurrenceException\r\n        } = appointment;\r\n        var {\r\n            allDay: allDay\r\n        } = appointment;\r\n        var result = true;\r\n        var appointmentStartDate = appointment.startDate;\r\n        var appointmentEndDate = appointment.endDate;\r\n        var recurrenceProcessor = getRecurrenceProcessor();\r\n        if (allDay || _appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\r\n            var [trimMin, trimMax] = getDatesWithoutTime(min, max);\r\n            min = trimMin;\r\n            max = new Date(trimMax.getTime() - toMs(\"minute\"))\r\n        }\r\n        if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = appointmentEndDate > min && appointmentStartDate <= max\r\n        }\r\n        if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = recurrenceProcessor.hasRecurrence({\r\n                rule: recurrenceRule,\r\n                exception: recurrenceException,\r\n                start: appointmentStartDate,\r\n                end: appointmentEndDate,\r\n                min: min,\r\n                max: max,\r\n                firstDayOfWeek: firstDayOfWeek,\r\n                appointmentTimezoneOffset: this.timeZoneCalculator.getOriginStartDateOffsetInMs(appointmentStartDate, appointment.startDateTimeZone, false)\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    filterLoadedAppointments(filterOptions, preparedItems) {\r\n        var filteredItems = this.filterPreparedItems(filterOptions, preparedItems);\r\n        return filteredItems.map(_ref2 => {\r\n            var {\r\n                rawAppointment: rawAppointment\r\n            } = _ref2;\r\n            return rawAppointment\r\n        })\r\n    }\r\n    filterPreparedItems(filterOptions, preparedItems) {\r\n        var combinedFilter = this._createAppointmentFilter(filterOptions);\r\n        return query(preparedItems).filter(combinedFilter).toArray()\r\n    }\r\n    filterAllDayAppointments(filterOptions, preparedItems) {\r\n        var combinedFilter = this._createAllDayAppointmentFilter(filterOptions);\r\n        return query(preparedItems).filter(combinedFilter).toArray().map(_ref3 => {\r\n            var {\r\n                rawAppointment: rawAppointment\r\n            } = _ref3;\r\n            return rawAppointment\r\n        })\r\n    }\r\n}\r\nexport class AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\r\n    get strategyName() {\r\n        return FilterStrategies.virtual\r\n    }\r\n    get resources() {\r\n        return this.options.resources\r\n    }\r\n    filter(preparedItems) {\r\n        var hourMs = toMs(\"hour\");\r\n        var isCalculateStartAndEndDayHour = calculateIsDateAndTimeView(this.viewType);\r\n        var checkIntersectViewport = isCalculateStartAndEndDayHour && \"horizontal\" === this.viewDirection;\r\n        var isAllDayWorkspace = !this.supportAllDayRow;\r\n        var showAllDayAppointments = this.showAllDayPanel || isAllDayWorkspace;\r\n        var endViewDate = this.viewDataProvider.getLastViewDateByEndDayHour(this.viewEndDayHour);\r\n        var filterOptions = [];\r\n        var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\r\n        groupsInfo.forEach(item => {\r\n            var {\r\n                groupIndex: groupIndex\r\n            } = item;\r\n            var groupStartDate = item.startDate;\r\n            var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\r\n            var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\r\n            var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / hourMs : this.viewEndDayHour;\r\n            var resources = this._getPrerenderFilterResources(groupIndex);\r\n            var hasAllDayPanel = this.viewDataProvider.hasGroupAllDayPanel(groupIndex);\r\n            var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && hasAllDayPanel;\r\n            filterOptions.push({\r\n                isVirtualScrolling: true,\r\n                startDayHour: startDayHour,\r\n                endDayHour: endDayHour,\r\n                viewStartDayHour: this.viewStartDayHour,\r\n                viewEndDayHour: this.viewEndDayHour,\r\n                min: groupStartDate,\r\n                max: groupEndDate,\r\n                supportMultiDayAppointments: isTimelineView(this.viewType),\r\n                allDay: supportAllDayAppointment,\r\n                resources: resources,\r\n                firstDayOfWeek: this.firstDayOfWeek,\r\n                checkIntersectViewport: checkIntersectViewport\r\n            })\r\n        });\r\n        return this.filterLoadedAppointments({\r\n            filterOptions: filterOptions,\r\n            groupCount: this.groupCount\r\n        }, preparedItems)\r\n    }\r\n    filterPreparedItems(_ref4, preparedItems) {\r\n        var {\r\n            filterOptions: filterOptions,\r\n            groupCount: groupCount\r\n        } = _ref4;\r\n        var combinedFilters = [];\r\n        var itemsToFilter = preparedItems;\r\n        var needPreFilter = groupCount > 0;\r\n        if (needPreFilter) {\r\n            itemsToFilter = itemsToFilter.filter(_ref5 => {\r\n                var {\r\n                    rawAppointment: rawAppointment\r\n                } = _ref5;\r\n                for (var i = 0; i < filterOptions.length; ++i) {\r\n                    var {\r\n                        resources: resources\r\n                    } = filterOptions[i];\r\n                    if (this._filterAppointmentByResources(rawAppointment, resources)) {\r\n                        return true\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        filterOptions.forEach(option => {\r\n            combinedFilters.length && combinedFilters.push(\"or\");\r\n            var filter = this._createAppointmentFilter(option);\r\n            combinedFilters.push(filter)\r\n        });\r\n        return query(itemsToFilter).filter(combinedFilters).toArray()\r\n    }\r\n    hasAllDayAppointments(adapters, preparedItems) {\r\n        return this.filterAllDayAppointments({\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour\r\n        }, preparedItems).length > 0\r\n    }\r\n    _getPrerenderFilterResources(groupIndex) {\r\n        var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\r\n        return getResourcesDataByGroups(this.loadedResources, this.resources, [cellGroup])\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}