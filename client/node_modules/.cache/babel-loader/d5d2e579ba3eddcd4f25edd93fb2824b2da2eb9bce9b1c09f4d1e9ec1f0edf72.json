{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/view_data_provider.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"groups\", \"groupOrientation\", \"groupByDate\", \"isAllDayPanelVisible\"];\nimport dateUtils from \"../../../../core/utils/date\";\nimport { getGroupPanelData } from \"../../../../renovation/ui/scheduler/view_model/group_panel/utils\";\nimport { isGroupingByDate, isHorizontalGroupingApplied, isVerticalGroupingApplied } from \"../../../../renovation/ui/scheduler/workspaces/utils\";\nimport { calculateIsGroupedAllDayPanel } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { DateHeaderDataGenerator } from \"./date_header_data_generator\";\nimport { GroupedDataMapProvider } from \"./grouped_data_map_provider\";\nimport { TimePanelDataGenerator } from \"./time_panel_data_generator\";\nimport { getViewDataGeneratorByViewType } from \"./utils\";\nimport timeZoneUtils from \"../../utils.timeZone\";\nexport default class ViewDataProvider {\n  constructor(viewType) {\n    this.viewDataGenerator = getViewDataGeneratorByViewType(viewType);\n    this.viewData = {};\n    this.completeViewDataMap = [];\n    this.completeDateHeaderMap = [];\n    this.viewDataMap = {};\n    this._groupedDataMapProvider = null;\n  }\n  get groupedDataMap() {\n    return this._groupedDataMapProvider.groupedDataMap;\n  }\n  get hiddenInterval() {\n    return this.viewDataGenerator.hiddenInterval;\n  }\n  isSkippedDate(date) {\n    return this.viewDataGenerator.isSkippedDate(date);\n  }\n  update(options, isGenerateNewViewData) {\n    this.viewDataGenerator = getViewDataGeneratorByViewType(options.viewType);\n    var viewDataGenerator = this.viewDataGenerator;\n    var dateHeaderDataGenerator = new DateHeaderDataGenerator(viewDataGenerator);\n    var timePanelDataGenerator = new TimePanelDataGenerator(viewDataGenerator);\n    var renderOptions = this._transformRenderOptions(options);\n    renderOptions.interval = this.viewDataGenerator.getInterval(renderOptions.hoursInterval);\n    this._options = renderOptions;\n    if (isGenerateNewViewData) {\n      this.completeViewDataMap = viewDataGenerator.getCompleteViewDataMap(renderOptions);\n      this.completeDateHeaderMap = dateHeaderDataGenerator.getCompleteDateHeaderMap(renderOptions, this.completeViewDataMap);\n      if (renderOptions.isGenerateTimePanelData) {\n        this.completeTimePanelMap = timePanelDataGenerator.getCompleteTimePanelMap(renderOptions, this.completeViewDataMap);\n      }\n    }\n    this.viewDataMap = viewDataGenerator.generateViewDataMap(this.completeViewDataMap, renderOptions);\n    this.updateViewData(renderOptions);\n    this._groupedDataMapProvider = new GroupedDataMapProvider(this.viewDataGenerator, this.viewDataMap, this.completeViewDataMap, {\n      isVerticalGrouping: renderOptions.isVerticalGrouping,\n      viewType: renderOptions.viewType\n    });\n    this.dateHeaderData = dateHeaderDataGenerator.generateDateHeaderData(this.completeDateHeaderMap, this.completeViewDataMap, renderOptions);\n    if (renderOptions.isGenerateTimePanelData) {\n      this.timePanelData = timePanelDataGenerator.generateTimePanelData(this.completeTimePanelMap, renderOptions);\n    }\n  }\n  createGroupedDataMapProvider() {\n    this._groupedDataMapProvider = new GroupedDataMapProvider(this.viewDataGenerator, this.viewDataMap, this.completeViewDataMap, {\n      isVerticalGrouping: this._options.isVerticalGrouping,\n      viewType: this._options.viewType\n    });\n  }\n  updateViewData(options) {\n    var renderOptions = this._transformRenderOptions(options);\n    this.viewDataMapWithSelection = this.viewDataGenerator.markSelectedAndFocusedCells(this.viewDataMap, renderOptions);\n    this.viewData = this.viewDataGenerator.getViewDataFromMap(this.completeViewDataMap, this.viewDataMapWithSelection, renderOptions);\n  }\n  _transformRenderOptions(renderOptions) {\n    var {\n        groups: groups,\n        groupOrientation: groupOrientation,\n        groupByDate: groupByDate,\n        isAllDayPanelVisible: isAllDayPanelVisible\n      } = renderOptions,\n      restOptions = _objectWithoutPropertiesLoose(renderOptions, _excluded);\n    return _extends({}, restOptions, {\n      startViewDate: this.viewDataGenerator._calculateStartViewDate(renderOptions),\n      isVerticalGrouping: isVerticalGroupingApplied(groups, groupOrientation),\n      isHorizontalGrouping: isHorizontalGroupingApplied(groups, groupOrientation),\n      isGroupedByDate: isGroupingByDate(groups, groupOrientation, groupByDate),\n      isGroupedAllDayPanel: calculateIsGroupedAllDayPanel(groups, groupOrientation, isAllDayPanelVisible),\n      groups: groups,\n      groupOrientation: groupOrientation,\n      isAllDayPanelVisible: isAllDayPanelVisible\n    });\n  }\n  getGroupPanelData(options) {\n    var renderOptions = this._transformRenderOptions(options);\n    if (renderOptions.groups.length > 0) {\n      var cellCount = this.getCellCount(renderOptions);\n      return getGroupPanelData(renderOptions.groups, cellCount, renderOptions.isGroupedByDate, renderOptions.isGroupedByDate ? 1 : cellCount);\n    }\n    return;\n  }\n  getGroupStartDate(groupIndex) {\n    return this._groupedDataMapProvider.getGroupStartDate(groupIndex);\n  }\n  getGroupEndDate(groupIndex) {\n    return this._groupedDataMapProvider.getGroupEndDate(groupIndex);\n  }\n  findGroupCellStartDate(groupIndex, startDate, endDate) {\n    var isFindByDate = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;\n    return this._groupedDataMapProvider.findGroupCellStartDate(groupIndex, startDate, endDate, isFindByDate);\n  }\n  findAllDayGroupCellStartDate(groupIndex, startDate) {\n    return this._groupedDataMapProvider.findAllDayGroupCellStartDate(groupIndex, startDate);\n  }\n  findCellPositionInMap(cellInfo) {\n    return this._groupedDataMapProvider.findCellPositionInMap(cellInfo);\n  }\n  hasAllDayPanel() {\n    var {\n      viewData: viewData\n    } = this.viewDataMap;\n    var {\n      allDayPanel: allDayPanel\n    } = viewData.groupedData[0];\n    return !viewData.isGroupedAllDayPanel && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0;\n  }\n  getCellsGroup(groupIndex) {\n    return this._groupedDataMapProvider.getCellsGroup(groupIndex);\n  }\n  getCompletedGroupsInfo() {\n    return this._groupedDataMapProvider.getCompletedGroupsInfo();\n  }\n  getGroupIndices() {\n    return this._groupedDataMapProvider.getGroupIndices();\n  }\n  getLastGroupCellPosition(groupIndex) {\n    return this._groupedDataMapProvider.getLastGroupCellPosition(groupIndex);\n  }\n  getRowCountInGroup(groupIndex) {\n    return this._groupedDataMapProvider.getRowCountInGroup(groupIndex);\n  }\n  getCellData(rowIndex, columnIndex, isAllDay, rtlEnabled) {\n    var row = isAllDay && !this._options.isVerticalGrouping ? this.viewDataMap.allDayPanelMap : this.viewDataMap.dateTableMap[rowIndex];\n    var actualColumnIndex = !rtlEnabled ? columnIndex : row.length - 1 - columnIndex;\n    var {\n      cellData: cellData\n    } = row[actualColumnIndex];\n    return cellData;\n  }\n  getCellsByGroupIndexAndAllDay(groupIndex, allDay) {\n    var rowsPerGroup = this._getRowCountWithAllDayRows();\n    var isShowAllDayPanel = this._options.isAllDayPanelVisible;\n    var firstRowInGroup = this._options.isVerticalGrouping ? groupIndex * rowsPerGroup : 0;\n    var lastRowInGroup = this._options.isVerticalGrouping ? (groupIndex + 1) * rowsPerGroup - 1 : rowsPerGroup;\n    var correctedFirstRow = isShowAllDayPanel && !allDay ? firstRowInGroup + 1 : firstRowInGroup;\n    var correctedLastRow = allDay ? correctedFirstRow : lastRowInGroup;\n    return this.completeViewDataMap.slice(correctedFirstRow, correctedLastRow + 1).map(row => row.filter(_ref => {\n      var {\n        groupIndex: currentGroupIndex\n      } = _ref;\n      return groupIndex === currentGroupIndex;\n    }));\n  }\n  getCellCountWithGroup(groupIndex) {\n    var rowIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    var {\n      dateTableGroupedMap: dateTableGroupedMap\n    } = this.groupedDataMap;\n    return dateTableGroupedMap.filter((_, index) => index <= groupIndex).reduce((previous, row) => previous + row[rowIndex].length, 0);\n  }\n  hasGroupAllDayPanel(groupIndex) {\n    var _this$groupedDataMap$2;\n    if (this._options.isVerticalGrouping) {\n      var _this$groupedDataMap$;\n      return !!(null !== (_this$groupedDataMap$ = this.groupedDataMap.dateTableGroupedMap[groupIndex]) && void 0 !== _this$groupedDataMap$ && _this$groupedDataMap$[0][0].cellData.allDay);\n    }\n    return (null === (_this$groupedDataMap$2 = this.groupedDataMap.allDayPanelGroupedMap[groupIndex]) || void 0 === _this$groupedDataMap$2 ? void 0 : _this$groupedDataMap$2.length) > 0;\n  }\n  isGroupIntersectDateInterval(groupIndex, startDate, endDate) {\n    var groupStartDate = this.getGroupStartDate(groupIndex);\n    var groupEndDate = this.getGroupEndDate(groupIndex);\n    return startDate < groupEndDate && endDate > groupStartDate;\n  }\n  findGlobalCellPosition(date) {\n    var groupIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var {\n      completeViewDataMap: completeViewDataMap\n    } = this;\n    var showAllDayPanel = this._options.isAllDayPanelVisible;\n    for (var rowIndex = 0; rowIndex < completeViewDataMap.length; rowIndex += 1) {\n      var currentRow = completeViewDataMap[rowIndex];\n      for (var columnIndex = 0; columnIndex < currentRow.length; columnIndex += 1) {\n        var cellData = currentRow[columnIndex];\n        var {\n          startDate: currentStartDate,\n          endDate: currentEndDate,\n          groupIndex: currentGroupIndex,\n          allDay: currentAllDay\n        } = cellData;\n        if (groupIndex === currentGroupIndex && allDay === !!currentAllDay && this._compareDatesAndAllDay(date, currentStartDate, currentEndDate, allDay)) {\n          return {\n            position: {\n              columnIndex: columnIndex,\n              rowIndex: showAllDayPanel && !this._options.isVerticalGrouping ? rowIndex - 1 : rowIndex\n            },\n            cellData: cellData\n          };\n        }\n      }\n    }\n  }\n  _compareDatesAndAllDay(date, cellStartDate, cellEndDate, allDay) {\n    var time = date.getTime();\n    var trimmedTime = dateUtils.trimTime(date).getTime();\n    var cellStartTime = cellStartDate.getTime();\n    var cellEndTime = cellEndDate.getTime();\n    return !allDay && time >= cellStartTime && time < cellEndTime || allDay && trimmedTime === cellStartTime;\n  }\n  getSkippedDaysCount(groupIndex, startDate, endDate, daysCount) {\n    var {\n      dateTableGroupedMap: dateTableGroupedMap\n    } = this._groupedDataMapProvider.groupedDataMap;\n    var groupedData = dateTableGroupedMap[groupIndex];\n    var includedDays = 0;\n    for (var rowIndex = 0; rowIndex < groupedData.length; rowIndex += 1) {\n      for (var columnIndex = 0; columnIndex < groupedData[rowIndex].length; columnIndex += 1) {\n        var cell = groupedData[rowIndex][columnIndex].cellData;\n        if (startDate.getTime() < cell.endDate.getTime() && endDate.getTime() > cell.startDate.getTime()) {\n          includedDays += 1;\n        }\n      }\n    }\n    var lastCell = groupedData[groupedData.length - 1][groupedData[0].length - 1].cellData;\n    var lastCellStart = dateUtils.trimTime(lastCell.startDate);\n    var daysAfterView = Math.floor((endDate.getTime() - lastCellStart.getTime()) / dateUtils.dateToMilliseconds(\"day\"));\n    var deltaDays = daysAfterView > 0 ? daysAfterView : 0;\n    return daysCount - includedDays - deltaDays;\n  }\n  getColumnsCount() {\n    var {\n      dateTableMap: dateTableMap\n    } = this.viewDataMap;\n    return dateTableMap ? dateTableMap[0].length : 0;\n  }\n  getViewEdgeIndices(isAllDayPanel) {\n    if (isAllDayPanel) {\n      return {\n        firstColumnIndex: 0,\n        lastColumnIndex: this.viewDataMap.allDayPanelMap.length - 1,\n        firstRowIndex: 0,\n        lastRowIndex: 0\n      };\n    }\n    return {\n      firstColumnIndex: 0,\n      lastColumnIndex: this.viewDataMap.dateTableMap[0].length - 1,\n      firstRowIndex: 0,\n      lastRowIndex: this.viewDataMap.dateTableMap.length - 1\n    };\n  }\n  getGroupEdgeIndices(groupIndex, isAllDay) {\n    var groupedDataMap = this.groupedDataMap.dateTableGroupedMap[groupIndex];\n    var cellsCount = groupedDataMap[0].length;\n    var rowsCount = groupedDataMap.length;\n    var firstColumnIndex = groupedDataMap[0][0].position.columnIndex;\n    var lastColumnIndex = groupedDataMap[0][cellsCount - 1].position.columnIndex;\n    if (isAllDay) {\n      return {\n        firstColumnIndex: firstColumnIndex,\n        lastColumnIndex: lastColumnIndex,\n        firstRowIndex: 0,\n        lastRowIndex: 0\n      };\n    }\n    return {\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex,\n      firstRowIndex: groupedDataMap[0][0].position.rowIndex,\n      lastRowIndex: groupedDataMap[rowsCount - 1][0].position.rowIndex\n    };\n  }\n  isSameCell(firstCellData, secondCellData) {\n    var {\n      startDate: firstStartDate,\n      groupIndex: firstGroupIndex,\n      allDay: firstAllDay,\n      index: firstIndex\n    } = firstCellData;\n    var {\n      startDate: secondStartDate,\n      groupIndex: secondGroupIndex,\n      allDay: secondAllDay,\n      index: secondIndex\n    } = secondCellData;\n    return firstStartDate.getTime() === secondStartDate.getTime() && firstGroupIndex === secondGroupIndex && firstAllDay === secondAllDay && firstIndex === secondIndex;\n  }\n  getLastViewDate() {\n    var completeViewDataMap = this.completeViewDataMap;\n    var rowsCount = completeViewDataMap.length - 1;\n    return completeViewDataMap[rowsCount][completeViewDataMap[rowsCount].length - 1].endDate;\n  }\n  getStartViewDate() {\n    return this._options.startViewDate;\n  }\n  getIntervalDuration(intervalCount) {\n    return this.viewDataGenerator._getIntervalDuration(intervalCount);\n  }\n  getLastCellEndDate() {\n    return new Date(this.getLastViewDate().getTime() - dateUtils.dateToMilliseconds(\"minute\"));\n  }\n  getLastViewDateByEndDayHour(endDayHour) {\n    var lastCellEndDate = this.getLastCellEndDate();\n    var endTime = dateUtils.dateTimeFromDecimal(endDayHour);\n    var endDateOfLastViewCell = new Date(lastCellEndDate.setHours(endTime.hours, endTime.minutes));\n    return this._adjustEndDateByDaylightDiff(lastCellEndDate, endDateOfLastViewCell);\n  }\n  _adjustEndDateByDaylightDiff(startDate, endDate) {\n    var daylightDiff = timeZoneUtils.getDaylightOffsetInMs(startDate, endDate);\n    var endDateOfLastViewCell = new Date(endDate.getTime() - daylightDiff);\n    return new Date(endDateOfLastViewCell.getTime() - dateUtils.dateToMilliseconds(\"minute\"));\n  }\n  getCellCountInDay(startDayHour, endDayHour, hoursInterval) {\n    return this.viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n  }\n  getCellCount(options) {\n    return this.viewDataGenerator.getCellCount(options);\n  }\n  getRowCount(options) {\n    return this.viewDataGenerator.getRowCount(options);\n  }\n  getVisibleDayDuration(startDayHour, endDayHour, hoursInterval) {\n    return this.viewDataGenerator.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval);\n  }\n  _getRowCountWithAllDayRows() {\n    var allDayRowCount = this._options.isAllDayPanelVisible ? 1 : 0;\n    return this.getRowCount(this._options) + allDayRowCount;\n  }\n  getFirstDayOfWeek(firstDayOfWeekOption) {\n    return this.viewDataGenerator.getFirstDayOfWeek(firstDayOfWeekOption);\n  }\n  setViewOptions(options) {\n    this._options = this._transformRenderOptions(options);\n  }\n  getViewOptions() {\n    return this._options;\n  }\n  getViewPortGroupCount() {\n    var {\n      dateTableGroupedMap: dateTableGroupedMap\n    } = this.groupedDataMap;\n    return (null === dateTableGroupedMap || void 0 === dateTableGroupedMap ? void 0 : dateTableGroupedMap.length) || 0;\n  }\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","dateUtils","getGroupPanelData","isGroupingByDate","isHorizontalGroupingApplied","isVerticalGroupingApplied","calculateIsGroupedAllDayPanel","DateHeaderDataGenerator","GroupedDataMapProvider","TimePanelDataGenerator","getViewDataGeneratorByViewType","timeZoneUtils","ViewDataProvider","constructor","viewType","viewDataGenerator","viewData","completeViewDataMap","completeDateHeaderMap","viewDataMap","_groupedDataMapProvider","groupedDataMap","hiddenInterval","isSkippedDate","date","update","options","isGenerateNewViewData","dateHeaderDataGenerator","timePanelDataGenerator","renderOptions","_transformRenderOptions","interval","getInterval","hoursInterval","_options","getCompleteViewDataMap","getCompleteDateHeaderMap","isGenerateTimePanelData","completeTimePanelMap","getCompleteTimePanelMap","generateViewDataMap","updateViewData","isVerticalGrouping","dateHeaderData","generateDateHeaderData","timePanelData","generateTimePanelData","createGroupedDataMapProvider","viewDataMapWithSelection","markSelectedAndFocusedCells","getViewDataFromMap","groups","groupOrientation","groupByDate","isAllDayPanelVisible","restOptions","startViewDate","_calculateStartViewDate","isHorizontalGrouping","isGroupedByDate","isGroupedAllDayPanel","length","cellCount","getCellCount","getGroupStartDate","groupIndex","getGroupEndDate","findGroupCellStartDate","startDate","endDate","isFindByDate","arguments","findAllDayGroupCellStartDate","findCellPositionInMap","cellInfo","hasAllDayPanel","allDayPanel","groupedData","getCellsGroup","getCompletedGroupsInfo","getGroupIndices","getLastGroupCellPosition","getRowCountInGroup","getCellData","rowIndex","columnIndex","isAllDay","rtlEnabled","row","allDayPanelMap","dateTableMap","actualColumnIndex","cellData","getCellsByGroupIndexAndAllDay","allDay","rowsPerGroup","_getRowCountWithAllDayRows","isShowAllDayPanel","firstRowInGroup","lastRowInGroup","correctedFirstRow","correctedLastRow","slice","map","filter","_ref","currentGroupIndex","getCellCountWithGroup","dateTableGroupedMap","_","index","reduce","previous","hasGroupAllDayPanel","_this$groupedDataMap$2","_this$groupedDataMap$","allDayPanelGroupedMap","isGroupIntersectDateInterval","groupStartDate","groupEndDate","findGlobalCellPosition","showAllDayPanel","currentRow","currentStartDate","currentEndDate","currentAllDay","_compareDatesAndAllDay","position","cellStartDate","cellEndDate","time","getTime","trimmedTime","trimTime","cellStartTime","cellEndTime","getSkippedDaysCount","daysCount","includedDays","cell","lastCell","lastCellStart","daysAfterView","Math","floor","dateToMilliseconds","deltaDays","getColumnsCount","getViewEdgeIndices","isAllDayPanel","firstColumnIndex","lastColumnIndex","firstRowIndex","lastRowIndex","getGroupEdgeIndices","cellsCount","rowsCount","isSameCell","firstCellData","secondCellData","firstStartDate","firstGroupIndex","firstAllDay","firstIndex","secondStartDate","secondGroupIndex","secondAllDay","secondIndex","getLastViewDate","getStartViewDate","getIntervalDuration","intervalCount","_getIntervalDuration","getLastCellEndDate","Date","getLastViewDateByEndDayHour","endDayHour","lastCellEndDate","endTime","dateTimeFromDecimal","endDateOfLastViewCell","setHours","hours","minutes","_adjustEndDateByDaylightDiff","daylightDiff","getDaylightOffsetInMs","getCellCountInDay","startDayHour","getRowCount","getVisibleDayDuration","allDayRowCount","getFirstDayOfWeek","firstDayOfWeekOption","setViewOptions","getViewOptions","getViewPortGroupCount"],"sources":["C:/Users/Michal Abargel/Desktop/FULLSTACK_PROJECTS/PrivateLessones/F(x)/client/gui/node_modules/devextreme/esm/ui/scheduler/workspaces/view_model/view_data_provider.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/view_data_provider.js)\r\n * Version: 23.1.5\r\n * Build date: Wed Aug 30 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nvar _excluded = [\"groups\", \"groupOrientation\", \"groupByDate\", \"isAllDayPanelVisible\"];\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    getGroupPanelData\r\n} from \"../../../../renovation/ui/scheduler/view_model/group_panel/utils\";\r\nimport {\r\n    isGroupingByDate,\r\n    isHorizontalGroupingApplied,\r\n    isVerticalGroupingApplied\r\n} from \"../../../../renovation/ui/scheduler/workspaces/utils\";\r\nimport {\r\n    calculateIsGroupedAllDayPanel\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    DateHeaderDataGenerator\r\n} from \"./date_header_data_generator\";\r\nimport {\r\n    GroupedDataMapProvider\r\n} from \"./grouped_data_map_provider\";\r\nimport {\r\n    TimePanelDataGenerator\r\n} from \"./time_panel_data_generator\";\r\nimport {\r\n    getViewDataGeneratorByViewType\r\n} from \"./utils\";\r\nimport timeZoneUtils from \"../../utils.timeZone\";\r\nexport default class ViewDataProvider {\r\n    constructor(viewType) {\r\n        this.viewDataGenerator = getViewDataGeneratorByViewType(viewType);\r\n        this.viewData = {};\r\n        this.completeViewDataMap = [];\r\n        this.completeDateHeaderMap = [];\r\n        this.viewDataMap = {};\r\n        this._groupedDataMapProvider = null\r\n    }\r\n    get groupedDataMap() {\r\n        return this._groupedDataMapProvider.groupedDataMap\r\n    }\r\n    get hiddenInterval() {\r\n        return this.viewDataGenerator.hiddenInterval\r\n    }\r\n    isSkippedDate(date) {\r\n        return this.viewDataGenerator.isSkippedDate(date)\r\n    }\r\n    update(options, isGenerateNewViewData) {\r\n        this.viewDataGenerator = getViewDataGeneratorByViewType(options.viewType);\r\n        var viewDataGenerator = this.viewDataGenerator;\r\n        var dateHeaderDataGenerator = new DateHeaderDataGenerator(viewDataGenerator);\r\n        var timePanelDataGenerator = new TimePanelDataGenerator(viewDataGenerator);\r\n        var renderOptions = this._transformRenderOptions(options);\r\n        renderOptions.interval = this.viewDataGenerator.getInterval(renderOptions.hoursInterval);\r\n        this._options = renderOptions;\r\n        if (isGenerateNewViewData) {\r\n            this.completeViewDataMap = viewDataGenerator.getCompleteViewDataMap(renderOptions);\r\n            this.completeDateHeaderMap = dateHeaderDataGenerator.getCompleteDateHeaderMap(renderOptions, this.completeViewDataMap);\r\n            if (renderOptions.isGenerateTimePanelData) {\r\n                this.completeTimePanelMap = timePanelDataGenerator.getCompleteTimePanelMap(renderOptions, this.completeViewDataMap)\r\n            }\r\n        }\r\n        this.viewDataMap = viewDataGenerator.generateViewDataMap(this.completeViewDataMap, renderOptions);\r\n        this.updateViewData(renderOptions);\r\n        this._groupedDataMapProvider = new GroupedDataMapProvider(this.viewDataGenerator, this.viewDataMap, this.completeViewDataMap, {\r\n            isVerticalGrouping: renderOptions.isVerticalGrouping,\r\n            viewType: renderOptions.viewType\r\n        });\r\n        this.dateHeaderData = dateHeaderDataGenerator.generateDateHeaderData(this.completeDateHeaderMap, this.completeViewDataMap, renderOptions);\r\n        if (renderOptions.isGenerateTimePanelData) {\r\n            this.timePanelData = timePanelDataGenerator.generateTimePanelData(this.completeTimePanelMap, renderOptions)\r\n        }\r\n    }\r\n    createGroupedDataMapProvider() {\r\n        this._groupedDataMapProvider = new GroupedDataMapProvider(this.viewDataGenerator, this.viewDataMap, this.completeViewDataMap, {\r\n            isVerticalGrouping: this._options.isVerticalGrouping,\r\n            viewType: this._options.viewType\r\n        })\r\n    }\r\n    updateViewData(options) {\r\n        var renderOptions = this._transformRenderOptions(options);\r\n        this.viewDataMapWithSelection = this.viewDataGenerator.markSelectedAndFocusedCells(this.viewDataMap, renderOptions);\r\n        this.viewData = this.viewDataGenerator.getViewDataFromMap(this.completeViewDataMap, this.viewDataMapWithSelection, renderOptions)\r\n    }\r\n    _transformRenderOptions(renderOptions) {\r\n        var {\r\n            groups: groups,\r\n            groupOrientation: groupOrientation,\r\n            groupByDate: groupByDate,\r\n            isAllDayPanelVisible: isAllDayPanelVisible\r\n        } = renderOptions, restOptions = _objectWithoutPropertiesLoose(renderOptions, _excluded);\r\n        return _extends({}, restOptions, {\r\n            startViewDate: this.viewDataGenerator._calculateStartViewDate(renderOptions),\r\n            isVerticalGrouping: isVerticalGroupingApplied(groups, groupOrientation),\r\n            isHorizontalGrouping: isHorizontalGroupingApplied(groups, groupOrientation),\r\n            isGroupedByDate: isGroupingByDate(groups, groupOrientation, groupByDate),\r\n            isGroupedAllDayPanel: calculateIsGroupedAllDayPanel(groups, groupOrientation, isAllDayPanelVisible),\r\n            groups: groups,\r\n            groupOrientation: groupOrientation,\r\n            isAllDayPanelVisible: isAllDayPanelVisible\r\n        })\r\n    }\r\n    getGroupPanelData(options) {\r\n        var renderOptions = this._transformRenderOptions(options);\r\n        if (renderOptions.groups.length > 0) {\r\n            var cellCount = this.getCellCount(renderOptions);\r\n            return getGroupPanelData(renderOptions.groups, cellCount, renderOptions.isGroupedByDate, renderOptions.isGroupedByDate ? 1 : cellCount)\r\n        }\r\n        return\r\n    }\r\n    getGroupStartDate(groupIndex) {\r\n        return this._groupedDataMapProvider.getGroupStartDate(groupIndex)\r\n    }\r\n    getGroupEndDate(groupIndex) {\r\n        return this._groupedDataMapProvider.getGroupEndDate(groupIndex)\r\n    }\r\n    findGroupCellStartDate(groupIndex, startDate, endDate) {\r\n        var isFindByDate = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;\r\n        return this._groupedDataMapProvider.findGroupCellStartDate(groupIndex, startDate, endDate, isFindByDate)\r\n    }\r\n    findAllDayGroupCellStartDate(groupIndex, startDate) {\r\n        return this._groupedDataMapProvider.findAllDayGroupCellStartDate(groupIndex, startDate)\r\n    }\r\n    findCellPositionInMap(cellInfo) {\r\n        return this._groupedDataMapProvider.findCellPositionInMap(cellInfo)\r\n    }\r\n    hasAllDayPanel() {\r\n        var {\r\n            viewData: viewData\r\n        } = this.viewDataMap;\r\n        var {\r\n            allDayPanel: allDayPanel\r\n        } = viewData.groupedData[0];\r\n        return !viewData.isGroupedAllDayPanel && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0\r\n    }\r\n    getCellsGroup(groupIndex) {\r\n        return this._groupedDataMapProvider.getCellsGroup(groupIndex)\r\n    }\r\n    getCompletedGroupsInfo() {\r\n        return this._groupedDataMapProvider.getCompletedGroupsInfo()\r\n    }\r\n    getGroupIndices() {\r\n        return this._groupedDataMapProvider.getGroupIndices()\r\n    }\r\n    getLastGroupCellPosition(groupIndex) {\r\n        return this._groupedDataMapProvider.getLastGroupCellPosition(groupIndex)\r\n    }\r\n    getRowCountInGroup(groupIndex) {\r\n        return this._groupedDataMapProvider.getRowCountInGroup(groupIndex)\r\n    }\r\n    getCellData(rowIndex, columnIndex, isAllDay, rtlEnabled) {\r\n        var row = isAllDay && !this._options.isVerticalGrouping ? this.viewDataMap.allDayPanelMap : this.viewDataMap.dateTableMap[rowIndex];\r\n        var actualColumnIndex = !rtlEnabled ? columnIndex : row.length - 1 - columnIndex;\r\n        var {\r\n            cellData: cellData\r\n        } = row[actualColumnIndex];\r\n        return cellData\r\n    }\r\n    getCellsByGroupIndexAndAllDay(groupIndex, allDay) {\r\n        var rowsPerGroup = this._getRowCountWithAllDayRows();\r\n        var isShowAllDayPanel = this._options.isAllDayPanelVisible;\r\n        var firstRowInGroup = this._options.isVerticalGrouping ? groupIndex * rowsPerGroup : 0;\r\n        var lastRowInGroup = this._options.isVerticalGrouping ? (groupIndex + 1) * rowsPerGroup - 1 : rowsPerGroup;\r\n        var correctedFirstRow = isShowAllDayPanel && !allDay ? firstRowInGroup + 1 : firstRowInGroup;\r\n        var correctedLastRow = allDay ? correctedFirstRow : lastRowInGroup;\r\n        return this.completeViewDataMap.slice(correctedFirstRow, correctedLastRow + 1).map(row => row.filter(_ref => {\r\n            var {\r\n                groupIndex: currentGroupIndex\r\n            } = _ref;\r\n            return groupIndex === currentGroupIndex\r\n        }))\r\n    }\r\n    getCellCountWithGroup(groupIndex) {\r\n        var rowIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n        var {\r\n            dateTableGroupedMap: dateTableGroupedMap\r\n        } = this.groupedDataMap;\r\n        return dateTableGroupedMap.filter((_, index) => index <= groupIndex).reduce((previous, row) => previous + row[rowIndex].length, 0)\r\n    }\r\n    hasGroupAllDayPanel(groupIndex) {\r\n        var _this$groupedDataMap$2;\r\n        if (this._options.isVerticalGrouping) {\r\n            var _this$groupedDataMap$;\r\n            return !!(null !== (_this$groupedDataMap$ = this.groupedDataMap.dateTableGroupedMap[groupIndex]) && void 0 !== _this$groupedDataMap$ && _this$groupedDataMap$[0][0].cellData.allDay)\r\n        }\r\n        return (null === (_this$groupedDataMap$2 = this.groupedDataMap.allDayPanelGroupedMap[groupIndex]) || void 0 === _this$groupedDataMap$2 ? void 0 : _this$groupedDataMap$2.length) > 0\r\n    }\r\n    isGroupIntersectDateInterval(groupIndex, startDate, endDate) {\r\n        var groupStartDate = this.getGroupStartDate(groupIndex);\r\n        var groupEndDate = this.getGroupEndDate(groupIndex);\r\n        return startDate < groupEndDate && endDate > groupStartDate\r\n    }\r\n    findGlobalCellPosition(date) {\r\n        var groupIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var {\r\n            completeViewDataMap: completeViewDataMap\r\n        } = this;\r\n        var showAllDayPanel = this._options.isAllDayPanelVisible;\r\n        for (var rowIndex = 0; rowIndex < completeViewDataMap.length; rowIndex += 1) {\r\n            var currentRow = completeViewDataMap[rowIndex];\r\n            for (var columnIndex = 0; columnIndex < currentRow.length; columnIndex += 1) {\r\n                var cellData = currentRow[columnIndex];\r\n                var {\r\n                    startDate: currentStartDate,\r\n                    endDate: currentEndDate,\r\n                    groupIndex: currentGroupIndex,\r\n                    allDay: currentAllDay\r\n                } = cellData;\r\n                if (groupIndex === currentGroupIndex && allDay === !!currentAllDay && this._compareDatesAndAllDay(date, currentStartDate, currentEndDate, allDay)) {\r\n                    return {\r\n                        position: {\r\n                            columnIndex: columnIndex,\r\n                            rowIndex: showAllDayPanel && !this._options.isVerticalGrouping ? rowIndex - 1 : rowIndex\r\n                        },\r\n                        cellData: cellData\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _compareDatesAndAllDay(date, cellStartDate, cellEndDate, allDay) {\r\n        var time = date.getTime();\r\n        var trimmedTime = dateUtils.trimTime(date).getTime();\r\n        var cellStartTime = cellStartDate.getTime();\r\n        var cellEndTime = cellEndDate.getTime();\r\n        return !allDay && time >= cellStartTime && time < cellEndTime || allDay && trimmedTime === cellStartTime\r\n    }\r\n    getSkippedDaysCount(groupIndex, startDate, endDate, daysCount) {\r\n        var {\r\n            dateTableGroupedMap: dateTableGroupedMap\r\n        } = this._groupedDataMapProvider.groupedDataMap;\r\n        var groupedData = dateTableGroupedMap[groupIndex];\r\n        var includedDays = 0;\r\n        for (var rowIndex = 0; rowIndex < groupedData.length; rowIndex += 1) {\r\n            for (var columnIndex = 0; columnIndex < groupedData[rowIndex].length; columnIndex += 1) {\r\n                var cell = groupedData[rowIndex][columnIndex].cellData;\r\n                if (startDate.getTime() < cell.endDate.getTime() && endDate.getTime() > cell.startDate.getTime()) {\r\n                    includedDays += 1\r\n                }\r\n            }\r\n        }\r\n        var lastCell = groupedData[groupedData.length - 1][groupedData[0].length - 1].cellData;\r\n        var lastCellStart = dateUtils.trimTime(lastCell.startDate);\r\n        var daysAfterView = Math.floor((endDate.getTime() - lastCellStart.getTime()) / dateUtils.dateToMilliseconds(\"day\"));\r\n        var deltaDays = daysAfterView > 0 ? daysAfterView : 0;\r\n        return daysCount - includedDays - deltaDays\r\n    }\r\n    getColumnsCount() {\r\n        var {\r\n            dateTableMap: dateTableMap\r\n        } = this.viewDataMap;\r\n        return dateTableMap ? dateTableMap[0].length : 0\r\n    }\r\n    getViewEdgeIndices(isAllDayPanel) {\r\n        if (isAllDayPanel) {\r\n            return {\r\n                firstColumnIndex: 0,\r\n                lastColumnIndex: this.viewDataMap.allDayPanelMap.length - 1,\r\n                firstRowIndex: 0,\r\n                lastRowIndex: 0\r\n            }\r\n        }\r\n        return {\r\n            firstColumnIndex: 0,\r\n            lastColumnIndex: this.viewDataMap.dateTableMap[0].length - 1,\r\n            firstRowIndex: 0,\r\n            lastRowIndex: this.viewDataMap.dateTableMap.length - 1\r\n        }\r\n    }\r\n    getGroupEdgeIndices(groupIndex, isAllDay) {\r\n        var groupedDataMap = this.groupedDataMap.dateTableGroupedMap[groupIndex];\r\n        var cellsCount = groupedDataMap[0].length;\r\n        var rowsCount = groupedDataMap.length;\r\n        var firstColumnIndex = groupedDataMap[0][0].position.columnIndex;\r\n        var lastColumnIndex = groupedDataMap[0][cellsCount - 1].position.columnIndex;\r\n        if (isAllDay) {\r\n            return {\r\n                firstColumnIndex: firstColumnIndex,\r\n                lastColumnIndex: lastColumnIndex,\r\n                firstRowIndex: 0,\r\n                lastRowIndex: 0\r\n            }\r\n        }\r\n        return {\r\n            firstColumnIndex: firstColumnIndex,\r\n            lastColumnIndex: lastColumnIndex,\r\n            firstRowIndex: groupedDataMap[0][0].position.rowIndex,\r\n            lastRowIndex: groupedDataMap[rowsCount - 1][0].position.rowIndex\r\n        }\r\n    }\r\n    isSameCell(firstCellData, secondCellData) {\r\n        var {\r\n            startDate: firstStartDate,\r\n            groupIndex: firstGroupIndex,\r\n            allDay: firstAllDay,\r\n            index: firstIndex\r\n        } = firstCellData;\r\n        var {\r\n            startDate: secondStartDate,\r\n            groupIndex: secondGroupIndex,\r\n            allDay: secondAllDay,\r\n            index: secondIndex\r\n        } = secondCellData;\r\n        return firstStartDate.getTime() === secondStartDate.getTime() && firstGroupIndex === secondGroupIndex && firstAllDay === secondAllDay && firstIndex === secondIndex\r\n    }\r\n    getLastViewDate() {\r\n        var completeViewDataMap = this.completeViewDataMap;\r\n        var rowsCount = completeViewDataMap.length - 1;\r\n        return completeViewDataMap[rowsCount][completeViewDataMap[rowsCount].length - 1].endDate\r\n    }\r\n    getStartViewDate() {\r\n        return this._options.startViewDate\r\n    }\r\n    getIntervalDuration(intervalCount) {\r\n        return this.viewDataGenerator._getIntervalDuration(intervalCount)\r\n    }\r\n    getLastCellEndDate() {\r\n        return new Date(this.getLastViewDate().getTime() - dateUtils.dateToMilliseconds(\"minute\"))\r\n    }\r\n    getLastViewDateByEndDayHour(endDayHour) {\r\n        var lastCellEndDate = this.getLastCellEndDate();\r\n        var endTime = dateUtils.dateTimeFromDecimal(endDayHour);\r\n        var endDateOfLastViewCell = new Date(lastCellEndDate.setHours(endTime.hours, endTime.minutes));\r\n        return this._adjustEndDateByDaylightDiff(lastCellEndDate, endDateOfLastViewCell)\r\n    }\r\n    _adjustEndDateByDaylightDiff(startDate, endDate) {\r\n        var daylightDiff = timeZoneUtils.getDaylightOffsetInMs(startDate, endDate);\r\n        var endDateOfLastViewCell = new Date(endDate.getTime() - daylightDiff);\r\n        return new Date(endDateOfLastViewCell.getTime() - dateUtils.dateToMilliseconds(\"minute\"))\r\n    }\r\n    getCellCountInDay(startDayHour, endDayHour, hoursInterval) {\r\n        return this.viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    getCellCount(options) {\r\n        return this.viewDataGenerator.getCellCount(options)\r\n    }\r\n    getRowCount(options) {\r\n        return this.viewDataGenerator.getRowCount(options)\r\n    }\r\n    getVisibleDayDuration(startDayHour, endDayHour, hoursInterval) {\r\n        return this.viewDataGenerator.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    _getRowCountWithAllDayRows() {\r\n        var allDayRowCount = this._options.isAllDayPanelVisible ? 1 : 0;\r\n        return this.getRowCount(this._options) + allDayRowCount\r\n    }\r\n    getFirstDayOfWeek(firstDayOfWeekOption) {\r\n        return this.viewDataGenerator.getFirstDayOfWeek(firstDayOfWeekOption)\r\n    }\r\n    setViewOptions(options) {\r\n        this._options = this._transformRenderOptions(options)\r\n    }\r\n    getViewOptions() {\r\n        return this._options\r\n    }\r\n    getViewPortGroupCount() {\r\n        var {\r\n            dateTableGroupedMap: dateTableGroupedMap\r\n        } = this.groupedDataMap;\r\n        return (null === dateTableGroupedMap || void 0 === dateTableGroupedMap ? void 0 : dateTableGroupedMap.length) || 0\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}